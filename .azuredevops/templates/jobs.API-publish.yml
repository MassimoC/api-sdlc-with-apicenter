parameters:
  # Pipeline-related parameters
  poolName: '$(poolName)'
  vmImage: '$(vmImage)'
  defaultJobTimeoutInMinutes: 120
  serviceConnection: '$(serviceConnection)'
  # Logic-related parameters
  spectralRulesFullPath: '$(spectralRulesFullPath)'
  failSeverity: 'warn'
  openApiFilePath: '$(openApiFilePath)'
  openApiUrl: '$(openApiUrl)'
  # APIC parameters
  rg: 'rg-apicenter'
  apicName: 'myapicatalog'
  apiName: ''
  apiTitle: ''
  apiDescription: ''
  currentApiVersion: ''
  definitionId: 'xdef2024'
  azdoRunId: '$(azdoRunId)'
  
##---------------------------------------------##
## TEMPLATE LOGIC                              ##
##---------------------------------------------##
jobs:
  - job: publishToApic
    displayName: Azure API Center
    timeoutInMinutes: ${{ parameters.defaultJobTimeoutInMinutes }}
    pool:
      ${{ if ne(parameters.vmImage, '') }}:
        vmImage: ${{ parameters.vmImage }}
      ${{ if ne(parameters.poolName, '') }}:
        name: ${{ parameters.poolName }}
    steps:
      - checkout: self
      
      - task: AzureCLI@2  
        displayName: Debug
        inputs:
          azureSubscription: ${{ parameters.serviceConnection }}
          scriptType: pscore
          scriptLocation: inlineScript
          inlineScript: |
            echo "... Open API Path"
            cat ${{ parameters.openApiFilePath }}
            echo ""
            echo "... API version (from pipeline)"
            echo ${{ parameters.currentApiVersion }}


      - task: AzureCLI@2
        displayName: 'JQ'
        inputs:
          azureSubscription: ${{ parameters.serviceConnection }}
          scriptType: 'bash'
          scriptLocation: inlineScript
          inlineScript: |
            sudo apt --assume-yes install jq
            jContent=$(jq -c . '${{ parameters.openApiFilePath }}')
            echo "##vso[task.setvariable variable=openApiContent;]$jContent"
            descriptionVersionOriginal=$(jq -r '.info.version' '${{ parameters.openApiFilePath }}')
            
            descriptionVersion=$(echo "$descriptionVersionOriginal" | tr '.' '-')
            apiVersion=$(echo ${{ parameters.currentApiVersion }} | tr '.' '-')
            
            concatenatedVersions=$(printf "%s---%s" "$apiVersion" "$descriptionVersion")
            echo $concatenatedVersions
            echo "##vso[task.setvariable variable=concatenatedVersions;]$concatenatedVersions"

            concatenatedVersionsName=$(printf "%s_%s" "$apiVersion" "$descriptionVersionOriginal")
            echo $concatenatedVersionsName
            echo "##vso[task.setvariable variable=concatenatedVersionsName;]$concatenatedVersionsName"

      - bash: |
          echo 'use macro syntax to read variables: $(openApiContent)'

      - bash: |
          echo $(concatenatedVersions)
          echo "##vso[task.setvariable variable=apicVersionId;isOutput=true]$(concatenatedVersions)"
          echo "##vso[task.setvariable variable=apicVersionName;isOutput=true]$(concatenatedVersionsName)"

        name: 'setOutputs'
        displayName: 'Set output variables'

      - task: AzureCLI@2  
        displayName: APIC - api list
        inputs:
          azureSubscription: ${{ parameters.serviceConnection }}
          scriptType: pscore
          scriptLocation: inlineScript
          inlineScript: |
            echo "... ****** az cli :: API LIST command ******"
            echo "az apic api list -g ${{ parameters.rg }} -n ${{ parameters.apicName }}"
            echo ""
            echo "... Executing command"
            az apic api list -g ${{ parameters.rg }} -n ${{ parameters.apicName }}

      - task: AzureCLI@2  
        displayName: APIC - api create
        inputs:
          azureSubscription: ${{ parameters.serviceConnection }}
          scriptType: pscore
          scriptLocation: inlineScript
          inlineScript: |
            echo "... ****** az cli :: API CREATE command ******"
            echo "az apic api create --api-id ${{ parameters.apiName }} -g ${{ parameters.rg }} -n ${{ parameters.apicName }} --title '${{ parameters.apiTitle }}' --type rest --description '${{ parameters.apiDescription }}' --summary '${{ parameters.apiDescription }}' --custom-properties '{"compliancy":false}'"
            echo ""
            echo "... Executing command"
            az apic api create --api-id ${{ parameters.apiName }} -g ${{ parameters.rg }} -n ${{ parameters.apicName }} --title '${{ parameters.apiTitle }}' --type rest --description '${{ parameters.apiDescription }}' --summary '${{ parameters.apiDescription }}' --custom-properties '{"compliancy":false}'

      - task: AzureCLI@2  
        displayName: APIC - api version create
        inputs:
          azureSubscription: ${{ parameters.serviceConnection }}
          scriptType: pscore
          scriptLocation: inlineScript
          inlineScript: |
            echo "... ****** az cli :: API VERSION CREATE command ******"
            echo "az apic api version create --api-id ${{ parameters.apiName }} -g ${{ parameters.rg }} -n ${{ parameters.apicName }} --version-id $(concatenatedVersions) --title '$(concatenatedVersionsName)' --lifecycle-stage design"
            echo ""
            echo "... Executing command"
            az apic api version create --api-id ${{ parameters.apiName }} -g ${{ parameters.rg }} -n ${{ parameters.apicName }} --version-id $(concatenatedVersions) --title '$(concatenatedVersionsName)' --lifecycle-stage design
            

      - task: AzureCLI@2  
        displayName: APIC - api import specification
        inputs:
          azureSubscription: ${{ parameters.serviceConnection }}
          scriptType: pscore
          scriptLocation: inlineScript
          inlineScript: |
            echo "... ****** az cli :: DEFINITION CREATE command ******"
            echo "az apic api definition create --api-id ${{ parameters.apiName }} -g ${{ parameters.rg }} -n ${{ parameters.apicName }} --version-id $(concatenatedVersions) --definition-id '${{ parameters.definitionId }}' --title 'OpenAPI xdef2024'"
            echo ""
            echo "... Executing command"
            az apic api definition create --api-id ${{ parameters.apiName }} -g ${{ parameters.rg }} -n ${{ parameters.apicName }} --version-id $(concatenatedVersions) --definition-id '${{ parameters.definitionId }}' --title 'OpenAPI xdef2024'
            echo "------------------------------------"
            echo ""
            echo "... ****** az cli :: DEFINITION IMPORT-SPECIFICATION command ******"
            echo "az apic api definition import-specification --api-id ${{ parameters.apiName }} --definition-id '${{ parameters.definitionId }}' --format "link" --value '$(openApiUrl)' --specification '{"name":"openapi","version":"3.0.1"}' --version-id $(concatenatedVersions) -g ${{ parameters.rg }} -n ${{ parameters.apicName }}"
            echo ""
            echo "... Executing command"
            az apic api definition import-specification --api-id ${{ parameters.apiName }} --definition-id '${{ parameters.definitionId }}' --format "link" --value '$(openApiUrl)' --specification '{"name":"openapi","version":"3.0.1"}' --version-id $(concatenatedVersions) -g ${{ parameters.rg }} -n ${{ parameters.apicName }}

      - task: DownloadPipelineArtifact@2
        inputs:
          artifact: 'linting'
          path: '$(Pipeline.Workspace)/drop'
        displayName: 'Download artifacts'

      - bash: |
          #cat '$(Pipeline.Workspace)/drop/lint-result.json'
          json_data=$(jq -c . '$(Pipeline.Workspace)/drop/lint-result.json')
          echo "$json_data"
        displayName: 'Show lint-result.json content'

      - task: AzureCLI@2
        displayName: 'Pulish analysis to API Center'
        inputs:
          azureSubscription: ${{ parameters.serviceConnection }}
          scriptType: 'bash'
          scriptLocation: 'inlineScript'
          inlineScript: |
            apicUri="https://management.azure.com/subscriptions/$(subscriptionId)/resourceGroups/${{ parameters.rg }}/providers/Microsoft.ApiCenter/services/${{ parameters.apicName }}/workspaces/default/apis/${{ parameters.apiName }}/versions/$(concatenatedVersions)/definitions/${{ parameters.definitionId }}/updateAnalysisState?api-version=2024-03-01"
            echo "... Upload Linting result to APIC"
            echo $apicUri
            
            echo "... Init APIC analysis"
            json_init=$(jq -n \
              --arg format "inline" \
              --arg state "started" \
              --arg value "" \
              '{format: $format, state: $state, value: $value}')

            echo "... az rest for init"
            echo $json_init
            initResponse=$(az rest --method post \
                    --uri $apicUri \
                    --headers "Content-Type=application/json" \
                    --body "$json_init")

            operation_id=$(echo "$initResponse" | jq -r '.operationId')
            echo "... OperationId is $operation_id"
           
            echo "... Reading content from artifact"
            json_data=$(jq -c '.' $(Pipeline.Workspace)/drop/lint-result.json)
            
            echo "... Adding operationId to json"
            enriched_json_data=$(echo "$json_data" | jq --arg operationId "$operation_id" '. + {operationId: $operationId}')
            echo "... Print enriched json data"
            echo "$enriched_json_data"

            echo "... az rest for upload"
            uploadResponse=$(az rest --method post \
                    --uri $apicUri \
                    --headers "Content-Type=application/json" \
                    --body "$enriched_json_data")

      - task: AzureCLI@2
        displayName: 'Publish change log'
        inputs:
          azureSubscription: ${{ parameters.serviceConnection }}
          scriptType: 'bash'
          scriptLocation: 'inlineScript'
          inlineScript: |
            echo "... Get the azdo timeline via $(azdoTimelineApi)"
            curl -u massimocrippa:$MY_PAT -X GET "$(azdoTimelineApi)" | jq -r '.records[] | select(.name=="ChangeLog output") | {jobId: .parentId, stepId: .id}' > "$(azdoWorkDir)/stepdetails.json"

            echo "... cat stepdetails.json"
            cat "$(azdoWorkDir)/stepdetails.json"

            echo "... get run details"
            jobId=$(jq -r '.jobId' "$(azdoWorkDir)/stepdetails.json" | tr -d '\n' )
            stepId=$(jq -r '.stepId' "$(azdoWorkDir)/stepdetails.json" | tr -d '\n' )

            echo "... AZDO jobid : $jobId ... stepId : $stepId"

            changeLogURL="$(azdoRunId)&view=logs&j=$jobId&t=$stepId"
            echo "... AZDO changelog : $changeLogUR1L"           

            json_customprop=$(jq -c -n --arg urlchangelog $changeLogURL '{changelog: $urlchangelog, compliancy: true}')
            echo $json_customprop

            echo "... ****** az cli :: API UPDATE command ******"
            echo "az apic api update -g ${{ parameters.rg }} -n ${{ parameters.apicName }} --api-id ${{ parameters.apiName }} --custom-properties '$json_customprop'"
            echo ""
            echo "... Executing command"
            az apic api update -g ${{ parameters.rg }} -n ${{ parameters.apicName }} --api-id ${{ parameters.apiName }} --custom-properties $json_customprop
        env:
          MY_PAT: $(azdoPAT) 
