parameters:
  # Pipeline-related parameters
  poolName: '$(poolName)'
  vmImage: '$(vmImage)'
  defaultJobTimeoutInMinutes: 120
  serviceConnection: '$(serviceConnection)'
  # Logic-related parameters
  openApiFilePath: '$(openApiFullPath)'
  currentApiVersion: '$(currentApiVersion)'
  spectralRulesFullPath: '$(spectralRulesFullPath)'
  failSeverity: 'warn'

##---------------------------------------------##
## TEMPLATE LOGIC                              ##
##---------------------------------------------##
jobs:
  - job:
    displayName: Publish API Design to API Center
    timeoutInMinutes: ${{ parameters.defaultJobTimeoutInMinutes }}
    pool:
      ${{ if ne(parameters.vmImage, '') }}:
        vmImage: ${{ parameters.vmImage }}
      ${{ if ne(parameters.poolName, '') }}:
        name: ${{ parameters.poolName }}
    steps:
      - checkout: self

      - script: cat ${{ parameters.openApiFilePath }}
        continueOnError: true
        displayName: 'Show OpenAPI spec'

      # Create a variable
      - script: |
          echo '##vso[task.setvariable variable=openApiContent]'

      - task: AzureCLI@2
        displayName: 'Install JQ on AzDO Agent'
        inputs:
          azureSubscription: ${{ parameters.serviceConnection }}
          scriptType: 'bash'
          scriptLocation: inlineScript
          inlineScript: |
            sudo apt --assume-yes install jq
            fileContent=$( jq -c . ${{ parameters.openApiFilePath }} )
            echo $(fileContent)
            echo '##vso[task.setvariable variable=openApiContent]$(fileContent)'

      - task: AzureCLI@2  
        displayName: APIC - api list
        inputs:
          azureSubscription: ${{ parameters.serviceConnection }}
          scriptType: pscore
          scriptLocation: inlineScript
          inlineScript: |
            az apic api list -g rg-apicenter -s myapicatalog

      - task: AzureCLI@2  
        displayName: APIC - api create
        inputs:
          azureSubscription: ${{ parameters.serviceConnection }}
          scriptType: pscore
          scriptLocation: inlineScript
          inlineScript: |
            az apic api create -g rg-apicenter -s myapicatalog --name rocket-api --title "Rocket API" --kind rest --description "to the clouds and beyond" --summary "to the clouds and beyond"

      - task: AzureCLI@2  
        displayName: APIC - api version create
        inputs:
          azureSubscription: ${{ parameters.serviceConnection }}
          scriptType: pscore
          scriptLocation: inlineScript
          inlineScript: |
            az apic api version create -g rg-apicenter -s myapicatalog --api-name rocket-api --name 2024-01-01 --title "${{ parameters.currentApiVersion }}"

      - task: AzureCLI@2  
        displayName: APIC - api import specification
        inputs:
          azureSubscription: ${{ parameters.serviceConnection }}
          scriptType: pscore
          scriptLocation: inlineScript
          inlineScript: |
            az apic api definition import-specification -g rg-apicenter -s myapicatalog --api-name rocket-api --version-name 2024-01-01 --definition-name openapi3 --format "inline" --value '$($openApiContent)'

# az apic api definition import-specification -g api-center-test -s contosoeuap --api-name echo-api-2 --version-name 2023-08-01 --definition-name openapi3 --format "inline" --value '{"openapi":"3.0.1","info":{"title":"httpbin.org","description":"API Management facade for a very handy and free online HTTP tool.","version":"1.0"}}' --specification '{"name":"openapi","version":"3.0.0"}'
# az apic api register -g api-center-test -s contosoeuap --api-location "examples/cli-examples/spec-examples/openai.json" --environment-name public

