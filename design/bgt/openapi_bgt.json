{
    "openapi": "3.0.1",
    "info": {
        "title": "igt-public-api-v1",
        "description": "This specification contains <b>V1</b> version of merged publicly exposed Anywhere API and PlayDigital API<br/><br/>To avoid name clash in schemas section duplicated objects in PlayDigital API were prefixed with interactive<br/><br/>For example interactiveErrorDTO",
        "version": "1.0"
    },
    "servers": [
        {
            "url": "https://ltt01mp-apimprod01.azure-api.net/api/v1"
        }
    ],
    "paths": {
        "/draw-games/wagers": {
            "get": {
                "summary": "getWagers",
                "description": "Gets historical wagers.  Returns a list of previously played wager details\n from a back end historical store of wagers.\n\nError Codes:\nWAGER_NOT_FOUND ",
                "operationId": "getWagers",
                "parameters": [
                    {
                        "name": "date-from",
                        "in": "query",
                        "description": "Format - int64. Paging start date",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "date-to",
                        "in": "query",
                        "description": "Format - int64. Paging end date",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "game-name",
                        "in": "query",
                        "description": "List of game names as comma separated values.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "draw-id",
                        "in": "query",
                        "description": "Format - int32. Draw id to restrict results",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "draw-id-from",
                        "in": "query",
                        "description": "Format - int32. Paging start draw id",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "draw-id-to",
                        "in": "query",
                        "description": "Format - int32. Paging end draw id",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "description": "Format - int32. Size of the elements in the page to be returned",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Status of the wager",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Wagers requested",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WagerPageDTO"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "User not authenticated"
                    },
                    "500": {
                        "description": "System exception"
                    },
                    "503": {
                        "description": "System not available. Retry later"
                    }
                }
            },
            "post": {
                "summary": "placeWagers",
                "description": "Places basket of wagers.\n Performs the same operations as checkWager and makes the transactions with host.\n\nError Codes:\nPLAYER_NOT_FOUND \nMONTHLY_SPENDING_LIMIT_EXCEEDED \nPAYMENT_ALREADY_PERFORMED \nPAYMENT_NOT_FOUND \nPOCKET_LIMITS_EXCEEDED \nDAILY_SPENDING_LIMIT_EXCEEDED \nINVALID_WALLET_STATE \nWEEKLY_SPENDING_LIMIT_EXCEEDED \nINVALID_OPERATION \nINSUFFICIENT_FUNDS \nPAYMENT_FAILED \nPAYMENT_LIMITS_EXCEEDED \nPLAYER_LOCKED \nMISSING_PROMOTION_DATA \nPAYMENT_INVALID ",
                "operationId": "placeWagers",
                "requestBody": {
                    "description": "Basket of wagers",
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/WagerDTO"
                                },
                                "description": "Represents a wager for a draw"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Basket of wagers with status of placing",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/WagerDTO"
                                    },
                                    "description": "Represents a wager for a draw"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "User not authenticated"
                    },
                    "500": {
                        "description": "System exception"
                    },
                    "503": {
                        "description": "System not available. Retry later"
                    }
                }
            }
        },
        "/draw-games/wagers/check": {
            "post": {
                "summary": "checkWagers",
                "description": "Checks basket of wagers without placing them.\n Validates the format of the DTOs and verifies the draw is playable\n and the wager could be valid, but does not make a transaction with host.",
                "operationId": "checkWagers",
                "requestBody": {
                    "description": "Basket of wagers",
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/WagerDTO"
                                },
                                "description": "Represents a wager for a draw"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Basket of wagers with status of check",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/WagerDTO"
                                    },
                                    "description": "Represents a wager for a draw"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "User not authenticated"
                    },
                    "500": {
                        "description": "System exception"
                    },
                    "503": {
                        "description": "System not available. Retry later"
                    }
                }
            }
        },
        "/draw-games/transaction-lookup": {
            "post": {
                "summary": "lookupTransaction",
                "description": "Lookup a transaction using a request id supplied by the client\n at the time of the transaction.\n\nError Codes:\nGAME_NOT_FOUND \nWAGER_NOT_FOUND \nDRAW_NOT_ACTIVE ",
                "operationId": "lookupTransaction",
                "parameters": [
                    {
                        "name": "X-Originator-Id",
                        "in": "header",
                        "description": "A comma separated list of third party\n ids, such as retailer, store, pos, and teller, that the request is on behalf of.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "X-Session-Id",
                        "in": "header",
                        "description": "A comma separated list of channel, terminal,\n and sequence number.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "description": "A comma separated list of request ID and\n time-stamp.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Transaction to lookup.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TransactionLookupDTO"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "The transaction details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TransactionLookupDTO"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Not authenticated"
                    },
                    "500": {
                        "description": "System exception"
                    },
                    "503": {
                        "description": "System not available. Retry later"
                    }
                }
            }
        },
        "/oauth/self/tokens": {
            "put": {
                "summary": "refreshToken",
                "description": "Returns a new refresh token when passed an existing one.<br/>\n \n The following attribute should be populated in the TokenDTO.<br/>\n \n siteId, token, clientId <br/>\n \n The method will return a pair of new tokens.<br/>\n\nError Codes:\nINVALID_REFRESH_TOKEN \nINVALID_CLIENT_ID \nTOKEN_LIMIT_EXCEEDED ",
                "operationId": "refreshToken",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TokenDTO"
                            },
                            "example": {
                                "siteId": "string",
                                "scope": [
                                    "string"
                                ],
                                "clientId": "string",
                                "clientCredentials": {},
                                "authCode": "string",
                                "token": "string",
                                "tokenType": "string",
                                "tokenParams": {},
                                "resourceOwnerCredentials": {}
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "An OAuth refresh token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/TokenDTO"
                                    },
                                    "description": "Encapsulates the details for an OAuth token, contains both the data required to use a token and to create one."
                                },
                                "example": [
                                    {
                                        "siteId": "string",
                                        "scope": [
                                            "string"
                                        ],
                                        "clientId": "string",
                                        "clientCredentials": {},
                                        "authCode": "string",
                                        "token": "string",
                                        "tokenType": "string",
                                        "tokenParams": {},
                                        "resourceOwnerCredentials": {}
                                    }
                                ]
                            }
                        }
                    },
                    "401": {
                        "description": "User not authenticated"
                    },
                    "500": {
                        "description": "System exception"
                    },
                    "503": {
                        "description": "System not available. Retry later"
                    }
                }
            },
            "post": {
                "summary": "generateToken",
                "description": "Returns an OAuth token from a one-time authCode.<br/>\n \n The following attribute should be populated in the TokenDTO.<br/>\n \n authCode, scope, clientId, clientCredentials<br/>\n \n The method will return two tokens: an access token and a refresh token.<br/>\n\nError Codes:\nNOT_AUTHORIZED \nINVALID_CLIENT_ID \nTOKEN_LIMIT_EXCEEDED ",
                "operationId": "generateToken",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TokenDTO"
                            },
                            "example": {
                                "siteId": "string",
                                "scope": [
                                    "string"
                                ],
                                "clientId": "string",
                                "clientCredentials": {},
                                "authCode": "string",
                                "token": "string",
                                "tokenType": "string",
                                "tokenParams": {},
                                "resourceOwnerCredentials": {}
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OAuth tokens",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/TokenDTO"
                                    },
                                    "description": "Encapsulates the details for an OAuth token, contains both the data required to use a token and to create one."
                                },
                                "example": [
                                    {
                                        "siteId": "string",
                                        "scope": [
                                            "string"
                                        ],
                                        "clientId": "string",
                                        "clientCredentials": {},
                                        "authCode": "string",
                                        "token": "string",
                                        "tokenType": "string",
                                        "tokenParams": {},
                                        "resourceOwnerCredentials": {}
                                    }
                                ]
                            }
                        }
                    },
                    "401": {
                        "description": "authCode not valid"
                    },
                    "500": {
                        "description": "System exception"
                    },
                    "503": {
                        "description": "System not available. Retry later"
                    }
                }
            },
            "delete": {
                "summary": "deleteToken",
                "description": "Delete a token if the OAuth server supports it.\n\nError Codes:\nTOKEN_NULL_OR_EMPTY ",
                "operationId": "deleteToken",
                "responses": {
                    "200": {
                        "description": "OAuth Token deleted successfully"
                    },
                    "401": {
                        "description": "User not authenticated"
                    },
                    "500": {
                        "description": "System exception"
                    },
                    "503": {
                        "description": "System not available. Retry later"
                    }
                }
            }
        },
        "/oauth/self/tokens/access": {
            "delete": {
                "summary": "deleteAccessToken",
                "description": "Delete user's access token.",
                "operationId": "deleteAccessToken",
                "responses": {
                    "200": {
                        "description": "OAuth Token deleted successfully"
                    },
                    "401": {
                        "description": "User not authenticated"
                    },
                    "500": {
                        "description": "System exception"
                    },
                    "503": {
                        "description": "System not available. Retry later"
                    }
                }
            }
        },
        "/oauth/self/tokens/refresh": {
            "delete": {
                "summary": "deleteRefreshToken",
                "description": "Delete user's refresh token.",
                "operationId": "deleteRefreshToken",
                "responses": {
                    "200": {
                        "description": "User's refresh token deleted successfully"
                    },
                    "401": {
                        "description": "User not authenticated"
                    },
                    "500": {
                        "description": "System exception"
                    },
                    "503": {
                        "description": "System not available. Retry later"
                    }
                }
            }
        },
        "/oauth/login": {
            "post": {
                "summary": "login",
                "description": "Returns OAuth tokens or authorization code if the player's\n credentials are correct. \n \n The following attribute should be populated in the TokenDTO.<br/>\n \n clientId, resourceOwnerCredentials<br/>\n \n The method will return a single TokenDTO with the authCode, or\n if an implicit grant is allowed, the method will return two \n tokens: an access token and a refresh token.<br/>\n\nError Codes:\n7 TC_NOT_ACCEPTED \n3 PLAYER_NOT_FOUND \n4 PLAYER_NOT_ACTIVE \n5 INCORRECT_X_DEVICE_NAME_HEADER \n-1 GENERIC_ERROR \n1 SESSION_LIMITS_EXCEEDED \nINVALID_CLIENT_ID \n6 PLAYER_BLACKLISTED \n8 PLAYER_LOCKED \n9 PLAYER_UNDERGOING_CLOSURE_PROCESS \nTOKEN_LIMIT_EXCEEDED ",
                "operationId": "login",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TokenDTO"
                            },
                            "example": {
                                "siteId": "string",
                                "scope": [
                                    "string"
                                ],
                                "clientId": "string",
                                "clientCredentials": {},
                                "authCode": "string",
                                "token": "string",
                                "tokenType": "string",
                                "tokenParams": {},
                                "resourceOwnerCredentials": {}
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OAuth authorization code or tokens",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/TokenDTO"
                                    },
                                    "description": "Encapsulates the details for an OAuth token, contains both the data required to use a token and to create one."
                                },
                                "example": [
                                    {
                                        "siteId": "string",
                                        "scope": [
                                            "string"
                                        ],
                                        "clientId": "string",
                                        "clientCredentials": {},
                                        "authCode": "string",
                                        "token": "string",
                                        "tokenType": "string",
                                        "tokenParams": {},
                                        "resourceOwnerCredentials": {}
                                    }
                                ]
                            }
                        }
                    },
                    "401": {
                        "description": "authCode not valid"
                    },
                    "500": {
                        "description": "System exception"
                    },
                    "503": {
                        "description": "System not available. Retry later"
                    }
                }
            }
        },
        "/draw-games/games": {
            "get": {
                "summary": "getGames",
                "description": "Provides information about the games available via the\n other draw-games resources.\n\nError Codes:\nGAME_NOT_FOUND ",
                "operationId": "getGames",
                "parameters": [
                    {
                        "name": "channel",
                        "in": "query",
                        "description": "Optional channel name game information is for",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "a list of game information",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GamePageDTO"
                                },
                                "example": {
                                    "nextPageUrl": "string",
                                    "previousPageUrl": "string",
                                    "pageUrls": {},
                                    "nextItems": 0,
                                    "previousItems": 0,
                                    "games": [
                                        {
                                            "gameId": "string",
                                            "gameName": "string",
                                            "validationStatus": "NOT_ACTIVE",
                                            "ticketPrice": 0,
                                            "launchDate": 0,
                                            "startDistributionDate": 0,
                                            "endDistributionDate": 0,
                                            "disableDate": 0,
                                            "preCallDate": 0,
                                            "numberOfTicketsInPack": 0,
                                            "totalTicket": 0,
                                            "overallOdds": "string",
                                            "featured": true,
                                            "prizeTiers": [
                                                {
                                                    "tierNumber": 0,
                                                    "prizeAmount": 0,
                                                    "winningTickets": 0,
                                                    "paidTickets": 0,
                                                    "prizeDescription": "string"
                                                }
                                            ],
                                            "lastUpdatedTime": 0
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "a list of game information",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GamePageDTO"
                                },
                                "example": {
                                    "nextPageUrl": "string",
                                    "previousPageUrl": "string",
                                    "pageUrls": {},
                                    "nextItems": 0,
                                    "previousItems": 0,
                                    "games": [
                                        {
                                            "gameId": "string",
                                            "gameName": "string",
                                            "validationStatus": "NOT_ACTIVE",
                                            "ticketPrice": 0,
                                            "launchDate": 0,
                                            "startDistributionDate": 0,
                                            "endDistributionDate": 0,
                                            "disableDate": 0,
                                            "preCallDate": 0,
                                            "numberOfTicketsInPack": 0,
                                            "totalTicket": 0,
                                            "overallOdds": "string",
                                            "featured": true,
                                            "prizeTiers": [
                                                {
                                                    "tierNumber": 0,
                                                    "prizeAmount": 0,
                                                    "winningTickets": 0,
                                                    "paidTickets": 0,
                                                    "prizeDescription": "string"
                                                }
                                            ],
                                            "lastUpdatedTime": 0
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "System exception"
                    },
                    "503": {
                        "description": "System not available. Retry later"
                    }
                }
            }
        },
        "/locations": {
            "get": {
                "summary": "getLocations",
                "description": "Gets a page of lottery locations",
                "operationId": "getLocations",
                "parameters": [
                    {
                        "name": "type",
                        "in": "query",
                        "description": "Location type to restrict results to",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "postal-codes",
                        "in": "query",
                        "description": "Comma separated list of postal codes to restrict results to",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "city",
                        "in": "query",
                        "description": "City to restrict results to",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "game-ids",
                        "in": "query",
                        "description": "Commas separated list of instant game numbers to restrict results to",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "draw-game-ids",
                        "in": "query",
                        "description": "Commas separated list of draw game names to restrict results to",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "lucky",
                        "in": "query",
                        "description": "Restrict results to lucky locations",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "assisted",
                        "in": "query",
                        "description": "Restrict results to locations with assisted checkout",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "self-service",
                        "in": "query",
                        "description": "Restrict results to locations with self-checkout",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "monitor-display",
                        "in": "query",
                        "description": "Restrict results to locations with a monitor game display",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "ticket-self-check",
                        "in": "query",
                        "description": "Restrict results to locations with a ticket self-check device",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "smoking-allowed",
                        "in": "query",
                        "description": "Restrict results to locations that allow or ban smoking",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "sells-draw-games",
                        "in": "query",
                        "description": "Restrict results to locations that sell or do not sell draw games",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "sells-instant-games",
                        "in": "query",
                        "description": "Restrict results to locations that sell or do not sell instant games",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "cashing-agent",
                        "in": "query",
                        "description": "Restrict results to locations that are cashing agents",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "region",
                        "in": "query",
                        "description": "Restrict results to locations with winner awareness information in the region",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "winners-game-id",
                        "in": "query",
                        "description": "Restrict results to locations with winner awareness information for given instant game number or online game name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Comma separated list of status to restrict results to",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "origin",
                        "in": "query",
                        "description": "Comma separated latitude and longitude in decimal degrees or zip code to use as the origin for distance ordering of results",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "bounds",
                        "in": "query",
                        "description": "Format - int64. Restrict the results to locations within the given distance to the origin point in meters",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "description": "Format - int32. Set results page size",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "lenient",
                        "in": "query",
                        "description": "If true, unmatched constraints will still return locations. By default matching is strict",
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A page of locations",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LocationPageDTO"
                                },
                                "example": {
                                    "nextPageUrl": "string",
                                    "previousPageUrl": "string",
                                    "pageUrls": {},
                                    "nextItems": 0,
                                    "previousItems": 0,
                                    "locations": [
                                        {
                                            "name": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "A page of locations",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LocationPageDTO"
                                },
                                "example": {
                                    "nextPageUrl": "string",
                                    "previousPageUrl": "string",
                                    "pageUrls": {},
                                    "nextItems": 0,
                                    "previousItems": 0,
                                    "locations": [
                                        {
                                            "name": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "System exception"
                    },
                    "503": {
                        "description": "System not available. Retry later"
                    }
                }
            }
        },
        "/draw-games/draws": {
            "get": {
                "summary": "getDraws",
                "description": "Gets draws filtering by game-names.\n There are 4 times of searches:\n <ul>\n <li><b>Current open draws:</b> when no parameters are informed except game-names, size and lang</li>\n <li><b>Date span search:</b> when date-from and date-to are both informed. It returns the draws between the dates informed</li>\n <li><b>Day offset:</b> when previous-days and next-days are both informed. It returns the draws between the offset informed where current date is the reference date</li>\n <li><b>Draw offset:</b> when previous-draws and next-draws are both informed. It returns the draws between the offset informed where current open draw is the reference draw. This search should be restricted to a single game since draws for different games might be different.</li>\n </ul>\n\nError Codes:\nVALIDATION_ERROR ",
                "operationId": "getDraws",
                "parameters": [
                    {
                        "name": "game-names",
                        "in": "query",
                        "description": "List of game names as comma separated values. If not informed all draws for all games will be returned",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "date-from",
                        "in": "query",
                        "description": "Format - int64. Starting date to be used by date span draw searches (date-to has to be informed as well)",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "date-to",
                        "in": "query",
                        "description": "Format - int64. Ending date to be used by date span draw searches (date-from has to be informed as well)",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "previous-days",
                        "in": "query",
                        "description": "Format - int32. Amount of previous days from today to be used by day offset searches (next-days has to be informed as well)",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "next-days",
                        "in": "query",
                        "description": "Format - int32. Amount of next days from today to be used by day offset searches (previous-days has to be informed as well)",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "previous-draws",
                        "in": "query",
                        "description": "Format - int32. Amount of previous draws from current open draw to be used by draw offset searches (next-draws has to be informed as well)",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "next-draws",
                        "in": "query",
                        "description": "Format - int32. Amount of next draws from current open draw to be used by draw offset searches (previous-draws has to be informed as well)",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "start-draw",
                        "in": "query",
                        "description": "Format - int32. Starting draw number",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "end-draw",
                        "in": "query",
                        "description": "Format - int32. Ending draw number",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Draw status to restrict results to",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "description": "Format - int32. Size of the elements in the page to be returned",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "lang",
                        "in": "query",
                        "description": "Language in which to return names",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "selections",
                        "in": "query",
                        "description": "A comma separated list of winning selections to be used to filter draw result searches",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "secondary-selections",
                        "in": "query",
                        "description": "A comma separated list of winning secondary selections to be used to filter draw result searches",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "bet-type",
                        "in": "query",
                        "description": "The bet type to used to filter draw results searches, along with selections",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "exclude-prize-tiers",
                        "in": "query",
                        "description": "If true, do not include prize tier information in response",
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of draws requested",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DrawPageDTO"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "List of draws requested",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DrawPageDTO"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "System exception"
                    },
                    "503": {
                        "description": "System not available. Retry later"
                    }
                }
            }
        },
        "/draw-games/draws/page": {
            "get": {
                "summary": "getDrawsPaginated",
                "description": "Gets draws filtering by game-names.\n There are 4 times of searches:\n <ul>\n <li><b>Current open draws:</b> when no parameters are informed except game-names, size and lang</li>\n <li><b>Date span search:</b> when date-from and date-to are both informed. It returns the draws between the dates informed</li>\n <li><b>Day offset:</b> when previous-days and next-days are both informed. It returns the draws between the offset informed where current date is the reference date</li>\n <li><b>Draw offset:</b> when previous-draws and next-draws are both informed. It returns the draws between the offset informed where current open draw is the reference draw. This search should be restricted to a single game since draws for different games might be different.</li>\n </ul>\n\nSupports pagination\n\nError Codes:\nVALIDATION_ERROR ",
                "operationId": "getDrawsPaginated",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Format - int32. Number of page to be return.",
                        "schema": {
                            "type": "integer"
                        },
                        "example": 0
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "description": "Format - int32. Amount of records on page to be returned. Defines offset if 'page' greater than 1. ",
                        "schema": {
                            "type": "integer"
                        },
                        "example": 10
                    },
                    {
                        "name": "game-names",
                        "in": "query",
                        "description": "List of game names as comma separated values. If not informed all draws for all games will be returned",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "date-from",
                        "in": "query",
                        "description": "Format - int64. Starting date to be used by date span draw searches (date-to has to be informed as well)",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "date-to",
                        "in": "query",
                        "description": "Format - int64. Ending date to be used by date span draw searches (date-from has to be informed as well)",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "previous-days",
                        "in": "query",
                        "description": "Format - int32. Amount of previous days from today to be used by day offset searches (next-days has to be informed as well)",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "next-days",
                        "in": "query",
                        "description": "Format - int32. Amount of next days from today to be used by day offset searches (previous-days has to be informed as well)",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "previous-draws",
                        "in": "query",
                        "description": "Format - int32. Amount of previous draws from current open draw to be used by draw offset searches (next-draws has to be informed as well)",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "next-draws",
                        "in": "query",
                        "description": "Format - int32. Amount of next draws from current open draw to be used by draw offset searches (previous-draws has to be informed as well)",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "start-draw",
                        "in": "query",
                        "description": "Format - int32. Starting draw number",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "end-draw",
                        "in": "query",
                        "description": "Format - int32. Ending draw number",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Draw status to restrict results to",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "lang",
                        "in": "query",
                        "description": "Language in which to return names",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "selections",
                        "in": "query",
                        "description": "A comma separated list of winning selections to be used to filter draw result searches",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "secondary-selections",
                        "in": "query",
                        "description": "A comma separated list of winning secondary selections to be used to filter draw result searches",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "bet-type",
                        "in": "query",
                        "description": "The bet type to used to filter draw results searches, along with selections",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "exclude-prize-tiers",
                        "in": "query",
                        "description": "If true, do not include prize tier information in response",
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of draws requested",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DrawPageDTO"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "List of draws requested",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DrawPageDTO"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "System exception"
                    },
                    "503": {
                        "description": "System not available. Retry later"
                    }
                }
            }
        },
        "/draw-games/draws/{game-name}/{id}": {
            "get": {
                "summary": "getDraw",
                "description": "Gets draw by game name and draw id.\n\nError Codes:\nVALIDATION_ERROR ",
                "operationId": "getDraw",
                "parameters": [
                    {
                        "name": "game-name",
                        "in": "path",
                        "description": "Game name",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Draw id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "lang",
                        "in": "query",
                        "description": "Language in which to return names",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Draw requested",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DrawDTO"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Draw requested",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DrawDTO"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "System exception"
                    },
                    "503": {
                        "description": "System not available. Retry later"
                    }
                }
            }
        },
        "/draw-games/favorite-wagers/groups": {
            "get": {
                "summary": "getFavoriteWagerGroupss",
                "description": "Gets user's favorite wager groups.",
                "operationId": "getFavoriteWagerGroupss",
                "responses": {
                    "200": {
                        "description": "Page of favorite wager groups",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FavoriteWagerGroupPageDTO"
                                },
                                "example": {
                                    "nextPageUrl": "string",
                                    "previousPageUrl": "string",
                                    "pageUrls": {},
                                    "nextItems": 0,
                                    "previousItems": 0,
                                    "favoriteWagerGroups": [
                                        {
                                            "id": "string",
                                            "name": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "User not authenticated"
                    },
                    "500": {
                        "description": "System exception"
                    },
                    "503": {
                        "description": "System not available. Retry later"
                    }
                }
            },
            "post": {
                "summary": "createFavoriteWagerGroup",
                "description": "Creates an empty favorite wager group.\n\nError Codes:\nFAVORITE_GROUP_ALREADY_EXISTS ",
                "operationId": "createFavoriteWagerGroup",
                "requestBody": {
                    "description": "Favorite group wager to be created",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FavoriteWagerGroupDTO"
                            },
                            "example": {
                                "id": "string",
                                "name": "string"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Created favorite wager group",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FavoriteWagerGroupDTO"
                                },
                                "example": {
                                    "id": "string",
                                    "name": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "User not authenticated"
                    },
                    "500": {
                        "description": "System exception"
                    },
                    "503": {
                        "description": "System not available. Retry later"
                    }
                }
            }
        },
        "/draw-games/favorite-wagers/wagers": {
            "get": {
                "summary": "getFavoriteWagers",
                "description": "Gets user's favorite wagers.",
                "operationId": "getFavoriteWagers",
                "parameters": [
                    {
                        "name": "group",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "game-names",
                        "in": "query",
                        "description": "List of game names as comma separated values.  Filters returned\n favorite wagers by game name.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Page of favorite wagers",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FavoriteWagerPageDTO"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "User not authenticated"
                    },
                    "500": {
                        "description": "System exception"
                    },
                    "503": {
                        "description": "System not available. Retry later"
                    }
                }
            },
            "post": {
                "summary": "createFavoriteWager",
                "description": "Creates a favorite wager. If only the group name is set in the request, \n an empty group is created.\n\nError Codes:\nFAVORITE_WAGER_INVALID \nMAX_FAVORITE_BOARDS_EXCEEDED \nWager cannot be added to Favorite Group \nMAX_FAVORITES_EXCEEDED ",
                "operationId": "createFavoriteWager",
                "requestBody": {
                    "description": "Favorite wager to be created",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FavoriteWagerDTO"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Created favorite wager",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FavoriteWagerDTO"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "User not authenticated"
                    },
                    "500": {
                        "description": "System exception"
                    },
                    "503": {
                        "description": "System not available. Retry later"
                    }
                }
            }
        },
        "/draw-games/favorite-wagers/groups/{id}": {
            "get": {
                "summary": "getFavoriteWagerGroup",
                "description": "Returns user's favorite wager group by id.",
                "operationId": "getFavoriteWagerGroup",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Favorite wager group id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Favorite wager group requested",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FavoriteWagerGroupDTO"
                                },
                                "example": {
                                    "id": "string",
                                    "name": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "User not authenticated"
                    },
                    "500": {
                        "description": "System exception"
                    },
                    "503": {
                        "description": "System not available. Retry later"
                    }
                }
            },
            "put": {
                "summary": "updateFavoriteWagerGroup",
                "description": "Updates the name of a favorite wager group.",
                "operationId": "updateFavoriteWagerGroup",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Favorite group wager to be updated",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FavoriteWagerGroupDTO"
                            },
                            "example": {
                                "id": "string",
                                "name": "string"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Updated favorite wager group",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FavoriteWagerGroupDTO"
                                },
                                "example": {
                                    "id": "string",
                                    "name": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "User not authenticated"
                    },
                    "500": {
                        "description": "System exception"
                    },
                    "503": {
                        "description": "System not available. Retry later"
                    }
                }
            },
            "delete": {
                "summary": "deleteFavoriteWagerGroup",
                "description": "Deletes user's favorite wager group.\n\nError Codes:\nENTITY_NOT_FOUND ",
                "operationId": "deleteFavoriteWagerGroup",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Favorite wager id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Favorite wager group deleted successfully"
                    },
                    "401": {
                        "description": "User not authenticated"
                    },
                    "500": {
                        "description": "System exception"
                    },
                    "503": {
                        "description": "System not available. Retry later"
                    }
                }
            }
        },
        "/draw-games/favorite-wagers/wagers/{id}": {
            "get": {
                "summary": "getFavoriteWager",
                "description": "Returns user's favorite wager by id.",
                "operationId": "getFavoriteWager",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Favorite wager id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Favorite wager requested",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FavoriteWagerDTO"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "User not authenticated"
                    },
                    "500": {
                        "description": "System exception"
                    },
                    "503": {
                        "description": "System not available. Retry later"
                    }
                }
            },
            "put": {
                "summary": "updateFavoriteWager",
                "description": "Updates user's favorite wager by id.\n\nError Codes:\nWager cannot be added to Favorite Group \nFAVORITE_WAGER_INVALID ",
                "operationId": "updateFavoriteWager",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Favorite wager id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Favorite wager to be updated",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FavoriteWagerDTO"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Updated favorite wager",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FavoriteWagerDTO"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "User not authenticated"
                    },
                    "500": {
                        "description": "System exception"
                    },
                    "503": {
                        "description": "System not available. Retry later"
                    }
                }
            },
            "delete": {
                "summary": "deleteFavoriteWager",
                "description": "Deletes user's favorite wager by id.",
                "operationId": "deleteFavoriteWager",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Favorite wager id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User's favorite wager deleted successfully"
                    },
                    "401": {
                        "description": "User not authenticated"
                    },
                    "500": {
                        "description": "System exception"
                    },
                    "503": {
                        "description": "System not available. Retry later"
                    }
                }
            }
        },
        "/draw-games/subscriptions": {
            "get": {
                "summary": "getSubscriptions",
                "description": "Gets all user's subscriptions.\n\nError Codes:\nMISSING_PLAYER_DATA ",
                "operationId": "getSubscriptions",
                "parameters": [
                    {
                        "name": "game-names",
                        "in": "query",
                        "description": "Names of games to get subscriptions for",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "statuses",
                        "in": "query",
                        "description": "Comma separated list of statuses to limit results to",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "description": "Format - int32.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of subscriptions",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SubscriptionPageDTO"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "User not authenticated"
                    },
                    "500": {
                        "description": "System exception"
                    },
                    "503": {
                        "description": "System not available. Retry later"
                    }
                }
            },
            "post": {
                "summary": "createSubscription",
                "description": "Adds user's subscription.\n\nError Codes:\nPLAYER_NOT_FOUND \nMONTHLY_SPENDING_LIMIT_EXCEEDED \nPAYMENT_ALREADY_PERFORMED \nPAYMENT_NOT_FOUND \nPOCKET_LIMITS_EXCEEDED \nMISSING_PLAYER_DATA \nDRAW_TOO_ADVANCED \nDAILY_SPENDING_LIMIT_EXCEEDED \nINVALID_WALLET_STATE \nGAME_NOT_FOUND \nESTE_CLIENT_EXCEPTION \nMISSING_REQUEST_DATA \nWEEKLY_SPENDING_LIMIT_EXCEEDED \nINVALID_OPERATION \nPAYMENT_FAILED \nINSUFFICIENT_FUNDS \nPAYMENT_LIMITS_EXCEEDED \nVALIDATION_ERROR \nPLAYER_LOCKED \nPAYMENT_INVALID ",
                "operationId": "createSubscription",
                "requestBody": {
                    "description": "Subscription to be created",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SubscriptionDTO"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Created subscription",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SubscriptionDTO"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "User not authenticated"
                    },
                    "500": {
                        "description": "System exception"
                    },
                    "503": {
                        "description": "System not available. Retry later"
                    }
                }
            }
        },
        "/draw-games/subscriptions/{id}": {
            "get": {
                "summary": "getSubscription",
                "description": "Returns user's subscription by id.\n\nError Codes:\nMISSING_REQUEST_DATA \nMISSING_PLAYER_DATA \nINCORRECT_PLAYER_ID \nINVALID_SUBS_ID ",
                "operationId": "getSubscription",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Subscription id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Subscription requested",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SubscriptionDTO"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "User not authenticated"
                    },
                    "500": {
                        "description": "System exception"
                    },
                    "503": {
                        "description": "System not available. Retry later"
                    }
                }
            },
            "put": {
                "summary": "updateSubscription",
                "description": "Updates user's subscription by id.\n\nError Codes:\nINVALID_SUB_ID \nGAME_NOT_FOUND \nMISSING_REQUEST_DATA \nMISSING_PLAYER_DATA \nINVALID_SUBSCRIPTION_STATE ",
                "operationId": "updateSubscription",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Subscription",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Subscription object to be updated",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SubscriptionDTO"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Updated subscription",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SubscriptionDTO"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "User not authenticated"
                    },
                    "500": {
                        "description": "System exception"
                    },
                    "503": {
                        "description": "System not available. Retry later"
                    }
                }
            }
        },
        "/draw-games/subscriptions/{id}/wagers": {
            "get": {
                "summary": "getSubscriptionWagers",
                "description": "Gets wagers correlated with particular user's subscription.",
                "operationId": "getSubscriptionWagers",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of the subscription",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "date-from",
                        "in": "query",
                        "description": "Format - int64. Paging start date",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "date-to",
                        "in": "query",
                        "description": "Format - int64. Paging end date",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "statuses",
                        "in": "query",
                        "description": "Comma separated list of statuses to limit results to",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "sort-by",
                        "in": "query",
                        "description": "Field that should be used for sorting",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "sort-ascending",
                        "in": "query",
                        "description": "use ascending sort",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Format - int32. page number ,starts with 0",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "description": "Format - int32. Size of the elements in the page to be returned",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "paginated list of subscription wagers",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WagerPageDTO"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "User not authenticated"
                    },
                    "500": {
                        "description": "System exception"
                    },
                    "503": {
                        "description": "System not available. Retry later"
                    }
                }
            }
        },
        "/gaming-system/uid": {
            "post": {
                "summary": "createUid",
                "description": "Generate UID for use by client with the gaming system.\n\nError Codes:\nNOT_AUTHORIZED ",
                "operationId": "createUid",
                "parameters": [
                    {
                        "name": "X-Originator-Id",
                        "in": "header",
                        "description": "A comma separated list of third party\n ids, such as retailer, store, pos, and teller, that the request is on behalf of.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "UID request.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UidDTO"
                            },
                            "example": {
                                "type": "string",
                                "uid": "string"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "The UID response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UidDTO"
                                },
                                "example": {
                                    "type": "string",
                                    "uid": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Not authenticated"
                    },
                    "500": {
                        "description": "System exception"
                    },
                    "503": {
                        "description": "System not available. Retry later"
                    }
                }
            }
        },
        "/random/quickpicks": {
            "post": {
                "summary": "getQuickPicks",
                "description": "Generates of set of quick pick boards. All requested boards are returned \n or none are returned. Partial responses are not allowed.",
                "operationId": "getQuickPicks",
                "requestBody": {
                    "description": "The requested boards",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/QuickPickDTO"
                            },
                            "example": {
                                "requestId": "string",
                                "generatorId": "string",
                                "generatorVersion": "string",
                                "timeStamp": 0,
                                "boardSpecs": [
                                    {
                                        "numberOfBoards": 0,
                                        "numberOfSelections": 0,
                                        "rangeMin": 0,
                                        "rangeMax": 0,
                                        "withReplacement": true,
                                        "rangeExclusions": [
                                            0
                                        ],
                                        "frequency": [
                                            0
                                        ],
                                        "probabilityWeight": [
                                            0
                                        ],
                                        "sortOrder": "ASCENDING",
                                        "boards": [
                                            [
                                                0
                                            ]
                                        ]
                                    }
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "The generated boards included in each board spec",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/QuickPickDTO"
                                },
                                "example": {
                                    "requestId": "string",
                                    "generatorId": "string",
                                    "generatorVersion": "string",
                                    "timeStamp": 0,
                                    "boardSpecs": [
                                        {
                                            "numberOfBoards": 0,
                                            "numberOfSelections": 0,
                                            "rangeMin": 0,
                                            "rangeMax": 0,
                                            "withReplacement": true,
                                            "rangeExclusions": [
                                                0
                                            ],
                                            "frequency": [
                                                0
                                            ],
                                            "probabilityWeight": [
                                                0
                                            ],
                                            "sortOrder": "ASCENDING",
                                            "boards": [
                                                [
                                                    0
                                                ]
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "User not authenticated"
                    },
                    "500": {
                        "description": "System exception"
                    },
                    "503": {
                        "description": "System not available. Retry later."
                    }
                }
            }
        },
        "/instant-games/games": {
            "get": {
                "summary": "getInstantGames",
                "description": "Returns a list of game summaries.",
                "operationId": "getInstantGames",
                "parameters": [
                    {
                        "name": "query-type",
                        "in": "query",
                        "description": "type of query to execute.  Valid values are BY_GAME_ID_RANGE, BY_LAUNCH_DATE_RANGE, \n BY_START_DISTRIBUTION_DATE_RANGE, BY_END_DISTRIBUTION_DATE_RANGE, BY_DISABLED_DATE_RANGE,\n BY_PRICE_POINT_RANGE, and BY_REMAINING_PAYOUTS.  If the queryType parameter is not provided, then\n the game summary for all available games will be returned.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "game-id-from",
                        "in": "query",
                        "description": "Format - int32. start game id for the BY_GAME_ID_RANGE search.  If the gameIdFrom parameter is \n not provided for the BY_GAME_ID_RANGE search, then the lowest game id available will be used.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "game-id-to",
                        "in": "query",
                        "description": "Format - int32. end game id for the BY_GAME_ID_RANGE search.  If the gameIdTo parameter is \n not provided for the BY_GAME_ID_RANGE search, then the highest game id available will be used.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "date-from",
                        "in": "query",
                        "description": "Format - int64. start date for the BY_LAUNCH_DATE_RANGE, BY_START_DISTRIBUTION_DATE_RANGE, \n BY_END_DISTRIBUTION_DATE_RANGE, or BY_DISABLED_DATE_RANGE search.  If the dateFrom parameter is \n not provided for the date search, then the lowest date available will be used.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "date-to",
                        "in": "query",
                        "description": "Format - int64. end date for the BY_LAUNCH_DATE_RANGE, BY_START_DISTRIBUTION_DATE_RANGE, \n BY_END_DISTRIBUTION_DATE_RANGE, or BY_DISABLED_DATE_RANGE search.  If the dateTo parameter is \n not provided for the date search, then the highest date available will be used.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "amount-from",
                        "in": "query",
                        "description": "Format - int64. start amount for the BY_PRICE_POINT_RANGE or BY_REMAINING_PAYOUTS search.\n If the amountFrom parameter is not provided for the amount search, then the lowest amount available\n will be used.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "amount-to",
                        "in": "query",
                        "description": "Format - int64. end amount for the BY_PRICE_POINT_RANGE or BY_REMAINING_PAYOUTS search. If the \n amountTo parameter is not provided for the amount search, then the highest amount available\n will be used.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "description": "Format - int32. number of results to be returned",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "the summary lists",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GamePageDTO"
                                },
                                "example": {
                                    "nextPageUrl": "string",
                                    "previousPageUrl": "string",
                                    "pageUrls": {},
                                    "nextItems": 0,
                                    "previousItems": 0,
                                    "games": [
                                        {
                                            "gameId": "string",
                                            "gameName": "string",
                                            "validationStatus": "NOT_ACTIVE",
                                            "ticketPrice": 0,
                                            "launchDate": 0,
                                            "startDistributionDate": 0,
                                            "endDistributionDate": 0,
                                            "disableDate": 0,
                                            "preCallDate": 0,
                                            "numberOfTicketsInPack": 0,
                                            "totalTicket": 0,
                                            "overallOdds": "string",
                                            "featured": true,
                                            "prizeTiers": [
                                                {
                                                    "tierNumber": 0,
                                                    "prizeAmount": 0,
                                                    "winningTickets": 0,
                                                    "paidTickets": 0,
                                                    "prizeDescription": "string"
                                                }
                                            ],
                                            "lastUpdatedTime": 0
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Syntax error"
                    },
                    "500": {
                        "description": "System exception"
                    },
                    "503": {
                        "description": "Service Unavailable"
                    }
                }
            }
        },
        "/draw-games/generator/games": {
            "post": {
                "summary": "Generate random games",
                "description": "Generates set of draw game templates that can be used to define games.",
                "operationId": "generateGames",
                "requestBody": {
                    "description": "Generation request",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GamesGenerationRequestDTO"
                            },
                            "example": {
                                "price": 1000,
                                "maxNumberOfWagers": 10
                            }
                        },
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/GamesGenerationRequestDTO"
                            },
                            "example": "<GamesGenerationRequestDTO> <price>1000</price> <maxNumberOfWagers>10</maxNumberOfWagers> </GamesGenerationRequestDTO>"
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successfully generated games",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GeneratedGamesDTO"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/GeneratedGamesDTO"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Business exception",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    },
                    "503": {
                        "description": "Server unavailable",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    }
                }
            }
        },
        "/draw-games/winners": {
            "get": {
                "summary": "Return the list of winners stored in the system. The list could be filtered using the criteria provided as query parameters. By default the list is ordered by draw date in descending order (newest first)",
                "description": "Return the list of winners stored in the system. The list could be filtered using the criteria provided as query parameters. By default the list is ordered by draw date in descending order (newest first)",
                "operationId": "getWinners",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Format - int32. Page number to be returned, starting from 1",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "page-size",
                        "in": "query",
                        "description": "Format - int32. Amount of records to be returned. Defines offset if 'page' greater than 1",
                        "schema": {
                            "type": "integer",
                            "default": 50
                        }
                    },
                    {
                        "name": "sort-by",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "default": "draw-date"
                        }
                    },
                    {
                        "name": "sort-ascending",
                        "in": "query",
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    {
                        "name": "minimal-win-amount",
                        "in": "query",
                        "description": "Format - int64. Filtering the winnings to include only the ones that are greater than this amount (in cents)",
                        "schema": {
                            "type": "integer",
                            "default": 100
                        },
                        "example": 100
                    },
                    {
                        "name": "game-names",
                        "in": "query",
                        "description": "Filtering the winnings to include only listed games (comma separated)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "win-tier",
                        "in": "query",
                        "description": "Filtering the winnings to include only given tier (low, high, mid)",
                        "schema": {
                            "enum": [
                                "HIGH_TIER",
                                "LOW_TIER",
                                "MID_TIER"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "name": "win-type",
                        "in": "query",
                        "description": "Filtering the winnings to include only given winning type (e.g. cash)",
                        "schema": {
                            "enum": [
                                "CASH",
                                "FREEPLAY",
                                "MERCHANDISE"
                            ],
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Winning transactions list",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DrawGamesWinnersPageDTO"
                                },
                                "example": {
                                    "totalCount": 0,
                                    "pageSize": 0,
                                    "pageNumber": 0,
                                    "winners": [
                                        {
                                            "gameName": "Lotto",
                                            "drawInfo": {
                                                "drawId": 25,
                                                "drawDate": 1599575602000
                                            },
                                            "winInfo": {
                                                "winType": "CASH",
                                                "winTier": "LOW_TIER",
                                                "winAmount": 20000,
                                                "winAmountCurrency": "USD"
                                            },
                                            "wagerPurchaseChannel": "INTERACTIVE",
                                            "playerInformation": "Zaphod B.",
                                            "purchaseLocation": "ATLANTA"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server not available. Retry later",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/draw-games/check-winning-raffles": {
            "post": {
                "summary": "Allows to check whether given raffle codes have won",
                "description": "Allows to check whether given raffle codes have won",
                "operationId": "checkWinningRaffle",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CheckWinningRaffleRequestDTO"
                            },
                            "example": {
                                "exactRaffleCode": "BBBB00026",
                                "externalCode": "BBBB",
                                "startNumber": 26,
                                "lastNumber": 41,
                                "drawId": 176,
                                "gameName": "Euro Millions",
                                "maxDaysFromTodayOffset": 10
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "List of winning raffle codes is returned",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/WinningRaffleDTO"
                                    }
                                },
                                "example": [
                                    {
                                        "code": "BBBB00026",
                                        "divisionLevel": 2,
                                        "shares": 2,
                                        "prize": 20000,
                                        "drawNumber": "11",
                                        "drawDate": 1599575602000
                                    }
                                ]
                            }
                        }
                    },
                    "400": {
                        "description": "Business exception",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server unavailable",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/draw-games/{language}/{game-name}/{draw-id}/generate-pdf": {
            "get": {
                "summary": "Generates pdf with winning Raffle codes for pointed game, draw and language",
                "description": "Generates pdf with winning Raffle codes for pointed game, draw and language",
                "operationId": "getPdfWithWinningRaffles",
                "parameters": [
                    {
                        "name": "language",
                        "in": "path",
                        "description": "The language of the PDF content",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": "EN"
                    },
                    {
                        "name": "game-name",
                        "in": "path",
                        "description": "Necessary gameName for which system should search of winning raffles",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": "Lotto"
                    },
                    {
                        "name": "draw-id",
                        "in": "path",
                        "description": "Necessary drawId for which system should search of winning raffles",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": 100
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Attached document in PDF format",
                        "content": {
                            "application/pdf": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "length": {
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "location": {
                                            "type": "string",
                                            "format": "uri"
                                        },
                                        "language": {
                                            "type": "object",
                                            "properties": {
                                                "language": {
                                                    "type": "string"
                                                },
                                                "displayName": {
                                                    "type": "string"
                                                },
                                                "script": {
                                                    "type": "string"
                                                },
                                                "country": {
                                                    "type": "string"
                                                },
                                                "variant": {
                                                    "type": "string"
                                                },
                                                "extensionKeys": {
                                                    "uniqueItems": true,
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string"
                                                    }
                                                },
                                                "unicodeLocaleAttributes": {
                                                    "uniqueItems": true,
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string"
                                                    }
                                                },
                                                "unicodeLocaleKeys": {
                                                    "uniqueItems": true,
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string"
                                                    }
                                                },
                                                "iso3Language": {
                                                    "type": "string"
                                                },
                                                "iso3Country": {
                                                    "type": "string"
                                                },
                                                "displayLanguage": {
                                                    "type": "string"
                                                },
                                                "displayScript": {
                                                    "type": "string"
                                                },
                                                "displayCountry": {
                                                    "type": "string"
                                                },
                                                "displayVariant": {
                                                    "type": "string"
                                                }
                                            }
                                        },
                                        "lastModified": {
                                            "type": "string",
                                            "format": "date-time"
                                        },
                                        "date": {
                                            "type": "string",
                                            "format": "date-time"
                                        },
                                        "headers": {
                                            "type": "object",
                                            "properties": {
                                                "empty": {
                                                    "type": "boolean"
                                                }
                                            },
                                            "additionalProperties": {
                                                "type": "array",
                                                "items": {
                                                    "type": "object"
                                                }
                                            }
                                        },
                                        "metadata": {
                                            "type": "object",
                                            "properties": {
                                                "empty": {
                                                    "type": "boolean"
                                                }
                                            },
                                            "additionalProperties": {
                                                "type": "array",
                                                "items": {
                                                    "type": "object"
                                                }
                                            }
                                        },
                                        "entity": {
                                            "type": "object"
                                        },
                                        "status": {
                                            "type": "integer",
                                            "format": "int32"
                                        },
                                        "links": {
                                            "uniqueItems": true,
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "type": {
                                                        "type": "string"
                                                    },
                                                    "params": {
                                                        "type": "object",
                                                        "additionalProperties": {
                                                            "type": "string"
                                                        }
                                                    },
                                                    "uri": {
                                                        "type": "string",
                                                        "format": "uri"
                                                    },
                                                    "title": {
                                                        "type": "string"
                                                    },
                                                    "uriBuilder": {
                                                        "type": "object"
                                                    },
                                                    "rel": {
                                                        "type": "string"
                                                    },
                                                    "rels": {
                                                        "type": "array",
                                                        "items": {
                                                            "type": "string"
                                                        }
                                                    }
                                                }
                                            }
                                        },
                                        "statusInfo": {
                                            "type": "object",
                                            "properties": {
                                                "reasonPhrase": {
                                                    "type": "string"
                                                },
                                                "family": {
                                                    "enum": [
                                                        "INFORMATIONAL",
                                                        "SUCCESSFUL",
                                                        "REDIRECTION",
                                                        "CLIENT_ERROR",
                                                        "SERVER_ERROR",
                                                        "OTHER"
                                                    ],
                                                    "type": "string"
                                                },
                                                "statusCode": {
                                                    "type": "integer",
                                                    "format": "int32"
                                                }
                                            }
                                        },
                                        "mediaType": {
                                            "type": "object",
                                            "properties": {
                                                "type": {
                                                    "type": "string"
                                                },
                                                "subtype": {
                                                    "type": "string"
                                                },
                                                "parameters": {
                                                    "type": "object",
                                                    "additionalProperties": {
                                                        "type": "string"
                                                    }
                                                },
                                                "wildcardType": {
                                                    "type": "boolean"
                                                },
                                                "wildcardSubtype": {
                                                    "type": "boolean"
                                                }
                                            }
                                        },
                                        "allowedMethods": {
                                            "uniqueItems": true,
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            }
                                        },
                                        "stringHeaders": {
                                            "type": "object",
                                            "properties": {
                                                "empty": {
                                                    "type": "boolean"
                                                }
                                            },
                                            "additionalProperties": {
                                                "type": "array",
                                                "items": {
                                                    "type": "string"
                                                }
                                            }
                                        },
                                        "cookies": {
                                            "type": "object",
                                            "additionalProperties": {
                                                "type": "object",
                                                "properties": {
                                                    "name": {
                                                        "type": "string"
                                                    },
                                                    "value": {
                                                        "type": "string"
                                                    },
                                                    "version": {
                                                        "type": "integer",
                                                        "format": "int32"
                                                    },
                                                    "path": {
                                                        "type": "string"
                                                    },
                                                    "domain": {
                                                        "type": "string"
                                                    },
                                                    "comment": {
                                                        "type": "string"
                                                    },
                                                    "maxAge": {
                                                        "type": "integer",
                                                        "format": "int32"
                                                    },
                                                    "expiry": {
                                                        "type": "string",
                                                        "format": "date-time"
                                                    },
                                                    "secure": {
                                                        "type": "boolean"
                                                    },
                                                    "httpOnly": {
                                                        "type": "boolean"
                                                    }
                                                }
                                            }
                                        },
                                        "entityTag": {
                                            "type": "object",
                                            "properties": {
                                                "value": {
                                                    "type": "string"
                                                },
                                                "weak": {
                                                    "type": "boolean"
                                                }
                                            }
                                        }
                                    }
                                },
                                "examples": {
                                    "default": {
                                        "value": null
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Business exception",
                        "content": {
                            "application/pdf": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "examples": {
                                    "default": {
                                        "value": null
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/pdf": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "examples": {
                                    "default": {
                                        "value": null
                                    }
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server unavailable",
                        "content": {
                            "application/pdf": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "examples": {
                                    "default": {
                                        "value": null
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/gameadmin/clients": {
            "get": {
                "summary": "Fetch clients",
                "description": "Fetch all available clients",
                "operationId": "getClients",
                "responses": {
                    "200": {
                        "description": "Clients are returned",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ClientServerResponseDTO"
                                },
                                "example": {
                                    "status": true,
                                    "responseCode": "0000",
                                    "messages": [
                                        {
                                            "text": "string",
                                            "severity": "success"
                                        }
                                    ],
                                    "data": [
                                        {
                                            "id": 10,
                                            "name": "Portal"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Business exception",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorServerResponseDTO"
                                },
                                "example": {
                                    "status": false,
                                    "responseCode": "1003",
                                    "messages": [
                                        {
                                            "text": "No game found.",
                                            "severity": "warning"
                                        }
                                    ],
                                    "data": null
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorServerResponseDTO"
                                },
                                "example": {
                                    "status": false,
                                    "responseCode": "1003",
                                    "messages": [
                                        {
                                            "text": "string",
                                            "severity": "success"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server unavailable",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorServerResponseDTO"
                                },
                                "example": {
                                    "status": false,
                                    "responseCode": "1003",
                                    "messages": [
                                        {
                                            "text": "string",
                                            "severity": "success"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/gameadmin/clients/{client}/games": {
            "get": {
                "summary": "Fetch games for client",
                "description": "Fetch all games associated to a client",
                "operationId": "getClientGames",
                "parameters": [
                    {
                        "name": "client",
                        "in": "path",
                        "description": "Id of requested client",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "sortFields",
                        "in": "query",
                        "schema": {
                            "type": "array"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Format - int32.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Format - int32.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "query",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "returnedAttributes",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Games are returned",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GameServerResponseDTO"
                                },
                                "example": {
                                    "status": true,
                                    "responseCode": "0000",
                                    "messages": [
                                        {
                                            "text": "string",
                                            "severity": "success"
                                        }
                                    ],
                                    "data": [
                                        {
                                            "operators": [
                                                {
                                                    "brandId": 25,
                                                    "partnerId": 1
                                                }
                                            ],
                                            "gameCode": "INS-tbe",
                                            "id": 10,
                                            "name": "Blackjack",
                                            "description": "A blackjack game",
                                            "provider": {
                                                "name": "10"
                                            },
                                            "status": "enabled",
                                            "category": {
                                                "id": 10,
                                                "name": "DRAW_GAME_CODE"
                                            },
                                            "platform": {
                                                "id": 10,
                                                "code": 62,
                                                "name": "IGT_CASINO",
                                                "description": "IGT_CASINO"
                                            },
                                            "costToCover": 50,
                                            "iconUrl": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Business exception",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorServerResponseDTO"
                                },
                                "example": {
                                    "status": false,
                                    "responseCode": "1003",
                                    "messages": [
                                        {
                                            "text": "string",
                                            "severity": "success"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorServerResponseDTO"
                                },
                                "example": {
                                    "status": false,
                                    "responseCode": "1003",
                                    "messages": [
                                        {
                                            "text": "string",
                                            "severity": "success"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server unavailable",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorServerResponseDTO"
                                },
                                "example": {
                                    "status": false,
                                    "responseCode": "1003",
                                    "messages": [
                                        {
                                            "text": "string",
                                            "severity": "success"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/gameadmin/groups/{group}/games": {
            "get": {
                "summary": "Fetch games for group",
                "description": "Fetch all games associated to a group",
                "operationId": "getGroupGames",
                "parameters": [
                    {
                        "name": "group",
                        "in": "path",
                        "description": "Id of requested group",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "sortFields",
                        "in": "query",
                        "schema": {
                            "type": "array"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Format - int32.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Format - int32.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "query",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "returnedAttributes",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Games are returned",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GameServerResponseDTO"
                                },
                                "example": {
                                    "status": true,
                                    "responseCode": "0000",
                                    "messages": [
                                        {
                                            "text": "string",
                                            "severity": "success"
                                        }
                                    ],
                                    "data": [
                                        {
                                            "operators": [
                                                {
                                                    "brandId": 25,
                                                    "partnerId": 1
                                                }
                                            ],
                                            "gameCode": "INS-tbe",
                                            "id": 10,
                                            "name": "Blackjack",
                                            "description": "A blackjack game",
                                            "provider": {
                                                "name": "10"
                                            },
                                            "status": "enabled",
                                            "category": {
                                                "id": 10,
                                                "name": "DRAW_GAME_CODE"
                                            },
                                            "platform": {
                                                "id": 10,
                                                "code": 62,
                                                "name": "IGT_CASINO",
                                                "description": "IGT_CASINO"
                                            },
                                            "costToCover": 50,
                                            "iconUrl": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Business exception",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorServerResponseDTO"
                                },
                                "example": {
                                    "status": false,
                                    "responseCode": "1003",
                                    "messages": [
                                        {
                                            "text": "string",
                                            "severity": "success"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorServerResponseDTO"
                                },
                                "example": {
                                    "status": false,
                                    "responseCode": "1003",
                                    "messages": [
                                        {
                                            "text": "string",
                                            "severity": "success"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server unavailable",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorServerResponseDTO"
                                },
                                "example": {
                                    "status": false,
                                    "responseCode": "1003",
                                    "messages": [
                                        {
                                            "text": "string",
                                            "severity": "success"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/gameadmin/groups": {
            "get": {
                "summary": "Fetch groups",
                "description": "Fetch all available groups",
                "operationId": "getGroups",
                "responses": {
                    "200": {
                        "description": "Groups are returned",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GroupServerResponseDTO"
                                },
                                "example": {
                                    "status": true,
                                    "responseCode": "0000",
                                    "messages": [
                                        {
                                            "text": "string",
                                            "severity": "success"
                                        }
                                    ],
                                    "data": [
                                        {
                                            "id": 10,
                                            "name": "SLOTS",
                                            "description": "Group containing SLOTS games"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Business exception",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorServerResponseDTO"
                                },
                                "example": {
                                    "status": false,
                                    "responseCode": "1003",
                                    "messages": [
                                        {
                                            "text": "string",
                                            "severity": "success"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorServerResponseDTO"
                                },
                                "example": {
                                    "status": false,
                                    "responseCode": "1003",
                                    "messages": [
                                        {
                                            "text": "string",
                                            "severity": "success"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server unavailable",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorServerResponseDTO"
                                },
                                "example": {
                                    "status": false,
                                    "responseCode": "1003",
                                    "messages": [
                                        {
                                            "text": "string",
                                            "severity": "success"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/providers/launch/{type}/{gameId}": {
            "get": {
                "summary": "Retrieve anonymous game launch url",
                "description": "Retrieve anonymous game launch url for a game",
                "operationId": "getAnonymousLaunch",
                "parameters": [
                    {
                        "name": "gameId",
                        "in": "path",
                        "description": "Format - int64. GameId to get anonymous launch url for",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "type",
                        "in": "path",
                        "description": "Game launch type",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Anonymous launch url is returned",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                },
                                "example": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Business exception",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server unavailable",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/players/self/providers/game-replay/{gameId}/{roundId}": {
            "get": {
                "summary": "Get game replay for a game",
                "description": "Get game replay content for a specific game",
                "operationId": "getGameReplay",
                "parameters": [
                    {
                        "name": "gameId",
                        "in": "path",
                        "description": "Format - int64. GameId to get game replay for",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "roundId",
                        "in": "path",
                        "description": "Format - int64. roundId to get game replay for",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Game replay content is returned",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GameReplayDTO"
                                },
                                "example": {
                                    "content": "string",
                                    "type": "url"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Business exception",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server unavailable",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/players/self/providers/launch/{type}/{gameId}": {
            "get": {
                "summary": "Retrieve game launch url",
                "description": "Retrieve game launch url for a game",
                "operationId": "getGameLaunch",
                "parameters": [
                    {
                        "name": "gameId",
                        "in": "path",
                        "description": "Format - int64. GameId to get launch url for",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "type",
                        "in": "path",
                        "description": "Game launch type",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Game launch url is returned",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                },
                                "example": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Business exception",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server unavailable",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/players/self/providers/progressive-jackpot/{gameId}": {
            "get": {
                "summary": "Retrieve progressive jackpot url",
                "description": "Retrieve progressive jackpot url for a game",
                "operationId": "getProgressiveJackpot",
                "parameters": [
                    {
                        "name": "gameId",
                        "in": "path",
                        "description": "Format - int64. GameId to get progressive jackpot url for",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "progressive jackpot url is returned",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                },
                                "example": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Business exception",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server unavailable",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/gameadmin/unfinished-games": {
            "get": {
                "summary": "Retrieve Unfinished Games",
                "description": "Retrieve Unfinished Games list related to an authenticated player",
                "operationId": "getUnfinishedGames",
                "parameters": [
                    {
                        "name": "sortFields",
                        "in": "query",
                        "schema": {
                            "type": "array"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Format - int32.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Format - int32.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "query",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "returnedAttributes",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Unfinished Games are returned",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GameServerResponseDTO"
                                },
                                "example": {
                                    "status": true,
                                    "responseCode": "0000",
                                    "messages": [
                                        {
                                            "text": "string",
                                            "severity": "success"
                                        }
                                    ],
                                    "data": [
                                        {
                                            "operators": [
                                                {
                                                    "brandId": 25,
                                                    "partnerId": 1
                                                }
                                            ],
                                            "gameCode": "INS-tbe",
                                            "id": 10,
                                            "name": "Blackjack",
                                            "description": "A blackjack game",
                                            "provider": {
                                                "name": "10"
                                            },
                                            "status": "enabled",
                                            "category": {
                                                "id": 10,
                                                "name": "DRAW_GAME_CODE"
                                            },
                                            "platform": {
                                                "id": 10,
                                                "code": 62,
                                                "name": "IGT_CASINO",
                                                "description": "IGT_CASINO"
                                            },
                                            "costToCover": 50,
                                            "iconUrl": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Business exception",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorServerResponseDTO"
                                },
                                "example": {
                                    "status": false,
                                    "responseCode": "1003",
                                    "messages": [
                                        {
                                            "text": "string",
                                            "severity": "success"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorServerResponseDTO"
                                },
                                "example": {
                                    "status": false,
                                    "responseCode": "1003",
                                    "messages": [
                                        {
                                            "text": "string",
                                            "severity": "success"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server unavailable",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorServerResponseDTO"
                                },
                                "example": {
                                    "status": false,
                                    "responseCode": "1003",
                                    "messages": [
                                        {
                                            "text": "string",
                                            "severity": "success"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/players/self/payment-claims/{paymentClaimId}/claim": {
            "post": {
                "summary": "claimPrize",
                "description": "Starts the claiming process for a specific on payment",
                "operationId": "claimPrize",
                "parameters": [
                    {
                        "name": "paymentClaimId",
                        "in": "path",
                        "description": "Unique identifier for the claiming payment",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Starts the claiming process for a specific on claiming payment",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ClaimPaymentDTO"
                                },
                                "example": {
                                    "paymentClaimId": "string",
                                    "deductAmount": 0,
                                    "claimDate": 0,
                                    "winDate": 0,
                                    "paymentTransactionId": "string",
                                    "netAmount": 0,
                                    "grossAmount": 0,
                                    "taxAmount": 0,
                                    "currency": "string",
                                    "status": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Business exception",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Claim payment not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/players/self/payment-claims": {
            "get": {
                "summary": "Returns list of player's payment claims or empty list",
                "description": "Returns list of player's payment claims or empty list",
                "operationId": "paymentClaims",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Format - int32. Page number to be returned, starting from 1",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Format - int32. Number of items to be returned. Defines offset if 'page' greater than 1",
                        "schema": {
                            "type": "integer",
                            "default": 50
                        }
                    },
                    {
                        "name": "winDateFrom",
                        "in": "query",
                        "description": "Format - int64. Win date from, milliseconds from 01-01-1970. Result contains payments related to winnings with date greater or equal to the passed value",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "winDateTo",
                        "in": "query",
                        "description": "Format - int64. Win date to, milliseconds from 01-01-1970. Result contains payments to winnings with date lesser or equal to the passed value",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "claimDateFrom",
                        "in": "query",
                        "description": "Format - int64. Claim date from, milliseconds from 01-01-1970. Result contains payments which claim was requested on a date greater or equal to the passed value",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "claimDateTo",
                        "in": "query",
                        "description": "Format - int64. Claim date to, milliseconds from 01-01-1970. Result contains payments which claim was requested on a date lesser or equal to the passed value",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "sortBy",
                        "in": "query",
                        "description": "Sort field. Domain values [winDate, claimDate]. It could be one of the listed domain values. If you want ascending order add '+' prefix to the field. If you want descending order add '-' prefix to the field. Default ascending order.",
                        "schema": {
                            "type": "string",
                            "default": "+winDate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns list of player's claiming prizes or empty list",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ClaimPaymentDTO"
                                },
                                "example": {
                                    "paymentClaimId": "string",
                                    "deductAmount": 0,
                                    "claimDate": 0,
                                    "winDate": 0,
                                    "paymentTransactionId": "string",
                                    "netAmount": 0,
                                    "grossAmount": 0,
                                    "taxAmount": 0,
                                    "currency": "string",
                                    "status": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Business exception",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/players/self/payment-claims/{paymentClaimId}/history": {
            "get": {
                "summary": "paymentClaimsHistory",
                "description": "Provides the operation history about a specific payment claim",
                "operationId": "paymentClaimsHistory",
                "parameters": [
                    {
                        "name": "paymentClaimId",
                        "in": "path",
                        "description": "Unique identifier for the claiming payment",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Format - int32. Page number to be returned, starting from 1",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Format - int32. Number of items to be returned. Defines offset if 'page' greater than 1",
                        "schema": {
                            "type": "integer",
                            "default": 50
                        }
                    },
                    {
                        "name": "operationDateFrom",
                        "in": "query",
                        "description": "Format - int64. Operation date from, milliseconds from 01-01-1970. Result contains payments which operation was done on a date lesser or equal to the passed value",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "operationDateTo",
                        "in": "query",
                        "description": "Format - int64. Operation date to, milliseconds from 01-01-1970. Result contains payments which operation was done on a date lesser or equal to the passed value",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "sortBy",
                        "in": "query",
                        "description": "Sort field. Domain values [operationDate]. It could be one of the listed domain values. If you want ascending order add '+' prefix to the field. If you want descending order add '-' prefix to the field. Default ascending order.",
                        "schema": {
                            "type": "string",
                            "default": "+operationDate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Provides the operation history about a specific claiming payment",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ClaimPaymentHistoryPageDTO"
                                },
                                "example": {
                                    "totalItems": 0,
                                    "pageSize": 0,
                                    "page": 0,
                                    "items": [
                                        {
                                            "operationDate": 0,
                                            "operationType": "CREATION",
                                            "operationOwnerType": "PLAYER",
                                            "operationAmount": 0,
                                            "operationOwner": "string",
                                            "comment": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Business exception",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Claim payment not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/players/self/payment-claims/{paymentClaimId}": {
            "get": {
                "summary": "paymentClaimsDetail",
                "description": "Retrieve details about a single payment's claim",
                "operationId": "paymentClaimsDetail",
                "parameters": [
                    {
                        "name": "paymentClaimId",
                        "in": "path",
                        "description": "Unique identifier for the claim payment",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Provide the detail about a single payment's claim",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ClaimPaymentDTO"
                                },
                                "example": {
                                    "paymentClaimId": "string",
                                    "deductAmount": 0,
                                    "claimDate": 0,
                                    "winDate": 0,
                                    "paymentTransactionId": "string",
                                    "netAmount": 0,
                                    "grossAmount": 0,
                                    "taxAmount": 0,
                                    "currency": "string",
                                    "status": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Business exception",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Claim payment not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/players/self/game-rounds": {
            "get": {
                "summary": "gameRounds",
                "description": "Provides paginated list of rounds related to the player",
                "operationId": "gameRounds",
                "parameters": [
                    {
                        "name": "startDateFrom",
                        "in": "query",
                        "description": "Format - int64. Last wager date from, milliseconds from 01-01-1970. Result contains rounds containing wagers with execution date greater or equal to the passed value",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "startDateTo",
                        "in": "query",
                        "description": "Format - int64. Last wager date to, milliseconds from 01-01-1970. Result contains rounds containing wagers with execution date less or equal to the passed value",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Format - int32. Page number to be returned, starting from 1",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Format - int32. Number of items to be returned. Defines offset if 'page' greater than 1",
                        "schema": {
                            "type": "integer",
                            "default": 50
                        }
                    },
                    {
                        "name": "closeFrom",
                        "in": "query",
                        "description": "Format - int64. Close date from, milliseconds from 01-01-1970. Result contains rounds containing wagers with close date greater or equal to the passed value",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "closeTo",
                        "in": "query",
                        "description": "Format - int64. Close date to, milliseconds from 01-01-1970. Result contains rounds containing wagers with close date less or equal to the passed value",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "lastWagerFrom",
                        "in": "query",
                        "description": "Format - int64. Last wager date from, milliseconds from 01-01-1970. Result contains rounds containing wagers with execution date greater or equal to the passed value",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "lastWagerTo",
                        "in": "query",
                        "description": "Format - int64. Last wager date to, milliseconds from 01-01-1970. Result contains rounds containing wagers with execution date less or equal to the passed value",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "lastWinFrom",
                        "in": "query",
                        "description": "Format - int64. Last win date from, milliseconds from 01-01-1970. Result contains rounds containing winnings with execution date greater or equal to the passed value",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "lastWinTo",
                        "in": "query",
                        "description": "Format - int64. Last win date to, milliseconds from 01-01-1970. Result contains rounds containing winnings with execution date less or equal to the passed value",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "gameId",
                        "in": "query",
                        "description": "Format - int64. Unique identifier for the game. Result contains rounds having this gameId",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "gameCode",
                        "in": "query",
                        "description": "Game provider's game code identifier. Result contains rounds having this gameCode",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "gameName",
                        "in": "query",
                        "description": "Game provider's game name as reported into the game history result. Result contains rounds having this gameName",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "platformId",
                        "in": "query",
                        "description": "List of requested game platform ids",
                        "schema": {
                            "type": "array"
                        }
                    },
                    {
                        "name": "minWinningAmount",
                        "in": "query",
                        "description": "Format - int64. Minimum winning amount, Result contains rounds having winning amount greater or equal to the passed value",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "minClaimingPrize",
                        "in": "query",
                        "description": "Format - int64. Minimum claiming prize, Result contains rounds having claiming prize greater or equal to the passed value",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "roundClosed",
                        "in": "query",
                        "description": "Round closed flag, if true result contains only closed rounds, if false result contains only open rounds",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "sortBy",
                        "in": "query",
                        "description": "Sort field. Domain values [startDate, lastWagerDate, lastWinDate]. It could be one of the listed domain values. If you want ascending order add '+' prefix to the field. If you want descending order add '-' prefix to the field. Default ascending order.",
                        "schema": {
                            "type": "string",
                            "default": "+startDate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Provides paginated list of rounds related to the player",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RoundPageDTO"
                                },
                                "example": {
                                    "totalItems": 0,
                                    "pageSize": 0,
                                    "page": 0,
                                    "rounds": [
                                        {
                                            "roundId": "string",
                                            "startDate": 0,
                                            "purchaseAmount": 0,
                                            "purchaseLoyaltyPoint": 0,
                                            "winAmount": 0,
                                            "earnedLoyaltyPoint": 0,
                                            "refundedAmount": 0,
                                            "refundedLoyaltyPoint": 0,
                                            "claimingPrize": 0,
                                            "subscriptionId": "string",
                                            "currency": "string",
                                            "platformId": 0,
                                            "platformName": "string",
                                            "gameId": "string",
                                            "gameCode": "string",
                                            "gameName": "string",
                                            "gameSessionId": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Business exception",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/players/self/reality-check": {
            "get": {
                "summary": "realityCheck",
                "description": "Provides information about the total amount spent during the authenticated player session and the related duration",
                "operationId": "realityCheck",
                "responses": {
                    "200": {
                        "description": "Returns information about the total amount spent during the authenticated player session and the related duration",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RealityCheckDTO"
                                },
                                "example": {
                                    "totalSpentAmount": 0,
                                    "totalPaymentAmount": 0,
                                    "duration": 0
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Business exception",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/players/self/game-statistics": {
            "get": {
                "summary": "playerStatistics",
                "description": "Provides the statistics about the player game play related to the game platforms",
                "operationId": "playerStatistics",
                "parameters": [
                    {
                        "name": "platformId",
                        "in": "query",
                        "description": "List of requested game platform ids",
                        "schema": {
                            "type": "array"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns information about the total amount spent during the authenticated player session and the related duration",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/GameStatisticDTO"
                                    }
                                },
                                "example": [
                                    {
                                        "currency": "string",
                                        "lastPlayedDate": 0,
                                        "lastMonetaryPlayedDate": 0,
                                        "totalPlayedGames": 0,
                                        "totalAmountWon": 0,
                                        "totalEarnedLoyaltyPoint": 0,
                                        "totalBonusBagAmountWon": 0,
                                        "totalRealMoneyAmountWon": 0,
                                        "totalNetRealMoneyAmountWon": 0,
                                        "totalTournamentTicketAmountWon": 0,
                                        "totalAmountSpent": 0,
                                        "totalBonusBagAmountSpent": 0,
                                        "totalBonusCashAmountSpent": 0,
                                        "totalSpentLoyaltyPoint": 0,
                                        "totalTournamentTicketSpent": 0,
                                        "totalRealMoneyAmountSpent": 0,
                                        "grossGamingAmount": 0,
                                        "grossRevenueAmount": 0,
                                        "totalShadowBalance": 0,
                                        "platformId": 0,
                                        "platformName": "string",
                                        "platformDescription": "string"
                                    }
                                ]
                            }
                        }
                    },
                    "400": {
                        "description": "Business exception",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/players/self/game-sessions/{gameSessionId}": {
            "get": {
                "summary": "roundsDetails",
                "description": "Provides rounds detail about a single game session related to the player",
                "operationId": "roundsDetails",
                "parameters": [
                    {
                        "name": "gameSessionId",
                        "in": "path",
                        "description": "Game session identifier",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "platformId",
                        "in": "query",
                        "description": "Format - int64. Game Platform identifier",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Format - int32. Page number to be returned, starting from 1",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Format - int32. Number of items to be returned. Defines offset if 'page' greater than 1",
                        "schema": {
                            "type": "integer",
                            "default": 50
                        }
                    },
                    {
                        "name": "transactionType",
                        "in": "query",
                        "description": "Transaction type.Result provides game session which contains transaction of selected type",
                        "schema": {
                            "enum": [
                                "PURCHASE",
                                "WINNING",
                                "REFUND"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "name": "sortBy",
                        "in": "query",
                        "description": "Sort field. Domain values [startDate]. It could be one of the listed domain values. If you want ascending order add '+' prefix to the field. If you want descending order add '-' prefix to the field. Default ascending order.",
                        "schema": {
                            "type": "string",
                            "default": "-startDate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns the rounds detail about a single game session related to the player",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GameSessionRoundDetailPageDTO"
                                },
                                "example": {
                                    "totalItems": 0,
                                    "pageSize": 0,
                                    "page": 0,
                                    "rounds": [
                                        {
                                            "transactions": [
                                                {
                                                    "type": "PAYMENT",
                                                    "purchaseDetail": {
                                                        "amountType": "REAL_MONEY",
                                                        "externalTransactionId": "string",
                                                        "amount": 0,
                                                        "bonusAmount": 0,
                                                        "walletReserveId": "string",
                                                        "walletConfirmId": "string",
                                                        "reserveDate": 0,
                                                        "confirmDate": 0,
                                                        "purchaseStatus": "string"
                                                    },
                                                    "paymentDetail": {
                                                        "amountType": "REAL_MONEY",
                                                        "refund": true,
                                                        "externalTransactionId": "string",
                                                        "grossAmount": 0,
                                                        "jackpotAmount": 0,
                                                        "netAmount": 0,
                                                        "walletReserveId": "string",
                                                        "walletConfirmId": "string",
                                                        "reserveDate": 0,
                                                        "confirmDate": 0,
                                                        "paymentStatus": "string",
                                                        "taxAmount": 0,
                                                        "taxableAmount": 0,
                                                        "onHoldId": 0
                                                    },
                                                    "executionDate": 0
                                                }
                                            ],
                                            "roundId": "string",
                                            "startDate": 0,
                                            "purchaseAmount": 0,
                                            "purchaseLoyPoint": 0,
                                            "paymentGrossAmount": 0,
                                            "paymentNetAmount": 0,
                                            "refundedAmount": 0,
                                            "earnedLoyPoint": 0,
                                            "refundedLoyPoint": 0,
                                            "jackpotAmount": 0,
                                            "taxableAmount": 0,
                                            "taxAmount": 0,
                                            "status": "string"
                                        }
                                    ],
                                    "gameSessionDto": {
                                        "gameSessionId": "string",
                                        "platformId": 0,
                                        "platformName": "string",
                                        "gameId": "string",
                                        "gameName": "string",
                                        "totalPurchaseAmount": 0,
                                        "totalPurchaseLoyaltyPoint": 0,
                                        "totalWinningAmount": 0,
                                        "totalRefundAmount": 0,
                                        "totalEarnedLoyaltyPoint": 0,
                                        "gameSessionStartDate": 0,
                                        "gameSessionEndDate": 0,
                                        "currency": "string",
                                        "subscriptionId": "string",
                                        "lastWagerDate": 0,
                                        "lastWinningDate": 0,
                                        "totalClaimingPrize": 0,
                                        "gameCode": "string"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Business exception",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/players/self/game-sessions": {
            "get": {
                "summary": "Provides paginated list of game session related to the player",
                "description": "Provides paginated list of game session related to the player",
                "operationId": "gameSessions",
                "parameters": [
                    {
                        "name": "gameSessionStartFrom",
                        "in": "query",
                        "description": "Format - int64. Game session start date from, milliseconds from 01-01-1970. Result contains game session with start date greater or equal to the passed value",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "gameSessionStartTo",
                        "in": "query",
                        "description": "Format - int64. Game session start date to, milliseconds from 01-01-1970. Result contains game session with start date less or equal to the passed value",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Format - int32. Page number to be returned, starting from 1",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Format - int32. Number of items to be returned. Defines offset if 'page' greater than 1",
                        "schema": {
                            "type": "integer",
                            "default": 50
                        }
                    },
                    {
                        "name": "lastWagerFrom",
                        "in": "query",
                        "description": "Format - int64. Last wager date from, milliseconds from 01-01-1970. Result contains game session containing wagers with execution date greater or equal to the passed value",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "lastWagerTo",
                        "in": "query",
                        "description": "Format - int64. Last wager date to, milliseconds from 01-01-1970. Result contains game session containing wagers with execution date less or equal to the passed value",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "lastWinFrom",
                        "in": "query",
                        "description": "Format - int64. Last win date from, milliseconds from 01-01-1970. Result contains game session containing winnings with execution date greater or equal to the passed value",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "lastWinTo",
                        "in": "query",
                        "description": "Format - int64. Last win date to, milliseconds from 01-01-1970. Result contains game session containing winnings with execution date less or equal to the passed value",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "gameId",
                        "in": "query",
                        "description": "Format - int64. Unique identifier for the game. Result contains game session having this gameId",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "gameCode",
                        "in": "query",
                        "description": "Game provider's game code identifier. Result contains game session having this gameCode",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "gameName",
                        "in": "query",
                        "description": "Game provider's game name as reported into the game history result. Result contains game session having this gameName",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "transactionType",
                        "in": "query",
                        "description": "Transaction type.Result provides game session which contains transaction of selected type",
                        "schema": {
                            "enum": [
                                "PURCHASE",
                                "WINNING",
                                "REFUND"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "name": "platformId",
                        "in": "query",
                        "description": "List of requested game platform ids",
                        "schema": {
                            "type": "array"
                        }
                    },
                    {
                        "name": "sortBy",
                        "in": "query",
                        "description": "Sort field. Domain values [lastWager, lastWin, gameSessionStart]. It could be one of the listed domain values. If you want ascending order add '+' prefix to the field. If you want descending order add '-' prefix to the field. Default ascending order.",
                        "schema": {
                            "type": "string",
                            "default": "+lastWager"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns paginated list of game session related to the player or empty list",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GameSessionPageDTO"
                                },
                                "example": {
                                    "totalItems": 0,
                                    "pageSize": 0,
                                    "page": 0,
                                    "gameSessions": [
                                        {
                                            "gameSessionId": "string",
                                            "platformId": 0,
                                            "platformName": "string",
                                            "gameId": "string",
                                            "gameName": "string",
                                            "totalPurchaseAmount": 0,
                                            "totalPurchaseLoyaltyPoint": 0,
                                            "totalWinningAmount": 0,
                                            "totalRefundAmount": 0,
                                            "totalEarnedLoyaltyPoint": 0,
                                            "gameSessionStartDate": 0,
                                            "gameSessionEndDate": 0,
                                            "currency": "string",
                                            "subscriptionId": "string",
                                            "lastWagerDate": 0,
                                            "lastWinningDate": 0,
                                            "totalClaimingPrize": 0,
                                            "gameCode": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Business exception",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/players/self/game/transaction/{transactionId}": {
            "get": {
                "summary": "transactionRoundDetail",
                "description": "Provides detail about round and game session starting from external transaction identifier of financial transactions",
                "operationId": "transactionRoundDetail",
                "parameters": [
                    {
                        "name": "transactionId",
                        "in": "path",
                        "description": "The transaction identifier",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Provides detail about round and game session starting from external transaction identifier of financial transactions",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GameSessionRoundDetailDTO"
                                },
                                "example": {
                                    "roundDetail": {
                                        "transactions": [
                                            {
                                                "type": "PAYMENT",
                                                "purchaseDetail": {
                                                    "amountType": "REAL_MONEY",
                                                    "externalTransactionId": "string",
                                                    "amount": 0,
                                                    "bonusAmount": 0,
                                                    "walletReserveId": "string",
                                                    "walletConfirmId": "string",
                                                    "reserveDate": 0,
                                                    "confirmDate": 0,
                                                    "purchaseStatus": "string"
                                                },
                                                "paymentDetail": {
                                                    "amountType": "REAL_MONEY",
                                                    "refund": true,
                                                    "externalTransactionId": "string",
                                                    "grossAmount": 0,
                                                    "jackpotAmount": 0,
                                                    "netAmount": 0,
                                                    "walletReserveId": "string",
                                                    "walletConfirmId": "string",
                                                    "reserveDate": 0,
                                                    "confirmDate": 0,
                                                    "paymentStatus": "string",
                                                    "taxAmount": 0,
                                                    "taxableAmount": 0,
                                                    "onHoldId": 0
                                                },
                                                "executionDate": 0
                                            }
                                        ],
                                        "roundId": "string",
                                        "startDate": 0,
                                        "purchaseAmount": 0,
                                        "purchaseLoyPoint": 0,
                                        "paymentGrossAmount": 0,
                                        "paymentNetAmount": 0,
                                        "refundedAmount": 0,
                                        "earnedLoyPoint": 0,
                                        "refundedLoyPoint": 0,
                                        "jackpotAmount": 0,
                                        "taxableAmount": 0,
                                        "taxAmount": 0,
                                        "status": "string"
                                    },
                                    "gameSessionDto": {
                                        "gameSessionId": "string",
                                        "platformId": 0,
                                        "platformName": "string",
                                        "gameId": "string",
                                        "gameName": "string",
                                        "totalPurchaseAmount": 0,
                                        "totalPurchaseLoyaltyPoint": 0,
                                        "totalWinningAmount": 0,
                                        "totalRefundAmount": 0,
                                        "totalEarnedLoyaltyPoint": 0,
                                        "gameSessionStartDate": 0,
                                        "gameSessionEndDate": 0,
                                        "currency": "string",
                                        "subscriptionId": "string",
                                        "lastWagerDate": 0,
                                        "lastWinningDate": 0,
                                        "totalClaimingPrize": 0,
                                        "gameCode": "string"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Business exception",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/games/recent-winners": {
            "get": {
                "summary": "Return the list of the most recent winners stored in the system. The list could be filtered using the criteria provided as query parameter",
                "description": "Return the list of the most recent winners stored in the system. The list could be filtered using the criteria provided as query parameter",
                "operationId": "getRecentWinners",
                "parameters": [
                    {
                        "name": "pageNumber",
                        "in": "query",
                        "description": "Format - int32. Page number to be returned, starting from 1",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Format - int32. Amount of records to be returned. Defines offset if 'page' greater than 1",
                        "schema": {
                            "type": "integer",
                            "default": 50
                        }
                    },
                    {
                        "name": "minWinAmount",
                        "in": "query",
                        "description": "Format - int64. Filtering the winnings to include only the ones that are greater than this amount (in cents)",
                        "schema": {
                            "type": "integer",
                            "default": 100
                        },
                        "example": 100
                    },
                    {
                        "name": "gamePlatforms",
                        "in": "query",
                        "description": "Filtering the winnings to include only the ones of the specified gaming platforms",
                        "schema": {
                            "type": "array"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Recent winning transactions list",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RecentWinnersPageDTO"
                                },
                                "example": {
                                    "totalCount": 0,
                                    "pageSize": 0,
                                    "pageNumber": 0,
                                    "winners": [
                                        {
                                            "platformId": 0,
                                            "platformName": "string",
                                            "gameId": 0,
                                            "gameCode": "string",
                                            "gameName": "string",
                                            "winningAmount": 0,
                                            "winningDate": 0,
                                            "currency": "string",
                                            "nickName": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server not available. Retry later",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/players/self/account": {
            "get": {
                "summary": "Get player's account in default currency",
                "description": "Get player's account in default currency",
                "operationId": "getAccount",
                "responses": {
                    "200": {
                        "description": "User's account returned",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AccountDTO"
                                },
                                "example": {
                                    "balances": {
                                        "default": {
                                            "type": "wallet",
                                            "balance": 5404,
                                            "currency": "USD"
                                        },
                                        "bonusPocket": {
                                            "type": "bonusPocket",
                                            "balance": 404,
                                            "currency": "USD"
                                        },
                                        "gamingPocket": {
                                            "type": "gamingPocket",
                                            "balance": 5000,
                                            "currency": "USD"
                                        },
                                        "winningPocket": {
                                            "type": "winningPocket",
                                            "balance": 0,
                                            "currency": "USD"
                                        },
                                        "points": {
                                            "type": "points",
                                            "balance": 2870
                                        }
                                    },
                                    "type": "FINANCIAL"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Business exception",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    },
                    "503": {
                        "description": "Server unavailable",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    }
                }
            }
        },
        "/players/self/account/{currency}": {
            "get": {
                "summary": "Get player's account in given currency",
                "description": "Get player's account in given currency",
                "operationId": "getAccountForCurrency",
                "parameters": [
                    {
                        "name": "currency",
                        "in": "path",
                        "description": "Currency to represent player's balance",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": "USD"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User's account in chosen currency.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AccountDTO"
                                },
                                "example": {
                                    "id": "468",
                                    "status": "PRE_ACTIVE",
                                    "balances": {},
                                    "type": "FINANCIAL"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/AccountDTO"
                                },
                                "example": "<AccountDTO> <id>468</id> <status>PRE_ACTIVE</status> <balances /> <type>FINANCIAL</type> </AccountDTO>"
                            }
                        }
                    },
                    "400": {
                        "description": "Business exception",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    },
                    "503": {
                        "description": "Server unavailable",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    }
                }
            }
        },
        "/players/self/account/linked-transactions": {
            "get": {
                "summary": "Get financial transactions using global id",
                "description": "Get financial transactions using global id",
                "operationId": "getLinkedTransactions",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "description": "Global transaction id taken from game history",
                        "schema": {
                            "type": "string"
                        },
                        "example": "d16969b3-35ad-4881-adec-ec9a3efbbfea"
                    },
                    {
                        "name": "transactionDate",
                        "in": "query",
                        "description": "Format - int64. Start date for the search",
                        "schema": {
                            "type": "integer"
                        },
                        "example": 1566282099887
                    }
                ],
                "responses": {
                    "200": {
                        "description": "All linked transactions (paginated)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FinancialTransactionPageDTO"
                                },
                                "example": {
                                    "nextPageUrl": "string",
                                    "previousPageUrl": "string",
                                    "pageUrls": {},
                                    "nextItems": 0,
                                    "previousItems": 0,
                                    "transactions": [
                                        {
                                            "parentId": "60acdb89-cb01-4341-aa10-fe58c62ecb74",
                                            "externalId": "c749b490-5e82-4333-899c-84f0eebc8120",
                                            "amount": -600,
                                            "type": "Interactive draw games debit confirmation",
                                            "currency": "USD",
                                            "transactionDate": 1582589462505,
                                            "comment": "Wager purchase, transaction id: 78acfe0e-8d9f-4623-923f-a93a258b103f"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/FinancialTransactionPageDTO"
                                },
                                "example": "<FinancialTransactionPageDTO>\r\n  <nextPageUrl>string</nextPageUrl>\r\n  <previousPageUrl>string</previousPageUrl>\r\n  <pageUrls />\r\n  <nextItems>0</nextItems>\r\n  <previousItems>0</previousItems>\r\n  <transactions>\r\n    <parentId>60acdb89-cb01-4341-aa10-fe58c62ecb74</parentId>\r\n    <externalId>c749b490-5e82-4333-899c-84f0eebc8120</externalId>\r\n    <amount>-600</amount>\r\n    <type>Interactive draw games debit confirmation</type>\r\n    <currency>USD</currency>\r\n    <transactionDate>1582589462505</transactionDate>\r\n    <comment>Wager purchase, transaction id: 78acfe0e-8d9f-4623-923f-a93a258b103f</comment>\r\n  </transactions>\r\n</FinancialTransactionPageDTO>"
                            }
                        }
                    },
                    "400": {
                        "description": "Business exception",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    },
                    "503": {
                        "description": "Server unavailable",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    }
                }
            }
        },
        "/players/self/account/transactions": {
            "get": {
                "summary": "Get financial transactions",
                "description": "Get financial transactions",
                "operationId": "getTransactions",
                "parameters": [
                    {
                        "name": "date-from",
                        "in": "query",
                        "description": "Format - int64. Start date for the search",
                        "schema": {
                            "type": "integer"
                        },
                        "example": 1566282091887
                    },
                    {
                        "name": "date-to",
                        "in": "query",
                        "description": "Format - int64. End date for the search",
                        "schema": {
                            "type": "integer"
                        },
                        "example": 1566282099887
                    },
                    {
                        "name": "products",
                        "in": "query",
                        "description": "Filter by the products indicated (all otherwise)",
                        "schema": {
                            "type": "string"
                        },
                        "example": 192030
                    },
                    {
                        "name": "types",
                        "in": "query",
                        "description": "Filter by the transaction types indicated (all otherwise)",
                        "schema": {
                            "type": "string"
                        },
                        "example": "loyalty, wallet"
                    },
                    {
                        "name": "originator",
                        "in": "query",
                        "description": "Engine that created the transaction",
                        "schema": {
                            "enum": [
                                "LOYALTY",
                                "EWALLET"
                            ],
                            "type": "string"
                        },
                        "example": "LOYALTY"
                    },
                    {
                        "name": "sort-by",
                        "in": "query",
                        "description": "Sort criteria",
                        "schema": {
                            "type": "string"
                        },
                        "example": "TransactionId"
                    },
                    {
                        "name": "sort-ascending",
                        "in": "query",
                        "description": "Sorting ascending if set to true",
                        "schema": {
                            "type": "boolean"
                        },
                        "example": "True"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Format - int32. Number of page to be return starting from 0",
                        "schema": {
                            "type": "integer"
                        },
                        "example": 1
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "description": "Format - int32. Number of results to be returned",
                        "schema": {
                            "type": "integer"
                        },
                        "example": 10
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User's account transactions (paginated)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FinancialTransactionPageDTO"
                                },
                                "example": {
                                    "nextPageUrl": "string",
                                    "previousPageUrl": "string",
                                    "pageUrls": {},
                                    "nextItems": 0,
                                    "previousItems": 0,
                                    "transactions": [
                                        {
                                            "parentId": "60acdb89-cb01-4341-aa10-fe58c62ecb74",
                                            "externalId": "c749b490-5e82-4333-899c-84f0eebc8120",
                                            "amount": -600,
                                            "type": "Interactive draw games debit confirmation",
                                            "currency": "USD",
                                            "transactionDate": 1582589462505,
                                            "comment": "Wager purchase, transaction id: 78acfe0e-8d9f-4623-923f-a93a258b103f"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/FinancialTransactionPageDTO"
                                },
                                "example": "<FinancialTransactionPageDTO>\r\n  <nextPageUrl>string</nextPageUrl>\r\n  <previousPageUrl>string</previousPageUrl>\r\n  <pageUrls />\r\n  <nextItems>0</nextItems>\r\n  <previousItems>0</previousItems>\r\n  <transactions>\r\n    <parentId>60acdb89-cb01-4341-aa10-fe58c62ecb74</parentId>\r\n    <externalId>c749b490-5e82-4333-899c-84f0eebc8120</externalId>\r\n    <amount>-600</amount>\r\n    <type>Interactive draw games debit confirmation</type>\r\n    <currency>USD</currency>\r\n    <transactionDate>1582589462505</transactionDate>\r\n    <comment>Wager purchase, transaction id: 78acfe0e-8d9f-4623-923f-a93a258b103f</comment>\r\n  </transactions>\r\n</FinancialTransactionPageDTO>"
                            }
                        }
                    },
                    "400": {
                        "description": "Business exception",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    },
                    "503": {
                        "description": "Server unavailable",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    }
                }
            }
        },
        "/players/self/bank-account": {
            "get": {
                "summary": "Retrieves player's bank accounts",
                "description": "Retrieves player's bank accounts",
                "operationId": "getBankAccounts",
                "responses": {
                    "200": {
                        "description": "List of player's bank accounts is returned",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/BankAccountDTO"
                                    }
                                },
                                "example": [
                                    {
                                        "accountNumber": "BE47179396981187",
                                        "bankSwiftCode": "COBABEBX",
                                        "defaultForDeposit": true,
                                        "defaultForWithdrawal": true,
                                        "dateCreated": 1583579856511,
                                        "methodId": "IBAN",
                                        "currencyId": "EUR"
                                    }
                                ]
                            }
                        }
                    },
                    "400": {
                        "description": "Business exception",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server unavailable",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Creates player's bank account",
                "description": "Creates player's bank account",
                "operationId": "addBankAccount",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BankAccountDTO"
                            },
                            "example": {
                                "accountNumber": "BE47179396981187",
                                "bankSwiftCode": "COBABEBX",
                                "defaultForDeposit": true,
                                "defaultForWithdrawal": true,
                                "dateCreated": 1583579856511,
                                "methodId": "IBAN",
                                "currencyId": "EUR"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Bank account is successfully created"
                    },
                    "400": {
                        "description": "Business exception",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server unavailable",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/players/self/bank-account-transaction/{transaction-id}": {
            "get": {
                "summary": "Retrieves status of transaction on player's bank account",
                "description": "Retrieves status of transaction on player's bank account",
                "operationId": "getBankAccountTransactionState",
                "parameters": [
                    {
                        "name": "transaction-id",
                        "in": "path",
                        "description": "Id of transaction on bank account",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Status of transaction on player's bank account",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BankAccountTransactionDTO"
                                },
                                "example": {
                                    "id": "BE47179396981187",
                                    "state": "EXECUTED_SUCCESSFULLY"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Business exception",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server unavailable",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/players/self/bank-account/structured-reference": {
            "get": {
                "summary": "Retrieves structured creditor reference for identifying payments from particular player by bank.",
                "description": "Retrieves structured creditor reference for identifying payments from particular player by bank.",
                "operationId": "getBankAccountStructuredReference",
                "responses": {
                    "200": {
                        "description": "Structured reference on player's bank account",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BankAccountStructuredReferenceDTO"
                                },
                                "example": {
                                    "structuredReference": "+++004/8237/48665+++"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Business exception",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server unavailable",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/players/self/biometric-devices": {
            "get": {
                "summary": "Retrieves trusted biometric device",
                "description": "Retrieves trusted biometric devices",
                "operationId": "getBiometricDevices",
                "responses": {
                    "200": {
                        "description": "List of devices is returned",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/BiometricDeviceDTO"
                                    }
                                },
                                "example": [
                                    {
                                        "id": "string",
                                        "uid": "string",
                                        "name": "string",
                                        "authenticationEnabled": true,
                                        "lastPasswordLogin": 0,
                                        "lastFingerPrintLogin": 0,
                                        "dateCreated": 0,
                                        "dateUpdated": 0
                                    }
                                ]
                            }
                        }
                    },
                    "400": {
                        "description": "Bad input data",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server unavailable",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Add a trusted biometric device",
                "description": "Add a trusted biometric device to player's devices storage",
                "operationId": "addBiometricDevice",
                "requestBody": {
                    "description": "Biometric device to add",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BiometricDeviceDTO"
                            },
                            "example": {
                                "id": "string",
                                "uid": "string",
                                "name": "string",
                                "authenticationEnabled": true,
                                "lastPasswordLogin": 0,
                                "lastFingerPrintLogin": 0,
                                "dateCreated": 0,
                                "dateUpdated": 0
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Registered biometric device",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BiometricDeviceDTO"
                                },
                                "example": {
                                    "dateCreated": 1583765710410,
                                    "dateUpdated": 1583765710410,
                                    "lastFingerPrintLogin": 1583765710411,
                                    "lastPasswordLogin": 1583765710411,
                                    "authenticationEnabled": true,
                                    "name": "DEVICE_NAME",
                                    "uid": "6a390f4f-9635-4690-9895-75d2c5687a59",
                                    "id": "123"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad input data",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server unavailable",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/players/self/biometric-devices/{id}": {
            "put": {
                "summary": "Updates trusted biometric device",
                "description": "Updates trusted biometric devices with a given id and using provided data",
                "operationId": "updateBiometricDevice",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of biometric device",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": 123
                    }
                ],
                "requestBody": {
                    "description": "Biometric device to update",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BiometricDeviceDTO"
                            },
                            "example": {
                                "id": "string",
                                "uid": "string",
                                "name": "string",
                                "authenticationEnabled": true,
                                "lastPasswordLogin": 0,
                                "lastFingerPrintLogin": 0,
                                "dateCreated": 0,
                                "dateUpdated": 0
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Updated biometric device",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BiometricDeviceDTO"
                                },
                                "example": {
                                    "dateCreated": 1583765710410,
                                    "dateUpdated": 1583765710410,
                                    "lastFingerPrintLogin": 1583765710411,
                                    "lastPasswordLogin": 1583765710411,
                                    "authenticationEnabled": true,
                                    "name": "DEVICE_NAME",
                                    "uid": "6a390f4f-9635-4690-9895-75d2c5687a59",
                                    "id": "123"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad input data",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server unavailable",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Deletes the trusted biometric device",
                "description": "Deletes the biometric devices with a given id",
                "operationId": "deleteDevice",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of biometric device",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": 123
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Biometric device is updated and returned"
                    },
                    "400": {
                        "description": "Bad input data",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server unavailable",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/players/self/biometric-devices/configuration": {
            "get": {
                "summary": "Retrieves biometric device configuration",
                "description": "Retrieves biometric device configuration - i.e. how many devices can users have, login cooloff period etc.",
                "operationId": "getBiometricDeviceConfiguration",
                "responses": {
                    "200": {
                        "description": "Biometric device config is returned",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BiometricDeviceConfigurationDTO"
                                },
                                "example": {
                                    "maximumDevices": 10,
                                    "reauthenticationInterval": 100,
                                    "systemWideAuthenticationEnabled": true
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad input data",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server unavailable",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/players/self/cards/{id}/send": {
            "post": {
                "summary": "Send player's card",
                "description": "Emails a link to the player's card",
                "operationId": "emailCard",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Card identifier",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": 1454432004511
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Request submitted",
                        "content": {
                            "application/json": {},
                            "application/xml": {}
                        }
                    },
                    "400": {
                        "description": "Business exception",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    },
                    "503": {
                        "description": "Server unavailable",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    }
                }
            }
        },
        "/players/self/cards/{id}": {
            "get": {
                "summary": "Get single lottery card",
                "description": "Get single lottery card",
                "operationId": "getCard",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Card identifier",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": 1454432004511
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Requested user's card",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CardDTO"
                                },
                                "example": {
                                    "id": "1454432004511",
                                    "status": "2",
                                    "number": "44414544320045110259",
                                    "level": "1",
                                    "preferredCurrency": "USD",
                                    "requestedPhysicalCard": true,
                                    "type": "444",
                                    "requestedWhen": 0
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/CardDTO"
                                },
                                "example": "<CardDTO> <id>1454432004511</id> <status>2</status> <number>44414544320045110259</number> <level>1</level> <preferredCurrency>USD</preferredCurrency> <requestedPhysicalCard>true</requestedPhysicalCard> <type>444</type> <requestedWhen>0</requestedWhen> </CardDTO>"
                            }
                        }
                    },
                    "400": {
                        "description": "Business exception",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    },
                    "503": {
                        "description": "Server unavailable",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    }
                }
            },
            "put": {
                "summary": "Update lottery card",
                "description": "Only used to change the type (financial -> non financial)",
                "operationId": "updateCard",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Card identifier",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": 1454432004511
                    }
                ],
                "requestBody": {
                    "description": "Card details to update",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CardDTO"
                            },
                            "example": {
                                "id": "1454432004511",
                                "status": "2",
                                "number": "44414544320045110259",
                                "level": "1",
                                "preferredCurrency": "USD",
                                "requestedPhysicalCard": true,
                                "type": "444",
                                "requestedWhen": 0
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Updated lottery card",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CardDTO"
                                },
                                "example": {
                                    "id": "1454432004511",
                                    "status": "2",
                                    "number": "44414544320045110259",
                                    "level": "1",
                                    "preferredCurrency": "USD",
                                    "requestedPhysicalCard": true,
                                    "type": "444",
                                    "requestedWhen": 0
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/CardDTO"
                                },
                                "example": "<CardDTO> <id>1454432004511</id> <status>2</status> <number>44414544320045110259</number> <level>1</level> <preferredCurrency>USD</preferredCurrency> <requestedPhysicalCard>true</requestedPhysicalCard> <type>444</type> <requestedWhen>0</requestedWhen> </CardDTO>"
                            }
                        }
                    },
                    "400": {
                        "description": "Business exception",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    },
                    "503": {
                        "description": "Server unavailable",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    }
                }
            }
        },
        "/players/self/cards/{id}/print": {
            "get": {
                "summary": "Print player's card",
                "description": "Print player's card",
                "operationId": "printCard",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Card identifier",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": 1454432004511
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Attached card in PDF format",
                        "content": {
                            "application/pdf": {
                                "schema": {
                                    "type": "string"
                                },
                                "examples": {
                                    "default": {
                                        "value": null
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Business exception",
                        "content": {
                            "application/pdf": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "examples": {
                                    "default": {
                                        "value": null
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/pdf": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "examples": {
                                    "default": {
                                        "value": null
                                    }
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server unavailable",
                        "content": {
                            "application/pdf": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "examples": {
                                    "default": {
                                        "value": null
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/players/self/cards": {
            "get": {
                "summary": "Get player's lottery cards",
                "description": "Get player's lottery cards",
                "operationId": "getCards",
                "responses": {
                    "200": {
                        "description": "List of player's cards",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/CardDTO"
                                    }
                                },
                                "example": [
                                    {
                                        "id": "1454432004511",
                                        "status": "2",
                                        "number": "44414544320045110259",
                                        "level": "1",
                                        "preferredCurrency": "USD",
                                        "requestedPhysicalCard": true,
                                        "type": "444",
                                        "requestedWhen": 0
                                    }
                                ]
                            },
                            "application/xml": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/CardDTO"
                                    }
                                },
                                "example": "<PlayersSelfCardsGet200ApplicationXmlResponse> <id>1454432004511</id> <status>2</status> <number>44414544320045110259</number> <level>1</level> <preferredCurrency>USD</preferredCurrency> <requestedPhysicalCard>true</requestedPhysicalCard> <type>444</type> <requestedWhen>0</requestedWhen> </PlayersSelfCardsGet200ApplicationXmlResponse>"
                            }
                        }
                    },
                    "400": {
                        "description": "Business exception",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    },
                    "503": {
                        "description": "Server unavailable",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    }
                }
            }
        },
        "/players/self/cards/{id}/regenerate": {
            "post": {
                "summary": "Regenerate player's lottery cards",
                "description": "Regenerate player's lottery cards",
                "operationId": "regenerateCard",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Card identifier",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": 1454432004522
                    }
                ],
                "requestBody": {
                    "content": {
                        "*/*": {
                            "schema": {
                                "$ref": "#/components/schemas/ReasonDTO"
                            },
                            "examples": {
                                "default": {
                                    "value": null
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Regenerated player's cards",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/CardReplaceResponseDTO"
                                    }
                                },
                                "example": [
                                    {
                                        "newCardProxyId": "string",
                                        "newCardBarcode": "string"
                                    }
                                ]
                            },
                            "application/xml": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/CardReplaceResponseDTO"
                                    }
                                },
                                "example": "<PlayersSelfCards-id-RegeneratePost200ApplicationXmlResponse> <newCardProxyId>string</newCardProxyId> <newCardBarcode>string</newCardBarcode> </PlayersSelfCards-id-RegeneratePost200ApplicationXmlResponse>"
                            }
                        }
                    },
                    "400": {
                        "description": "Business exception",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    },
                    "503": {
                        "description": "Server unavailable",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    }
                }
            }
        },
        "/players/self/cards/request-physical-card/player": {
            "post": {
                "summary": "Allow player to request for physical card",
                "description": "Allow player to request for physical card",
                "operationId": "requestPhysicalCardByPlayer",
                "requestBody": {
                    "description": "Player identifier",
                    "content": {
                        "*/*": {
                            "schema": {
                                "$ref": "#/components/schemas/RequestPhysicalCardByPlayerDTO"
                            },
                            "examples": {
                                "default": {
                                    "value": null
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Created player's request physical card",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/RequestPhysicalCardResponseDTO"
                                    }
                                },
                                "example": [
                                    {
                                        "status": "REQUESTED",
                                        "reason": "string",
                                        "userAction": "string",
                                        "fields": [
                                            {
                                                "key": "string",
                                                "value": "string"
                                            }
                                        ],
                                        "contractId": "string",
                                        "id": 0,
                                        "requestDate": 0
                                    }
                                ]
                            },
                            "application/xml": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/RequestPhysicalCardResponseDTO"
                                    }
                                },
                                "example": "<PlayersSelfCardsRequest-physical-cardPlayerPost200ApplicationXmlResponse> <status>REQUESTED</status> <reason>string</reason> <userAction>string</userAction> <fields> <key>string</key> <value>string</value> </fields> <contractId>string</contractId> <id>0</id> <requestDate>0</requestDate> </PlayersSelfCardsRequest-physical-cardPlayerPost200ApplicationXmlResponse>"
                            }
                        }
                    },
                    "400": {
                        "description": "Business exception",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    },
                    "503": {
                        "description": "Server unavailable",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    }
                }
            }
        },
        "/players/self/cards/request-physical-card": {
            "post": {
                "summary": "Allow player to request for physical card",
                "description": "Allow player to request for physical card",
                "operationId": "requestPhysicalCard",
                "requestBody": {
                    "content": {
                        "*/*": {
                            "schema": {
                                "$ref": "#/components/schemas/RequestPhysicalCardDTO"
                            },
                            "examples": {
                                "default": {
                                    "value": null
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Created player's request physical card",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/RequestPhysicalCardResponseDTO"
                                    }
                                },
                                "example": [
                                    {
                                        "status": "REQUESTED",
                                        "reason": "string",
                                        "userAction": "string",
                                        "fields": [
                                            {
                                                "key": "string",
                                                "value": "string"
                                            }
                                        ],
                                        "contractId": "string",
                                        "id": 0,
                                        "requestDate": 0
                                    }
                                ]
                            },
                            "application/xml": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/RequestPhysicalCardResponseDTO"
                                    }
                                },
                                "example": "<PlayersSelfCardsRequest-physical-cardPost200ApplicationXmlResponse> <status>REQUESTED</status> <reason>string</reason> <userAction>string</userAction> <fields> <key>string</key> <value>string</value> </fields> <contractId>string</contractId> <id>0</id> <requestDate>0</requestDate> </PlayersSelfCardsRequest-physical-cardPost200ApplicationXmlResponse>"
                            }
                        }
                    },
                    "400": {
                        "description": "Business exception",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    },
                    "503": {
                        "description": "Server unavailable",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    }
                }
            }
        },
        "/players/self/transactions/claim/{id}": {
            "get": {
                "summary": "Get claim transaction by ID",
                "description": "Allows to fetch transaction by Id.",
                "operationId": "getTransaction",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of requested transaction",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": 5611
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Requested transaction",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ClaimTransactionDTO"
                                },
                                "example": {
                                    "id": "string",
                                    "uuid": "I6-**********-12",
                                    "insertTimestamp": 0,
                                    "type": "application/lotteryTransaction-v1",
                                    "body": "<balanceTransaction> ... </balanceTransaction>",
                                    "forFun": true,
                                    "jurisdiction": 0,
                                    "claimId": "string",
                                    "claimDate": 0,
                                    "claimAmount": 0,
                                    "claimNetAmount": 0,
                                    "claimStatus": "string",
                                    "claimSource": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Transaction with requested ID is not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "System exception",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "System not available. Retry later",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/players/self/transactions/claim": {
            "get": {
                "summary": "Get player claim transactions.",
                "description": "Allows to query player's claim transactions repository with optional filters. Results pagination is applied.",
                "operationId": "getTransactions_1",
                "parameters": [
                    {
                        "name": "claimStatus",
                        "in": "query",
                        "description": "Claim  status",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "claimSource",
                        "in": "query",
                        "description": "Claim source",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "includeBody",
                        "in": "query",
                        "description": "Defines if transactions in response should have 'body' fetch from database. Default value is 'false'",
                        "schema": {
                            "type": "boolean"
                        },
                        "example": "False"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Format - int32. Number of page to be return.",
                        "schema": {
                            "type": "integer"
                        },
                        "example": 1
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "description": "Format - int32. Amount of records on page to be returned. Defines offset if 'page' greater than 1. ",
                        "schema": {
                            "type": "integer"
                        },
                        "example": 30
                    },
                    {
                        "name": "date-from",
                        "in": "query",
                        "description": "Format - int64. Date in millis. 'date-to' -30d used if not provided ",
                        "schema": {
                            "type": "integer"
                        },
                        "example": 1582633200000
                    },
                    {
                        "name": "date-to",
                        "in": "query",
                        "description": "Format - int64. Date in millis. LocalDate.now() used if not provided.",
                        "schema": {
                            "type": "integer"
                        },
                        "example": 1582633200000
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Claim transactions list",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ClaimTransactionsPageDTO"
                                },
                                "example": {
                                    "nextPageUrl": "string",
                                    "previousPageUrl": "string",
                                    "pageUrls": {},
                                    "nextItems": 0,
                                    "previousItems": 0,
                                    "transactions": [
                                        {
                                            "id": "string",
                                            "uuid": "I6-**********-12",
                                            "insertTimestamp": 0,
                                            "type": "application/lotteryTransaction-v1",
                                            "body": "<balanceTransaction> ... </balanceTransaction>",
                                            "forFun": true,
                                            "jurisdiction": 0,
                                            "claimId": "string",
                                            "claimDate": 0,
                                            "claimAmount": 0,
                                            "claimNetAmount": 0,
                                            "claimStatus": "string",
                                            "claimSource": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "System exception",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "System not available. Retry later",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/players/client-device/get": {
            "post": {
                "summary": "Retrieves client device",
                "description": "Retrieve client device based on DTO with applicationId and deviceType",
                "operationId": "getClientDevice",
                "requestBody": {
                    "description": "Client device to retrieve",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ClientDeviceDTO"
                            },
                            "example": {
                                "deviceType": "ANDROID",
                                "applicationId": "19d9d9a93381b2a57db218b02f1069ca36bfd37fbddd6cc6427f53c156f8c"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Retrieved client device",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ClientDeviceDTO"
                                },
                                "example": {
                                    "deviceType": "ANDROID",
                                    "applicationId": "19d9d9a93381b2a57db218b02f1069ca36bfd37fbddd6cc6427f53c156f8c",
                                    "enabled": true
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/ClientDeviceDTO"
                                },
                                "example": {
                                    "deviceType": "ANDROID",
                                    "applicationId": "19d9d9a93381b2a57db218b02f1069ca36bfd37fbddd6cc6427f53c156f8c",
                                    "enabled": true
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Business exception",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    },
                    "503": {
                        "description": "Server unavailable",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    }
                }
            }
        },
        "/players/client-device/delete": {
            "put": {
                "summary": "Remove client device",
                "description": "Remove client device with a given applicationId nad deviceType",
                "operationId": "deleteClientDevice",
                "requestBody": {
                    "description": "Removed client device",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ClientDeviceDTO"
                            },
                            "example": {
                                "deviceType": "ANDROID",
                                "applicationId": "19d9d9a93381b2a57db218b02f1069ca36bfd37fbddd6cc6427f53c156f8c",
                                "enabled": true
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Removed client device is returned",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ClientDeviceDTO"
                                },
                                "example": {
                                    "deviceType": "ANDROID",
                                    "applicationId": "19d9d9a93381b2a57db218b02f1069ca36bfd37fbddd6cc6427f53c156f8c",
                                    "enabled": true
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/ClientDeviceDTO"
                                },
                                "example": {
                                    "deviceType": "ANDROID",
                                    "applicationId": "19d9d9a93381b2a57db218b02f1069ca36bfd37fbddd6cc6427f53c156f8c",
                                    "enabled": true
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Business exception",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    },
                    "503": {
                        "description": "Server unavailable",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    }
                }
            }
        },
        "/players/client-device/update": {
            "put": {
                "summary": "Updates device info",
                "description": " Updates device info",
                "operationId": "updateClientDeviceState",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ClientDeviceDTO"
                            },
                            "example": {
                                "deviceType": "ANDROID",
                                "applicationId": "19d9d9a93381b2a57db218b02f1069ca36bfd37fbddd6cc6427f53c156f8c"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Updated client device",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ClientDeviceDTO"
                                },
                                "example": {
                                    "deviceType": "ANDROID",
                                    "applicationId": "19d9d9a93381b2a57db218b02f1069ca36bfd37fbddd6cc6427f53c156f8c",
                                    "enabled": true
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/ClientDeviceDTO"
                                },
                                "example": {
                                    "deviceType": "ANDROID",
                                    "applicationId": "19d9d9a93381b2a57db218b02f1069ca36bfd37fbddd6cc6427f53c156f8c",
                                    "enabled": true
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Business exception",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    },
                    "503": {
                        "description": "Server unavailable",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    }
                }
            }
        },
        "/players/client-device/register": {
            "post": {
                "summary": "Registers a device",
                "description": " Registers a device using given application id and type",
                "operationId": "registerClientDevice",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ClientDeviceDTO"
                            },
                            "example": {
                                "deviceType": "ANDROID",
                                "applicationId": "19d9d9a93381b2a57db218b02f1069ca36bfd37fbddd6cc6427f53c156f8c"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Registered client device",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ClientDeviceDTO"
                                },
                                "example": {
                                    "deviceType": "ANDROID",
                                    "applicationId": "19d9d9a93381b2a57db218b02f1069ca36bfd37fbddd6cc6427f53c156f8c",
                                    "enabled": true
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/ClientDeviceDTO"
                                },
                                "example": {
                                    "deviceType": "ANDROID",
                                    "applicationId": "19d9d9a93381b2a57db218b02f1069ca36bfd37fbddd6cc6427f53c156f8c",
                                    "enabled": true
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Business exception",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    },
                    "503": {
                        "description": "Server unavailable",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    }
                }
            }
        },
        "/players/self/close": {
            "post": {
                "summary": "Close account",
                "description": "Allows to submit the request of account closure for a given customer.",
                "operationId": "closePlayerAccount",
                "requestBody": {
                    "description": "Close account request",
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/ClosePlayerAccountRequestDTO"
                                }
                            },
                            "example": [
                                {
                                    "removeData": true,
                                    "reason": "string"
                                }
                            ]
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "Player Account closure request received."
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "User not authenticated"
                    },
                    "500": {
                        "description": "System exception"
                    },
                    "503": {
                        "description": "System not available. Retry later"
                    }
                }
            }
        },
        "/players/self/club-card-print-requests": {
            "get": {
                "summary": "Retrieves the club card print requests for the logged-in player, refer to schema documentation for printRequestFields details.",
                "description": "Retrieves the club card print requests for the logged-in player, refer to schema documentation for printRequestFields details.",
                "operationId": "getClubCardPrintRequestsByContractId",
                "responses": {
                    "200": {
                        "description": "Club card print requests have been retrieved",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ClubCardPrintRequestDTO"
                                    }
                                },
                                "example": [
                                    {
                                        "reason": "string",
                                        "printRequestId": 0,
                                        "requestDate": 0,
                                        "lastUpdateDate": 0,
                                        "brandId": 0,
                                        "partnerId": 0,
                                        "userAction": "string",
                                        "printRequestStatus": "REQUESTED",
                                        "printRequestFields": [
                                            {
                                                "key": "string",
                                                "value": "string"
                                            }
                                        ]
                                    }
                                ]
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server unavailable",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Adds a new club card print request for the logged-in player, refer to schema documentation for allowed keys in printRequestFields.",
                "description": "Adds a new club card print request for the logged-in player, refer to schema documentation for allowed keys in printRequestFields.",
                "operationId": "addClubCardPrintRequest",
                "requestBody": {
                    "description": "Club card print request infos",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ClubCardPrintRequestInfoDTO"
                            },
                            "example": {
                                "reason": "string"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Club card print request has been added",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ClubCardPrintRequestDTO"
                                },
                                "example": {
                                    "reason": "string",
                                    "printRequestId": 0,
                                    "requestDate": 0,
                                    "lastUpdateDate": 0,
                                    "brandId": 0,
                                    "partnerId": 0,
                                    "userAction": "string",
                                    "printRequestStatus": "REQUESTED",
                                    "printRequestFields": [
                                        {
                                            "key": "string",
                                            "value": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server unavailable",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/players/self/communication-preferences": {
            "get": {
                "summary": "Retrieves communication preferences for a given channel",
                "description": "Retrieves communication preferences for a given channel",
                "operationId": "getCommunicationPreferences_1",
                "responses": {
                    "200": {
                        "description": "Communication preferences successfully retrieved",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CommunicationPreferencesDTO"
                                },
                                "example": {
                                    "preferredChannel": "EMAIL_CHANNEL",
                                    "pushClients": {
                                        "MAINTENANCE": true,
                                        "ALERT": true,
                                        "ALARM": true,
                                        "PROMOTION": true
                                    },
                                    "sms": {
                                        "MAINTENANCE": true,
                                        "ALERT": true,
                                        "ALARM": true,
                                        "PROMOTION": true
                                    },
                                    "email": {
                                        "MAINTENANCE": true,
                                        "ALERT": true,
                                        "ALARM": true,
                                        "PROMOTION": true
                                    },
                                    "smsPersonalBlackoutTime": {
                                        "enabled": false,
                                        "startTime": "2024-03-15",
                                        "endTime": "2024-03-15"
                                    },
                                    "smsGlobalBlackoutTime": {
                                        "enabled": false,
                                        "startTime": "2024-03-15",
                                        "endTime": "2024-03-15"
                                    },
                                    "emailFormat": "HTML",
                                    "pushClientPersonalBlackoutTime": {
                                        "enabled": false,
                                        "startTime": "2024-03-15",
                                        "endTime": "2024-03-15"
                                    },
                                    "pushClientGlobalBlackoutTime": {
                                        "enabled": false,
                                        "startTime": "2024-03-15",
                                        "endTime": "2024-03-15"
                                    }
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/CommunicationPreferencesDTO"
                                },
                                "example": "<CommunicationPreferencesDTO> <preferredChannel>EMAIL_CHANNEL</preferredChannel> <pushClients> <MAINTENANCE>true</MAINTENANCE> <ALERT>true</ALERT> <ALARM>true</ALARM> <PROMOTION>true</PROMOTION> </pushClients> <sms> <MAINTENANCE>true</MAINTENANCE> <ALERT>true</ALERT> <ALARM>true</ALARM> <PROMOTION>true</PROMOTION> </sms> <email> <MAINTENANCE>true</MAINTENANCE> <ALERT>true</ALERT> <ALARM>true</ALARM> <PROMOTION>true</PROMOTION> </email> <smsPersonalBlackoutTime> <enabled>False</enabled> <startTime>00:00</startTime> <endTime>00:00</endTime> </smsPersonalBlackoutTime> <smsGlobalBlackoutTime> <enabled>False</enabled> <startTime>00:00</startTime> <endTime>00:00</endTime> </smsGlobalBlackoutTime> <emailFormat>HTML</emailFormat> <pushClientPersonalBlackoutTime> <enabled>False</enabled> <startTime>00:00</startTime> <endTime>00:00</endTime> </pushClientPersonalBlackoutTime> <pushClientGlobalBlackoutTime> <enabled>False</enabled> <startTime>00:00</startTime> <endTime>00:00</endTime> </pushClientGlobalBlackoutTime> </CommunicationPreferencesDTO>"
                            }
                        }
                    },
                    "400": {
                        "description": "Business exception",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    },
                    "401": {
                        "description": "Not Authenticated"
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    },
                    "503": {
                        "description": "Server unavailable",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    }
                }
            },
            "put": {
                "summary": "Updates communication preferences",
                "description": "Updates communication preferences",
                "operationId": "updateCommunicationPreferences",
                "requestBody": {
                    "description": "Communication preferences update request",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CommunicationPreferencesDTO"
                            },
                            "example": {
                                "preferredChannel": "EMAIL_CHANNEL",
                                "pushClients": {
                                    "MAINTENANCE": true,
                                    "ALERT": true,
                                    "ALARM": true,
                                    "PROMOTION": true
                                },
                                "sms": {
                                    "MAINTENANCE": true,
                                    "ALERT": true,
                                    "ALARM": true,
                                    "PROMOTION": true
                                },
                                "email": {
                                    "MAINTENANCE": true,
                                    "ALERT": true,
                                    "ALARM": true,
                                    "PROMOTION": true
                                },
                                "smsPersonalBlackoutTime": {
                                    "enabled": false,
                                    "startTime": "2024-03-15",
                                    "endTime": "2024-03-15"
                                },
                                "smsGlobalBlackoutTime": {
                                    "enabled": false,
                                    "startTime": "2024-03-15",
                                    "endTime": "2024-03-15"
                                },
                                "emailFormat": "HTML",
                                "pushClientPersonalBlackoutTime": {
                                    "enabled": false,
                                    "startTime": "2024-03-15",
                                    "endTime": "2024-03-15"
                                },
                                "pushClientGlobalBlackoutTime": {
                                    "enabled": false,
                                    "startTime": "2024-03-15",
                                    "endTime": "2024-03-15"
                                }
                            }
                        },
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/CommunicationPreferencesDTO"
                            },
                            "example": "<CommunicationPreferencesDTO> <preferredChannel>EMAIL_CHANNEL</preferredChannel> <pushClients> <MAINTENANCE>true</MAINTENANCE> <ALERT>true</ALERT> <ALARM>true</ALARM> <PROMOTION>true</PROMOTION> </pushClients> <sms> <MAINTENANCE>true</MAINTENANCE> <ALERT>true</ALERT> <ALARM>true</ALARM> <PROMOTION>true</PROMOTION> </sms> <email> <MAINTENANCE>true</MAINTENANCE> <ALERT>true</ALERT> <ALARM>true</ALARM> <PROMOTION>true</PROMOTION> </email> <smsPersonalBlackoutTime> <enabled>False</enabled> <startTime>00:00</startTime> <endTime>00:00</endTime> </smsPersonalBlackoutTime> <smsGlobalBlackoutTime> <enabled>False</enabled> <startTime>00:00</startTime> <endTime>00:00</endTime> </smsGlobalBlackoutTime> <emailFormat>HTML</emailFormat> <pushClientPersonalBlackoutTime> <enabled>False</enabled> <startTime>00:00</startTime> <endTime>00:00</endTime> </pushClientPersonalBlackoutTime> <pushClientGlobalBlackoutTime> <enabled>False</enabled> <startTime>00:00</startTime> <endTime>00:00</endTime> </pushClientGlobalBlackoutTime> </CommunicationPreferencesDTO>"
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Notification preferences updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CommunicationPreferencesDTO"
                                },
                                "example": {
                                    "preferredChannel": "EMAIL_CHANNEL",
                                    "pushClients": {
                                        "MAINTENANCE": true,
                                        "ALERT": true,
                                        "ALARM": true,
                                        "PROMOTION": true
                                    },
                                    "sms": {
                                        "MAINTENANCE": true,
                                        "ALERT": true,
                                        "ALARM": true,
                                        "PROMOTION": true
                                    },
                                    "email": {
                                        "MAINTENANCE": true,
                                        "ALERT": true,
                                        "ALARM": true,
                                        "PROMOTION": true
                                    },
                                    "smsPersonalBlackoutTime": {
                                        "enabled": false,
                                        "startTime": "2024-03-15",
                                        "endTime": "2024-03-15"
                                    },
                                    "smsGlobalBlackoutTime": {
                                        "enabled": false,
                                        "startTime": "2024-03-15",
                                        "endTime": "2024-03-15"
                                    },
                                    "emailFormat": "HTML",
                                    "pushClientPersonalBlackoutTime": {
                                        "enabled": false,
                                        "startTime": "2024-03-15",
                                        "endTime": "2024-03-15"
                                    },
                                    "pushClientGlobalBlackoutTime": {
                                        "enabled": false,
                                        "startTime": "2024-03-15",
                                        "endTime": "2024-03-15"
                                    }
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/CommunicationPreferencesDTO"
                                },
                                "example": "<CommunicationPreferencesDTO> <preferredChannel>EMAIL_CHANNEL</preferredChannel> <pushClients> <MAINTENANCE>true</MAINTENANCE> <ALERT>true</ALERT> <ALARM>true</ALARM> <PROMOTION>true</PROMOTION> </pushClients> <sms> <MAINTENANCE>true</MAINTENANCE> <ALERT>true</ALERT> <ALARM>true</ALARM> <PROMOTION>true</PROMOTION> </sms> <email> <MAINTENANCE>true</MAINTENANCE> <ALERT>true</ALERT> <ALARM>true</ALARM> <PROMOTION>true</PROMOTION> </email> <smsPersonalBlackoutTime> <enabled>False</enabled> <startTime>00:00</startTime> <endTime>00:00</endTime> </smsPersonalBlackoutTime> <smsGlobalBlackoutTime> <enabled>False</enabled> <startTime>00:00</startTime> <endTime>00:00</endTime> </smsGlobalBlackoutTime> <emailFormat>HTML</emailFormat> <pushClientPersonalBlackoutTime> <enabled>False</enabled> <startTime>00:00</startTime> <endTime>00:00</endTime> </pushClientPersonalBlackoutTime> <pushClientGlobalBlackoutTime> <enabled>False</enabled> <startTime>00:00</startTime> <endTime>00:00</endTime> </pushClientGlobalBlackoutTime> </CommunicationPreferencesDTO>"
                            }
                        }
                    },
                    "400": {
                        "description": "Business exception",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    },
                    "401": {
                        "description": "Not Authenticated"
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    },
                    "503": {
                        "description": "Server unavailable",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    }
                }
            }
        },
        "/players/self/communication-preferences/{channelType}": {
            "get": {
                "summary": "Retrieves communication preferences for a given channel",
                "description": "Retrieves communication preferences for a given channel",
                "operationId": "getCommunicationPreferences",
                "parameters": [
                    {
                        "name": "channelType",
                        "in": "path",
                        "description": "Channel type",
                        "required": true,
                        "schema": {
                            "enum": [
                                "PUSH_CLIENT",
                                "SMS",
                                "EMAIL",
                                "PLAYER_PORTAL",
                                "PAPER_CHANNEL"
                            ],
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Communication preferences for a given channel successfully retrieved",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CommunicationPreferencesDTO"
                                },
                                "example": {
                                    "preferredChannel": "EMAIL_CHANNEL",
                                    "pushClients": {
                                        "MAINTENANCE": true,
                                        "ALERT": true,
                                        "ALARM": true,
                                        "PROMOTION": true
                                    },
                                    "sms": {
                                        "MAINTENANCE": true,
                                        "ALERT": true,
                                        "ALARM": true,
                                        "PROMOTION": true
                                    },
                                    "email": {
                                        "MAINTENANCE": true,
                                        "ALERT": true,
                                        "ALARM": true,
                                        "PROMOTION": true
                                    },
                                    "smsPersonalBlackoutTime": {
                                        "enabled": false,
                                        "startTime": "2024-03-15",
                                        "endTime": "2024-03-15"
                                    },
                                    "smsGlobalBlackoutTime": {
                                        "enabled": false,
                                        "startTime": "2024-03-15",
                                        "endTime": "2024-03-15"
                                    },
                                    "emailFormat": "HTML",
                                    "pushClientPersonalBlackoutTime": {
                                        "enabled": false,
                                        "startTime": "2024-03-15",
                                        "endTime": "2024-03-15"
                                    },
                                    "pushClientGlobalBlackoutTime": {
                                        "enabled": false,
                                        "startTime": "2024-03-15",
                                        "endTime": "2024-03-15"
                                    }
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/CommunicationPreferencesDTO"
                                },
                                "example": "<CommunicationPreferencesDTO> <preferredChannel>EMAIL_CHANNEL</preferredChannel> <pushClients> <MAINTENANCE>true</MAINTENANCE> <ALERT>true</ALERT> <ALARM>true</ALARM> <PROMOTION>true</PROMOTION> </pushClients> <sms> <MAINTENANCE>true</MAINTENANCE> <ALERT>true</ALERT> <ALARM>true</ALARM> <PROMOTION>true</PROMOTION> </sms> <email> <MAINTENANCE>true</MAINTENANCE> <ALERT>true</ALERT> <ALARM>true</ALARM> <PROMOTION>true</PROMOTION> </email> <smsPersonalBlackoutTime> <enabled>False</enabled> <startTime>00:00</startTime> <endTime>00:00</endTime> </smsPersonalBlackoutTime> <smsGlobalBlackoutTime> <enabled>False</enabled> <startTime>00:00</startTime> <endTime>00:00</endTime> </smsGlobalBlackoutTime> <emailFormat>HTML</emailFormat> <pushClientPersonalBlackoutTime> <enabled>False</enabled> <startTime>00:00</startTime> <endTime>00:00</endTime> </pushClientPersonalBlackoutTime> <pushClientGlobalBlackoutTime> <enabled>False</enabled> <startTime>00:00</startTime> <endTime>00:00</endTime> </pushClientGlobalBlackoutTime> </CommunicationPreferencesDTO>"
                            }
                        }
                    },
                    "400": {
                        "description": "Business exception",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    },
                    "401": {
                        "description": "Not Authenticated"
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    },
                    "503": {
                        "description": "Server unavailable",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    }
                }
            }
        },
        "/configurations": {
            "get": {
                "summary": "Get all available configurations",
                "description": "Retrieves all available configurations",
                "operationId": "getConfigurations",
                "responses": {
                    "200": {
                        "description": "Configuration types",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "enum": [
                                        "kyc"
                                    ],
                                    "type": "string"
                                },
                                "example": "kyc"
                            },
                            "application/xml": {
                                "schema": {
                                    "enum": [
                                        "kyc"
                                    ],
                                    "type": "string"
                                },
                                "example": "<ConfigurationsGet200ApplicationXmlResponse>kyc</ConfigurationsGet200ApplicationXmlResponse>"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    },
                    "500": {
                        "description": "System exception",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    },
                    "503": {
                        "description": "System not available. Retry later",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    }
                }
            }
        },
        "/configurations/kyc/{registration-level}": {
            "get": {
                "summary": "Get KYC configurations",
                "description": "Retrieves the KYC configurations",
                "operationId": "getKycConfiguration",
                "parameters": [
                    {
                        "name": "registration-level",
                        "in": "path",
                        "description": "Format - int32.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "KYC configuration",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/KycConfigurationDTO"
                                },
                                "example": {
                                    "registrationLevelId": 0,
                                    "maxPlayerAttempts": 0,
                                    "checkAfterLogin": true
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/KycConfigurationDTO"
                                },
                                "example": "<KycConfigurationDTO> <registrationLevelId>0</registrationLevelId> <maxPlayerAttempts>0</maxPlayerAttempts> <checkAfterLogin>true</checkAfterLogin> </KycConfigurationDTO>"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    },
                    "500": {
                        "description": "System exception",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    },
                    "503": {
                        "description": "System not available. Retry later",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    }
                }
            }
        },
        "/players/self/consents": {
            "get": {
                "summary": "Retrieves player consents.",
                "description": "Retrieves player consents.",
                "operationId": "getPlayerConsents",
                "responses": {
                    "200": {
                        "description": "List of player's consents",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/PlayerConsentDTO"
                                    }
                                },
                                "example": [
                                    {
                                        "id": "1",
                                        "userType": {
                                            "userTypeId": "2",
                                            "brandId": "25",
                                            "partnerId": "1",
                                            "userTypeDescription": "full"
                                        },
                                        "callerSystem": {
                                            "callerSystem": "2",
                                            "description": "Mobile"
                                        },
                                        "version": "2",
                                        "nextVersion": "3",
                                        "enabled": true,
                                        "requiresConsent": true,
                                        "updateDate": 1583147293493,
                                        "language": "en_US"
                                    }
                                ]
                            }
                        }
                    },
                    "400": {
                        "description": "Business exception",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server unavailable",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "summary": "Updates player's consents",
                "description": "Update player's consents",
                "operationId": "updatePlayerConsents",
                "requestBody": {
                    "description": "Player consents to update",
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/PlayerConsentDTO"
                                }
                            },
                            "example": [
                                {
                                    "id": "5",
                                    "version": "1",
                                    "nextVersion": null,
                                    "enabled": true,
                                    "updateDate": 1583767472248,
                                    "language": "en_US",
                                    "requiresConsent": false
                                }
                            ]
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "List of updated player's consents",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/PlayerConsentDTO"
                                    }
                                },
                                "example": [
                                    {
                                        "id": "1",
                                        "version": "2",
                                        "enabled": false,
                                        "requiresConsent": false,
                                        "updateDate": 1572955560196
                                    },
                                    {
                                        "id": "2",
                                        "version": "1",
                                        "enabled": false,
                                        "requiresConsent": false,
                                        "updateDate": 1563449031567
                                    },
                                    {
                                        "id": "3",
                                        "version": "1",
                                        "enabled": false,
                                        "requiresConsent": false,
                                        "updateDate": 1563449031567
                                    },
                                    {
                                        "id": "4",
                                        "version": "1",
                                        "enabled": false,
                                        "requiresConsent": false,
                                        "updateDate": 1563449031567
                                    },
                                    {
                                        "id": "5",
                                        "version": "1",
                                        "enabled": false,
                                        "requiresConsent": false,
                                        "updateDate": 1563449031567
                                    },
                                    {
                                        "id": "6",
                                        "version": "1",
                                        "enabled": false,
                                        "requiresConsent": false,
                                        "updateDate": 1563449031567
                                    },
                                    {
                                        "id": "7",
                                        "version": "1",
                                        "enabled": false,
                                        "requiresConsent": false,
                                        "updateDate": 1563449031567
                                    },
                                    {
                                        "id": "9",
                                        "version": "58",
                                        "enabled": true,
                                        "requiresConsent": false,
                                        "updateDate": 1574253037390
                                    },
                                    {
                                        "id": "10",
                                        "version": "42",
                                        "enabled": true,
                                        "requiresConsent": false,
                                        "updateDate": 1573641540404
                                    }
                                ]
                            }
                        }
                    },
                    "400": {
                        "description": "Business exception",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server unavailable",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/players/self/consents/{id}": {
            "put": {
                "summary": "Updates single player consent",
                "description": "Update single player consent",
                "operationId": "updatePlayerConsent",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of the player consent to be updated",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": 1
                    }
                ],
                "requestBody": {
                    "description": "Player consent to update",
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/PlayerConsentDTO"
                                }
                            },
                            "example": {
                                "id": "5",
                                "version": "1",
                                "nextVersion": null,
                                "enabled": true,
                                "updateDate": 1583767472248,
                                "language": "en_US",
                                "requiresConsent": false
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Updated player consent",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PlayerConsentDTO"
                                },
                                "example": {
                                    "id": "5",
                                    "version": "1",
                                    "nextVersion": null,
                                    "enabled": true,
                                    "updateDate": 1583767472248,
                                    "language": "en_US",
                                    "requiresConsent": false
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Business exception",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server unavailable",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/players/consents": {
            "get": {
                "summary": "Retrieves all the consents configured in the system",
                "description": "Retrieves all configured consents with a given language. If no language is provided, retrieves all configured consents",
                "operationId": "getAvailableConsents",
                "parameters": [
                    {
                        "name": "user-type-id",
                        "in": "query",
                        "description": "Format - int64. User registration level",
                        "schema": {
                            "type": "integer"
                        },
                        "example": 2
                    },
                    {
                        "name": "language",
                        "in": "query",
                        "description": "Language of configured consents",
                        "schema": {
                            "type": "string"
                        },
                        "example": "en_US"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of configured consent",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ConsentDTO"
                                    }
                                },
                                "example": [
                                    {
                                        "id": "1",
                                        "name": "Tangible Rewardss",
                                        "descriptions": [
                                            {
                                                "body": "If ... you until that date after which they will no longer be available. If you do not wish to lose work-in-progress bonuses and other rewards, please make sure you do not withdraw this consent as we will not be able to restore expired rewards.",
                                                "language": "en_US",
                                                "version": "1"
                                            }
                                        ],
                                        "userType": {
                                            "userTypeId": "2",
                                            "brandId": "25",
                                            "partnerId": "1",
                                            "userTypeDescription": "FULL"
                                        },
                                        "enabled": true,
                                        "mandatory": false,
                                        "isMandatoryConsentTrue": false,
                                        "creationDate": 1560847217522,
                                        "lastUpdateTime": 1581410059909,
                                        "personalInformation": [
                                            {
                                                "id": "45",
                                                "description": "PASSWORD"
                                            },
                                            {
                                                "id": "69",
                                                "description": "SUFFIX"
                                            }
                                        ],
                                        "processes": [
                                            {
                                                "id": "5",
                                                "description": "Promotion for tangible rewards"
                                            }
                                        ]
                                    }
                                ]
                            }
                        }
                    },
                    "400": {
                        "description": "Business exception",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server unavailable",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/players/consents/{id}": {
            "get": {
                "summary": "Retrieves one specific configured consent",
                "description": "Retrieves one specific consent, with a given id, between those configured in the system",
                "operationId": "getAvailableConsent",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of configured consent",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": 1
                    },
                    {
                        "name": "user-type-id",
                        "in": "query",
                        "description": "Format - int64. User registration level",
                        "schema": {
                            "type": "integer"
                        },
                        "example": 2
                    },
                    {
                        "name": "language",
                        "in": "query",
                        "description": "Language of configured consent.",
                        "schema": {
                            "type": "string"
                        },
                        "example": "en_US"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Configured consent",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ConsentDTO"
                                },
                                "example": {
                                    "id": "1",
                                    "name": "Tangible Rewardss",
                                    "descriptions": [
                                        {
                                            "body": "If you consent to the use and secure storage of your personal information (such as name, alias, date of birth, nationality, address, mobile number, email, social network address, current location, social security number or any other form of social unique identifier and statistical information on your gameplay) for promotional purposes aimed at giving you tangible rewards such as cash, bonuses, loyalty points, free spins, vouchers, free tickets, Buy X Get Y (anything that has a monetary value), then accept this consent. If you choose to withdraw this consent, we will stop sending you any promotions or new rewards but you can continue with the rewards you already received prior to withdrawal of consent. Please note, rewards that have an expiry date will be available to you until that date after which they will no longer be available. If you do not wish to lose work-in-progress bonuses and other rewards, please make sure you do not withdraw this consent as we will not be able to restore expired rewards.",
                                            "userType": {
                                                "userTypeId": "2",
                                                "brandId": "25",
                                                "partnerId": "1",
                                                "userTypeDescription": "FULL"
                                            },
                                            "language": "en_US",
                                            "version": "1"
                                        }
                                    ],
                                    "enabled": true,
                                    "mandatory": false,
                                    "isMandatoryConsentTrue": false,
                                    "creationDate": 1560847217522,
                                    "lastUpdateTime": 1581410059909,
                                    "personalInformation": [
                                        {
                                            "id": "45",
                                            "description": "PASSWORD"
                                        },
                                        {
                                            "id": "69",
                                            "description": "SUFFIX"
                                        }
                                    ],
                                    "processes": [
                                        {
                                            "id": "5",
                                            "description": "Promotion for tangible rewards"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Business exception",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server unavailable",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/players/verify-contact/{code}": {
            "get": {
                "summary": "Verify player's email",
                "description": "Verification that the player's email address given during registration is correct.",
                "operationId": "verifyContact",
                "parameters": [
                    {
                        "name": "code",
                        "in": "path",
                        "description": "One-time verification code",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Verification passed"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "500": {
                        "description": "System exception"
                    },
                    "503": {
                        "description": "System not available. Retry later"
                    }
                }
            }
        },
        "/players/self/export/data": {
            "get": {
                "summary": "Retrieves Data Portability Requests for a given customer",
                "description": "Retrieves Data Portability Requests for a given customer",
                "operationId": "getPlayerDataExportRequests",
                "responses": {
                    "200": {
                        "description": "Data portability requests history",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/DataExportRequestDTO"
                                    }
                                },
                                "example": [
                                    {
                                        "id": "6a390f4f-9635-4690-9895-75d2c5687a59",
                                        "transactionId": "adce59a3-3886-44c7-81f0-b302e5744632",
                                        "status": "",
                                        "requestDate": 1583768406666,
                                        "completionDate": 1583768406666
                                    }
                                ]
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server unavailable",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Export player's data",
                "description": "Submits a Data Portability Request or a given customer",
                "operationId": "submitPlayerDataExportRequest",
                "responses": {
                    "204": {
                        "description": "Data export request received"
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server unavailable",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/players/self/eticket/validation": {
            "post": {
                "summary": "Validates player's eticket",
                "description": "Validates player's eticket",
                "operationId": "validate_1",
                "requestBody": {
                    "content": {
                        "*/*": {
                            "schema": {
                                "$ref": "#/components/schemas/EticketDTO"
                            },
                            "examples": {
                                "default": {
                                    "value": null
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Eticket validated correctly",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EticketDTO"
                                },
                                "example": {
                                    "serialNumber": "10518-031833344-30",
                                    "pin": "BSGF-RRR6-2ZU4-9XBE",
                                    "amount": 10000
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Business exception",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    },
                    "503": {
                        "description": "Server unavailable",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    }
                }
            }
        },
        "/players/inbound-communications": {
            "post": {
                "summary": "Sends notification from anonymous player to lottery system",
                "description": "Sends notification from anonymous player to lottery system",
                "operationId": "receiveAnonymousInboundCommunication",
                "requestBody": {
                    "description": "Message defined by a player",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AnonymousInboundCommunicationDTO"
                            },
                            "example": {
                                "destination": "CUSTOMER_SUPPORT",
                                "subject": "string",
                                "category": "Report A Technical Problem",
                                "message": "string",
                                "senderAddress": "string",
                                "senderFirstName": "string",
                                "senderLastName": "string"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Message sent successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InboundCommunicationDTO"
                                },
                                "example": {
                                    "destination": "CUSTOMER_SUPPORT",
                                    "subject": "string",
                                    "category": "Report A Technical Problem",
                                    "message": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Business exception",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server unavailable",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/players/self/inbound-communications": {
            "post": {
                "summary": "Sends notification from authenticated player to lottery system",
                "description": "Sends notification from authenticated player to lottery system",
                "operationId": "receiveInboundCommunicationFromPlayer",
                "requestBody": {
                    "description": "Message defined by a player",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/InboundCommunicationDTO"
                            },
                            "example": {
                                "destination": "CUSTOMER_SUPPORT",
                                "subject": "string",
                                "category": "Report A Technical Problem",
                                "message": "string"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Message sent successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InboundCommunicationDTO"
                                },
                                "example": {
                                    "destination": "CUSTOMER_SUPPORT",
                                    "subject": "string",
                                    "category": "Report A Technical Problem",
                                    "message": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Business exception",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Not Authenticated"
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server unavailable",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/players/self/integration-token/{third-party}": {
            "get": {
                "summary": "Get token",
                "description": "Get third party integration token by third-party application name",
                "operationId": "getIntegrationToken",
                "parameters": [
                    {
                        "name": "third-party",
                        "in": "path",
                        "description": "Third-party application name",
                        "required": true,
                        "schema": {
                            "enum": [
                                "WOF",
                                "ONEPAY",
                                "chat",
                                "POKER",
                                "PLAYER_UPGRADE",
                                "BINGO"
                            ],
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The created token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IntegrationTokenDTO"
                                },
                                "example": {
                                    "id": "string",
                                    "token": "string",
                                    "checkCount": 0,
                                    "validated": true
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "System exception",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "System not available. Retry later",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Validate token",
                "description": "Validation of third party integration token.",
                "operationId": "validateIntegrationToken",
                "parameters": [
                    {
                        "name": "third-party",
                        "in": "path",
                        "description": "Third-party application name",
                        "required": true,
                        "schema": {
                            "enum": [
                                "WOF",
                                "ONEPAY",
                                "chat",
                                "POKER",
                                "PLAYER_UPGRADE",
                                "BINGO"
                            ],
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Token details to be validated",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/IntegrationTokenDTO"
                            },
                            "example": {
                                "id": "string",
                                "token": "string",
                                "checkCount": 0,
                                "validated": true
                            }
                        },
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/IntegrationTokenDTO"
                            },
                            "example": "<IntegrationTokenDTO> <id>string</id> <token>string</token> <checkCount>0</checkCount> <validated>true</validated> </IntegrationTokenDTO>"
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "The verified token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IntegrationTokenDTO"
                                },
                                "example": {
                                    "id": "string",
                                    "token": "string",
                                    "checkCount": 0,
                                    "validated": true
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "System exception",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "System not available. Retry later",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/players/self/limits/{type}": {
            "get": {
                "summary": "Return user's limit",
                "description": "Return user's limit",
                "operationId": "getLimit",
                "parameters": [
                    {
                        "name": "type",
                        "in": "path",
                        "description": "Limit type",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": "DAILY_AMOUNT"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Limit is returned",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LimitDTO"
                                },
                                "example": {
                                    "value": 0,
                                    "valueLeft": 0,
                                    "type": "DAILY_AMOUNT",
                                    "status": "ACTIVE",
                                    "beginTime": 1563109380119,
                                    "freezeEndTime": 1563107380219,
                                    "endTime": 1563107380219,
                                    "currentPeriodBeginTime": 1563107380219,
                                    "currentPeriodEndTime": 1563107380219
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/LimitDTO"
                                },
                                "example": "<LimitDTO> <value>0</value> <valueLeft>0</valueLeft> <type>DAILY_AMOUNT</type> <status>ACTIVE</status> <beginTime>1563109380119</beginTime> <freezeEndTime>1563107380219</freezeEndTime> <endTime>1563107380219</endTime> <currentPeriodBeginTime>1563107380219</currentPeriodBeginTime> <currentPeriodEndTime>1563107380219</currentPeriodEndTime> </LimitDTO>"
                            }
                        }
                    },
                    "400": {
                        "description": "Business exception",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    },
                    "503": {
                        "description": "Server unavailable",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    }
                }
            },
            "put": {
                "summary": "Update user's limit",
                "description": "Update user's limit",
                "operationId": "updateLimit",
                "parameters": [
                    {
                        "name": "type",
                        "in": "path",
                        "description": "Limit type",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": "DAILY_AMOUNT"
                    }
                ],
                "requestBody": {
                    "description": "Object representing the user's limit",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/LimitDTO"
                            },
                            "example": {
                                "value": 0,
                                "valueLeft": 0,
                                "type": "DAILY_AMOUNT",
                                "status": "ACTIVE",
                                "beginTime": 1563109380119,
                                "freezeEndTime": 1563107380219,
                                "endTime": 1563107380219,
                                "currentPeriodBeginTime": 1563107380219,
                                "currentPeriodEndTime": 1563107380219
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Limit updated with no errors",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LimitDTO"
                                },
                                "example": {
                                    "value": 0,
                                    "valueLeft": 0,
                                    "type": "DAILY_AMOUNT",
                                    "status": "ACTIVE",
                                    "beginTime": 1563109380119,
                                    "freezeEndTime": 1563107380219,
                                    "endTime": 1563107380219,
                                    "currentPeriodBeginTime": 1563107380219,
                                    "currentPeriodEndTime": 1563107380219
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/LimitDTO"
                                },
                                "example": "<LimitDTO> <value>0</value> <valueLeft>0</valueLeft> <type>DAILY_AMOUNT</type> <status>ACTIVE</status> <beginTime>1563109380119</beginTime> <freezeEndTime>1563107380219</freezeEndTime> <endTime>1563107380219</endTime> <currentPeriodBeginTime>1563107380219</currentPeriodBeginTime> <currentPeriodEndTime>1563107380219</currentPeriodEndTime> </LimitDTO>"
                            }
                        }
                    },
                    "400": {
                        "description": "Business exception",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    },
                    "503": {
                        "description": "Server unavailable",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Create user's limit",
                "description": "Create user's limit",
                "operationId": "createLimit",
                "parameters": [
                    {
                        "name": "type",
                        "in": "path",
                        "description": "Limit type",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": "DAILY_AMOUNT"
                    }
                ],
                "requestBody": {
                    "description": "Object representing the user's limit",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/LimitDTO"
                            },
                            "example": {
                                "value": 0,
                                "valueLeft": 0,
                                "type": "DAILY_AMOUNT",
                                "status": "ACTIVE",
                                "beginTime": 1563109380119,
                                "freezeEndTime": 1563107380219,
                                "endTime": 1563107380219,
                                "currentPeriodBeginTime": 1563107380219,
                                "currentPeriodEndTime": 1563107380219
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Limit created with no errors",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LimitDTO"
                                },
                                "example": {
                                    "value": 0,
                                    "valueLeft": 0,
                                    "type": "DAILY_AMOUNT",
                                    "status": "ACTIVE",
                                    "beginTime": 1563109380119,
                                    "freezeEndTime": 1563107380219,
                                    "endTime": 1563107380219,
                                    "currentPeriodBeginTime": 1563107380219,
                                    "currentPeriodEndTime": 1563107380219
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/LimitDTO"
                                },
                                "example": "<LimitDTO> <value>0</value> <valueLeft>0</valueLeft> <type>DAILY_AMOUNT</type> <status>ACTIVE</status> <beginTime>1563109380119</beginTime> <freezeEndTime>1563107380219</freezeEndTime> <endTime>1563107380219</endTime> <currentPeriodBeginTime>1563107380219</currentPeriodBeginTime> <currentPeriodEndTime>1563107380219</currentPeriodEndTime> </LimitDTO>"
                            }
                        }
                    },
                    "400": {
                        "description": "Business exception",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    },
                    "503": {
                        "description": "Server unavailable",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete user's limit",
                "description": "Delete user's limit",
                "operationId": "deleteLimit",
                "parameters": [
                    {
                        "name": "type",
                        "in": "path",
                        "description": "Limit type",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": "DAILY_AMOUNT"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Limit deleted"
                    },
                    "400": {
                        "description": "Business exception",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    },
                    "503": {
                        "description": "Server unavailable",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    }
                }
            }
        },
        "/players/self/limits": {
            "get": {
                "summary": "Return user's limits",
                "description": "Return user's limits",
                "operationId": "getLimits",
                "responses": {
                    "200": {
                        "description": "Limit is returned",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/LimitDTO"
                                    }
                                },
                                "example": [
                                    {
                                        "value": 0,
                                        "valueLeft": 0,
                                        "type": "DAILY_AMOUNT",
                                        "status": "ACTIVE",
                                        "beginTime": 1563109380119,
                                        "freezeEndTime": 1563107380219,
                                        "endTime": 1563107380219,
                                        "currentPeriodBeginTime": 1563107380219,
                                        "currentPeriodEndTime": 1563107380219
                                    }
                                ]
                            },
                            "application/xml": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/LimitDTO"
                                    }
                                },
                                "example": "<PlayersSelfLimitsGet200ApplicationXmlResponse> <value>0</value> <valueLeft>0</valueLeft> <type>DAILY_AMOUNT</type> <status>ACTIVE</status> <beginTime>1563109380119</beginTime> <freezeEndTime>1563107380219</freezeEndTime> <endTime>1563107380219</endTime> <currentPeriodBeginTime>1563107380219</currentPeriodBeginTime> <currentPeriodEndTime>1563107380219</currentPeriodEndTime> </PlayersSelfLimitsGet200ApplicationXmlResponse>"
                            }
                        }
                    },
                    "400": {
                        "description": "Business exception",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    },
                    "503": {
                        "description": "Server unavailable",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    }
                }
            },
            "put": {
                "summary": "Create user's limits from the input list",
                "description": "Create user's limits from the input list",
                "operationId": "createLimits",
                "requestBody": {
                    "description": "List of objects representing the user's limit",
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/LimitDTO"
                                }
                            },
                            "example": [
                                {
                                    "value": 0,
                                    "valueLeft": 0,
                                    "type": "DAILY_AMOUNT",
                                    "status": "ACTIVE",
                                    "beginTime": 1563109380119,
                                    "freezeEndTime": 1563107380219,
                                    "endTime": 1563107380219,
                                    "currentPeriodBeginTime": 1563107380219,
                                    "currentPeriodEndTime": 1563107380219
                                }
                            ]
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "List of limits created with no errors",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/LimitDTO"
                                    }
                                },
                                "example": [
                                    {
                                        "value": 0,
                                        "valueLeft": 0,
                                        "type": "DAILY_AMOUNT",
                                        "status": "ACTIVE",
                                        "beginTime": 1563109380119,
                                        "freezeEndTime": 1563107380219,
                                        "endTime": 1563107380219,
                                        "currentPeriodBeginTime": 1563107380219,
                                        "currentPeriodEndTime": 1563107380219
                                    }
                                ]
                            },
                            "application/xml": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/LimitDTO"
                                    }
                                },
                                "example": "<PlayersSelfLimitsPut200ApplicationXmlResponse> <value>0</value> <valueLeft>0</valueLeft> <type>DAILY_AMOUNT</type> <status>ACTIVE</status> <beginTime>1563109380119</beginTime> <freezeEndTime>1563107380219</freezeEndTime> <endTime>1563107380219</endTime> <currentPeriodBeginTime>1563107380219</currentPeriodBeginTime> <currentPeriodEndTime>1563107380219</currentPeriodEndTime> </PlayersSelfLimitsPut200ApplicationXmlResponse>"
                            }
                        }
                    },
                    "400": {
                        "description": "Business exception",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    },
                    "503": {
                        "description": "Server unavailable",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete user's limits",
                "description": "Delete user's limits",
                "operationId": "deleteLimits",
                "responses": {
                    "204": {
                        "description": "Limit deleted"
                    },
                    "400": {
                        "description": "Business exception",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    },
                    "503": {
                        "description": "Server unavailable",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    }
                }
            }
        },
        "/players/self/login": {
            "get": {
                "summary": "Retrieve login information",
                "description": "Returns information about player's log in.",
                "operationId": "getLogin",
                "responses": {
                    "200": {
                        "description": "Login data",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LoginHistoryDTO"
                                },
                                "example": {
                                    "loginDate": "string",
                                    "logoutDate": "string",
                                    "loginId": 53480,
                                    "externalSystemId": 5001,
                                    "ipAddress": "127.0.0.1"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "User not authenticated"
                    },
                    "500": {
                        "description": "System exception"
                    },
                    "503": {
                        "description": "System not available. Retry later"
                    }
                }
            }
        },
        "/players/self/transactions/lottery/{id}": {
            "get": {
                "summary": "Get transaction by ID",
                "description": "Allows to fetch transaction by ID.",
                "operationId": "getTransaction_1",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of requested transaction",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": 12122
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Requested transaction",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LotteryTransactionDTO"
                                },
                                "example": {
                                    "id": "string",
                                    "uuid": "I6-**********-12",
                                    "insertTimestamp": 0,
                                    "type": "application/lotteryTransaction-v1",
                                    "body": "<balanceTransaction> ... </balanceTransaction>",
                                    "forFun": true,
                                    "cdc": 0,
                                    "serial": "string",
                                    "product": 0,
                                    "jurisdiction": 0,
                                    "journalAddress": 0,
                                    "transactionTimeLocal": 0,
                                    "transactionTimeUTC": 0,
                                    "transactionAmount": 0,
                                    "subscriptionId": 0,
                                    "lotteryTransactionType": "string",
                                    "startDrawNumber": 0,
                                    "endDrawNumber": 0,
                                    "globalTransId": "string",
                                    "groupId": "string",
                                    "transactionDiscountAmount": 0,
                                    "freeTicket": false,
                                    "transactionPointAmount": 0,
                                    "currency": "string",
                                    "triggerType": "string",
                                    "transactionVirtualAmount": 0,
                                    "trxLoyaltyPoints": 0,
                                    "betTypeId": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Transaction with requested ID is not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "System exception",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "System not available. Retry later",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/players/self/transactions/lottery": {
            "get": {
                "summary": "Get player transactions",
                "description": "Allows to query player's lottery transactions repository with optional filters. Results pagination is applied.",
                "operationId": "getTransactions_2",
                "parameters": [
                    {
                        "name": "lotteryTransactionType",
                        "in": "query",
                        "description": "Type of lottery transaction",
                        "schema": {
                            "enum": [
                                "CANCELLATION",
                                "WAGER",
                                "VALIDATION"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "name": "productId",
                        "in": "query",
                        "description": "Id of product related with transaction",
                        "schema": {
                            "type": "string"
                        },
                        "example": 9
                    },
                    {
                        "name": "globalTransactionId",
                        "in": "query",
                        "description": "Optional pointer to entity related with transaction like 'Subscription', 'Payment'",
                        "schema": {
                            "type": "string"
                        },
                        "example": "5631c649-648a-4d32-8bdd-5bb89745b452"
                    },
                    {
                        "name": "startDrawNumber",
                        "in": "query",
                        "description": "Minimum number of draw related with transaction",
                        "schema": {
                            "type": "string"
                        },
                        "example": 12
                    },
                    {
                        "name": "endDrawNumber",
                        "in": "query",
                        "description": "Maximum number of draw related with transaction",
                        "schema": {
                            "type": "string"
                        },
                        "example": 12
                    },
                    {
                        "name": "includeBody",
                        "in": "query",
                        "description": "Defines if transactions in response should have 'body' fetch from database. Default value is 'false'",
                        "schema": {
                            "type": "boolean"
                        },
                        "example": "False"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Format - int32. Number of page to be return. ",
                        "schema": {
                            "type": "integer"
                        },
                        "example": 1
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "description": "Format - int32. Amount of records on page to be returned. Defines offset if 'page' greater than 1. ",
                        "schema": {
                            "type": "integer"
                        },
                        "example": 30
                    },
                    {
                        "name": "date-from",
                        "in": "query",
                        "description": "Format - int64. Date in millis. 'date-to' -30d used if not provided ",
                        "schema": {
                            "type": "integer"
                        },
                        "example": 1582633200000
                    },
                    {
                        "name": "date-to",
                        "in": "query",
                        "description": "Format - int64. Date in millis. LocalDate.now() used if not provided.",
                        "schema": {
                            "type": "integer"
                        },
                        "example": 1582633200000
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Lottery transactions list",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LotteryTransactionsPageDTO"
                                },
                                "example": {
                                    "nextPageUrl": "string",
                                    "previousPageUrl": "string",
                                    "pageUrls": {},
                                    "nextItems": 0,
                                    "previousItems": 0,
                                    "transactions": [
                                        {
                                            "id": "string",
                                            "uuid": "I6-**********-12",
                                            "insertTimestamp": 0,
                                            "type": "application/lotteryTransaction-v1",
                                            "body": "<balanceTransaction> ... </balanceTransaction>",
                                            "forFun": true,
                                            "cdc": 0,
                                            "serial": "string",
                                            "product": 0,
                                            "jurisdiction": 0,
                                            "journalAddress": 0,
                                            "transactionTimeLocal": 0,
                                            "transactionTimeUTC": 0,
                                            "transactionAmount": 0,
                                            "subscriptionId": 0,
                                            "lotteryTransactionType": "string",
                                            "startDrawNumber": 0,
                                            "endDrawNumber": 0,
                                            "globalTransId": "string",
                                            "groupId": "string",
                                            "transactionDiscountAmount": 0,
                                            "freeTicket": false,
                                            "transactionPointAmount": 0,
                                            "currency": "string",
                                            "triggerType": "string",
                                            "transactionVirtualAmount": 0,
                                            "trxLoyaltyPoints": 0,
                                            "betTypeId": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "System exception",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "System not available. Retry later",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/players/self/nonpublic-personal-info": {
            "put": {
                "summary": "Update non-public personal information",
                "description": "Updates user's non-public personal information.",
                "operationId": "updateNonpublicPersonalInfo",
                "requestBody": {
                    "description": "Non-public personal information to be updated",
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/NonpublicPersonalInfoDTO"
                                }
                            },
                            "example": [
                                {
                                    "dateOfBirth": 0,
                                    "feinNumber": "<feinNumber>",
                                    "identificationNumber": "<identificationNumber>",
                                    "identificationIssuer": "<identificationIssuer>",
                                    "socialSecurityNumber": "<socialSecurityNumber>"
                                }
                            ]
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Non-public personal information updated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NonpublicPersonalInfoDTO"
                                },
                                "example": {
                                    "dateOfBirth": 0,
                                    "feinNumber": "<feinNumber>",
                                    "identificationNumber": "<identificationNumber>",
                                    "identificationIssuer": "<identificationIssuer>",
                                    "socialSecurityNumber": "<socialSecurityNumber>"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/NonpublicPersonalInfoDTO"
                                },
                                "example": "<NonpublicPersonalInfoDTO> <dateOfBirth>0</dateOfBirth> <feinNumber>&lt;feinNumber&gt;</feinNumber> <identificationNumber>&lt;identificationNumber&gt;</identificationNumber> <identificationIssuer>&lt;identificationIssuer&gt;</identificationIssuer> <socialSecurityNumber>&lt;socialSecurityNumber&gt;</socialSecurityNumber> </NonpublicPersonalInfoDTO>"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "User not authenticated"
                    },
                    "500": {
                        "description": "System exception"
                    },
                    "503": {
                        "description": "System not available. Retry later"
                    }
                }
            }
        },
        "/players/self/notifications-preferences": {
            "get": {
                "summary": "Retrieve notification preferences",
                "description": "Retrieve notification preferences",
                "operationId": "getAllNotificationPreferences",
                "responses": {
                    "200": {
                        "description": "Notification preferences successfully retrieved",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotificationPreferencesDTO"
                                },
                                "example": {
                                    "id": "string",
                                    "eventType": "string",
                                    "channels": {
                                        "PUSH_CLIENT": {
                                            "type": "PUSH_CLIENT",
                                            "contactIDs": [
                                                "string"
                                            ],
                                            "enabled": true,
                                            "preferred": true
                                        },
                                        "SMS": {
                                            "type": "PUSH_CLIENT",
                                            "contactIDs": [
                                                "string"
                                            ],
                                            "enabled": true,
                                            "preferred": true
                                        },
                                        "EMAIL": {
                                            "type": "PUSH_CLIENT",
                                            "contactIDs": [
                                                "string"
                                            ],
                                            "enabled": true,
                                            "preferred": true
                                        },
                                        "PLAYER_PORTAL": {
                                            "type": "PUSH_CLIENT",
                                            "contactIDs": [
                                                "string"
                                            ],
                                            "enabled": true,
                                            "preferred": true
                                        }
                                    },
                                    "eventPreferences": {},
                                    "notificationType": "MAINTENANCE",
                                    "required": true
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotificationPreferencesDTO"
                                },
                                "example": "<NotificationPreferencesDTO> <id>string</id> <eventType>string</eventType> <channels> <PUSH_CLIENT> <type>PUSH_CLIENT</type> <contactIDs>string</contactIDs> <enabled>true</enabled> <preferred>true</preferred> </PUSH_CLIENT> <SMS> <type>PUSH_CLIENT</type> <contactIDs>string</contactIDs> <enabled>true</enabled> <preferred>true</preferred> </SMS> <EMAIL> <type>PUSH_CLIENT</type> <contactIDs>string</contactIDs> <enabled>true</enabled> <preferred>true</preferred> </EMAIL> <PLAYER_PORTAL> <type>PUSH_CLIENT</type> <contactIDs>string</contactIDs> <enabled>true</enabled> <preferred>true</preferred> </PLAYER_PORTAL> </channels> <eventPreferences /> <notificationType>MAINTENANCE</notificationType> <required>true</required> </NotificationPreferencesDTO>"
                            }
                        }
                    },
                    "400": {
                        "description": "Business exception",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    },
                    "401": {
                        "description": "Not Authenticated"
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    },
                    "503": {
                        "description": "Server unavailable",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    }
                }
            },
            "put": {
                "summary": "Update notification preferences",
                "description": "Update notification preferences",
                "operationId": "updateNotificationPreferences",
                "requestBody": {
                    "description": "Notification preferences update request",
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/NotificationPreferencesDTO"
                                }
                            },
                            "example": [
                                {
                                    "id": "string",
                                    "eventType": "string",
                                    "channels": {
                                        "PUSH_CLIENT": {
                                            "type": "PUSH_CLIENT",
                                            "contactIDs": [
                                                "string"
                                            ],
                                            "enabled": true,
                                            "preferred": true
                                        },
                                        "SMS": {
                                            "type": "PUSH_CLIENT",
                                            "contactIDs": [
                                                "string"
                                            ],
                                            "enabled": true,
                                            "preferred": true
                                        },
                                        "EMAIL": {
                                            "type": "PUSH_CLIENT",
                                            "contactIDs": [
                                                "string"
                                            ],
                                            "enabled": true,
                                            "preferred": true
                                        },
                                        "PLAYER_PORTAL": {
                                            "type": "PUSH_CLIENT",
                                            "contactIDs": [
                                                "string"
                                            ],
                                            "enabled": true,
                                            "preferred": true
                                        }
                                    },
                                    "eventPreferences": {},
                                    "notificationType": "MAINTENANCE",
                                    "required": true
                                }
                            ]
                        },
                        "application/xml": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/NotificationPreferencesDTO"
                                }
                            },
                            "example": "<PlayersSelfNotifications-preferencesPutRequest-1> <id>string</id> <eventType>string</eventType> <channels> <PUSH_CLIENT> <type>PUSH_CLIENT</type> <contactIDs>string</contactIDs> <enabled>true</enabled> <preferred>true</preferred> </PUSH_CLIENT> <SMS> <type>PUSH_CLIENT</type> <contactIDs>string</contactIDs> <enabled>true</enabled> <preferred>true</preferred> </SMS> <EMAIL> <type>PUSH_CLIENT</type> <contactIDs>string</contactIDs> <enabled>true</enabled> <preferred>true</preferred> </EMAIL> <PLAYER_PORTAL> <type>PUSH_CLIENT</type> <contactIDs>string</contactIDs> <enabled>true</enabled> <preferred>true</preferred> </PLAYER_PORTAL> </channels> <eventPreferences /> <notificationType>MAINTENANCE</notificationType> <required>true</required> </PlayersSelfNotifications-preferencesPutRequest-1>"
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Notification preferences updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotificationPreferencesDTO"
                                },
                                "example": {
                                    "id": "string",
                                    "eventType": "string",
                                    "channels": {
                                        "PUSH_CLIENT": {
                                            "type": "PUSH_CLIENT",
                                            "contactIDs": [
                                                "string"
                                            ],
                                            "enabled": true,
                                            "preferred": true
                                        },
                                        "SMS": {
                                            "type": "PUSH_CLIENT",
                                            "contactIDs": [
                                                "string"
                                            ],
                                            "enabled": true,
                                            "preferred": true
                                        },
                                        "EMAIL": {
                                            "type": "PUSH_CLIENT",
                                            "contactIDs": [
                                                "string"
                                            ],
                                            "enabled": true,
                                            "preferred": true
                                        },
                                        "PLAYER_PORTAL": {
                                            "type": "PUSH_CLIENT",
                                            "contactIDs": [
                                                "string"
                                            ],
                                            "enabled": true,
                                            "preferred": true
                                        }
                                    },
                                    "eventPreferences": {},
                                    "notificationType": "MAINTENANCE",
                                    "required": true
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotificationPreferencesDTO"
                                },
                                "example": "<NotificationPreferencesDTO> <id>string</id> <eventType>string</eventType> <channels> <PUSH_CLIENT> <type>PUSH_CLIENT</type> <contactIDs>string</contactIDs> <enabled>true</enabled> <preferred>true</preferred> </PUSH_CLIENT> <SMS> <type>PUSH_CLIENT</type> <contactIDs>string</contactIDs> <enabled>true</enabled> <preferred>true</preferred> </SMS> <EMAIL> <type>PUSH_CLIENT</type> <contactIDs>string</contactIDs> <enabled>true</enabled> <preferred>true</preferred> </EMAIL> <PLAYER_PORTAL> <type>PUSH_CLIENT</type> <contactIDs>string</contactIDs> <enabled>true</enabled> <preferred>true</preferred> </PLAYER_PORTAL> </channels> <eventPreferences /> <notificationType>MAINTENANCE</notificationType> <required>true</required> </NotificationPreferencesDTO>"
                            }
                        }
                    },
                    "400": {
                        "description": "Business exception",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    },
                    "401": {
                        "description": "Not Authenticated"
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    },
                    "503": {
                        "description": "Server unavailable",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    }
                }
            }
        },
        "/players/self/notifications-preferences/{eventType}": {
            "get": {
                "summary": "Retrieve notification preferences for event",
                "description": "Retrieves notification preferences for a given event (event means notification/message)",
                "operationId": "getNotificationPreferences",
                "parameters": [
                    {
                        "name": "eventType",
                        "in": "path",
                        "description": "Event type",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Notification preferences for a given event successfully retrieved",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotificationPreferencesDTO"
                                },
                                "example": {
                                    "id": "string",
                                    "eventType": "string",
                                    "channels": {
                                        "PUSH_CLIENT": {
                                            "type": "PUSH_CLIENT",
                                            "contactIDs": [
                                                "string"
                                            ],
                                            "enabled": true,
                                            "preferred": true
                                        },
                                        "SMS": {
                                            "type": "PUSH_CLIENT",
                                            "contactIDs": [
                                                "string"
                                            ],
                                            "enabled": true,
                                            "preferred": true
                                        },
                                        "EMAIL": {
                                            "type": "PUSH_CLIENT",
                                            "contactIDs": [
                                                "string"
                                            ],
                                            "enabled": true,
                                            "preferred": true
                                        },
                                        "PLAYER_PORTAL": {
                                            "type": "PUSH_CLIENT",
                                            "contactIDs": [
                                                "string"
                                            ],
                                            "enabled": true,
                                            "preferred": true
                                        }
                                    },
                                    "eventPreferences": {},
                                    "notificationType": "MAINTENANCE",
                                    "required": true
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotificationPreferencesDTO"
                                },
                                "example": "<NotificationPreferencesDTO> <id>string</id> <eventType>string</eventType> <channels> <PUSH_CLIENT> <type>PUSH_CLIENT</type> <contactIDs>string</contactIDs> <enabled>true</enabled> <preferred>true</preferred> </PUSH_CLIENT> <SMS> <type>PUSH_CLIENT</type> <contactIDs>string</contactIDs> <enabled>true</enabled> <preferred>true</preferred> </SMS> <EMAIL> <type>PUSH_CLIENT</type> <contactIDs>string</contactIDs> <enabled>true</enabled> <preferred>true</preferred> </EMAIL> <PLAYER_PORTAL> <type>PUSH_CLIENT</type> <contactIDs>string</contactIDs> <enabled>true</enabled> <preferred>true</preferred> </PLAYER_PORTAL> </channels> <eventPreferences /> <notificationType>MAINTENANCE</notificationType> <required>true</required> </NotificationPreferencesDTO>"
                            }
                        }
                    },
                    "400": {
                        "description": "Business exception",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    },
                    "401": {
                        "description": "Not Authenticated"
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    },
                    "503": {
                        "description": "Server unavailable",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    }
                }
            }
        },
        "/players/self/notifications": {
            "get": {
                "summary": "Fetches list of notifications",
                "description": "Fetches list of notifications according to filtering parameters, note that NotificationDTO.body will not be returned for performance reasons",
                "operationId": "getNotifications",
                "parameters": [
                    {
                        "name": "date-from",
                        "in": "query",
                        "description": "Format - int64. UTC date in millis. 'date-to' -30d used if not provided ",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "date-to",
                        "in": "query",
                        "description": "Format - int64. UTC date in millis. Current UTC time is used if not provided.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "types",
                        "in": "query",
                        "description": "Notification types to fetch",
                        "schema": {
                            "type": "string",
                            "default": "null"
                        }
                    },
                    {
                        "name": "sort-by",
                        "in": "query",
                        "description": "Property name that should be used to sort the results",
                        "schema": {
                            "type": "string",
                            "default": "date"
                        }
                    },
                    {
                        "name": "sort-ascending",
                        "in": "query",
                        "description": "Indicates sort order. ",
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "description": "Format - int32. Amount of records to be returned. Defines offset if 'page' greater than 1. ",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "channel",
                        "in": "query",
                        "description": "Notification channels for which notifications should be fetched",
                        "schema": {
                            "enum": [
                                "PUSH_CLIENT",
                                "SMS",
                                "EMAIL",
                                "PLAYER_PORTAL",
                                "PAPER_CHANNEL"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "name": "device-key",
                        "in": "query",
                        "description": "Device key for which notifications should be fetched",
                        "schema": {
                            "type": "string",
                            "default": "null"
                        }
                    },
                    {
                        "name": "read",
                        "in": "query",
                        "description": "If message is marked as read",
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    {
                        "name": "priority",
                        "in": "query",
                        "description": "Return messages with provided priority",
                        "schema": {
                            "type": "string",
                            "default": "0"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Notifications list successfully retrieved",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotificationDTO"
                                },
                                "example": {
                                    "status": "Delivered",
                                    "channel": "EMAIL_CHANNEL",
                                    "parameters": {},
                                    "id": "EventDetectorResultsEuro JackpotD3:::EMAIL_CHANNEL:::1",
                                    "type": "ContactActivationMail",
                                    "date": 1583412960000,
                                    "destinationAddress": "string",
                                    "subject": "string",
                                    "body": "string",
                                    "from": "string",
                                    "priority": "0",
                                    "read": false,
                                    "deviceKey": "1",
                                    "externalId": "EventDetectorResultsEuro JackpotD3"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotificationDTO"
                                },
                                "example": "<NotificationDTO> <status>Delivered</status> <channel>EMAIL_CHANNEL</channel> <parameters /> <id>EventDetectorResultsEuro JackpotD3:::EMAIL_CHANNEL:::1</id> <type>ContactActivationMail</type> <date>1583412960000</date> <destinationAddress>string</destinationAddress> <subject>string</subject> <body>string</body> <from>string</from> <priority>0</priority> <read>False</read> <deviceKey>1</deviceKey> <externalId>EventDetectorResultsEuro JackpotD3</externalId> </NotificationDTO>"
                            }
                        }
                    },
                    "400": {
                        "description": "Business exception",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    },
                    "401": {
                        "description": "Not Authenticated"
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    },
                    "503": {
                        "description": "Server unavailable",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    }
                }
            },
            "put": {
                "summary": "Updates notifications",
                "description": "Updates notifications only NotificationDTO.read flag can be updated in baseline implementation",
                "operationId": "updateNotifications",
                "requestBody": {
                    "description": "Player notifications update request",
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/NotificationDTO"
                                }
                            },
                            "example": [
                                {
                                    "status": "Delivered",
                                    "channel": "EMAIL_CHANNEL",
                                    "parameters": {},
                                    "id": "EventDetectorResultsEuro JackpotD3:::EMAIL_CHANNEL:::1",
                                    "type": "ContactActivationMail",
                                    "date": 1583412960000,
                                    "destinationAddress": "string",
                                    "subject": "string",
                                    "body": "string",
                                    "from": "string",
                                    "priority": "0",
                                    "read": false,
                                    "deviceKey": "1",
                                    "externalId": "EventDetectorResultsEuro JackpotD3"
                                }
                            ]
                        },
                        "application/xml": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/NotificationDTO"
                                }
                            },
                            "example": "<PlayersSelfNotificationsPutRequest-1> <status>Delivered</status> <channel>EMAIL_CHANNEL</channel> <parameters /> <id>EventDetectorResultsEuro JackpotD3:::EMAIL_CHANNEL:::1</id> <type>ContactActivationMail</type> <date>1583412960000</date> <destinationAddress>string</destinationAddress> <subject>string</subject> <body>string</body> <from>string</from> <priority>0</priority> <read>False</read> <deviceKey>1</deviceKey> <externalId>EventDetectorResultsEuro JackpotD3</externalId> </PlayersSelfNotificationsPutRequest-1>"
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful notification update",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotificationDTO"
                                },
                                "example": {
                                    "status": "Delivered",
                                    "channel": "EMAIL_CHANNEL",
                                    "parameters": {},
                                    "id": "EventDetectorResultsEuro JackpotD3:::EMAIL_CHANNEL:::1",
                                    "type": "ContactActivationMail",
                                    "date": 1583412960000,
                                    "destinationAddress": "string",
                                    "subject": "string",
                                    "body": "string",
                                    "from": "string",
                                    "priority": "0",
                                    "read": false,
                                    "deviceKey": "1",
                                    "externalId": "EventDetectorResultsEuro JackpotD3"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotificationDTO"
                                },
                                "example": "<NotificationDTO> <status>Delivered</status> <channel>EMAIL_CHANNEL</channel> <parameters /> <id>EventDetectorResultsEuro JackpotD3:::EMAIL_CHANNEL:::1</id> <type>ContactActivationMail</type> <date>1583412960000</date> <destinationAddress>string</destinationAddress> <subject>string</subject> <body>string</body> <from>string</from> <priority>0</priority> <read>False</read> <deviceKey>1</deviceKey> <externalId>EventDetectorResultsEuro JackpotD3</externalId> </NotificationDTO>"
                            }
                        }
                    },
                    "400": {
                        "description": "Business exception",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    },
                    "401": {
                        "description": "Not Authenticated"
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    },
                    "503": {
                        "description": "Server unavailable",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    }
                }
            }
        },
        "/players/self/notifications/{id}": {
            "get": {
                "summary": "Fetches a single notification",
                "description": "Fetches a single notification notification NotificationDTO.body will be returned with all other details",
                "operationId": "getNotification",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Unique notification identifier",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": "EventDetectorResultsEuro JackpotD3:::EMAIL_CHANNEL:::1"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Notification successfully retrieved",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotificationDTO"
                                },
                                "example": {
                                    "status": "Delivered",
                                    "channel": "EMAIL_CHANNEL",
                                    "parameters": {},
                                    "id": "EventDetectorResultsEuro JackpotD3:::EMAIL_CHANNEL:::1",
                                    "type": "ContactActivationMail",
                                    "date": 1583412960000,
                                    "destinationAddress": "string",
                                    "subject": "string",
                                    "body": "string",
                                    "from": "string",
                                    "priority": "0",
                                    "read": false,
                                    "deviceKey": "1",
                                    "externalId": "EventDetectorResultsEuro JackpotD3"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotificationDTO"
                                },
                                "example": "<NotificationDTO> <status>Delivered</status> <channel>EMAIL_CHANNEL</channel> <parameters /> <id>EventDetectorResultsEuro JackpotD3:::EMAIL_CHANNEL:::1</id> <type>ContactActivationMail</type> <date>1583412960000</date> <destinationAddress>string</destinationAddress> <subject>string</subject> <body>string</body> <from>string</from> <priority>0</priority> <read>False</read> <deviceKey>1</deviceKey> <externalId>EventDetectorResultsEuro JackpotD3</externalId> </NotificationDTO>"
                            }
                        }
                    },
                    "400": {
                        "description": "Business exception",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    },
                    "401": {
                        "description": "Not Authenticated"
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    },
                    "503": {
                        "description": "Server unavailable",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    }
                }
            },
            "put": {
                "summary": "Updates notification",
                "description": "Updates notifications, only NotificationDTO.read flag can be updated in baseline implementation",
                "operationId": "updateNotification",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Unique notification identifier",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": "EventDetectorResultsEuro JackpotD3:::EMAIL_CHANNEL:::1"
                    }
                ],
                "requestBody": {
                    "description": "Player notification update request",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/NotificationDTO"
                            },
                            "example": {
                                "status": "Delivered",
                                "channel": "EMAIL_CHANNEL",
                                "parameters": {},
                                "id": "EventDetectorResultsEuro JackpotD3:::EMAIL_CHANNEL:::1",
                                "type": "ContactActivationMail",
                                "date": 1583412960000,
                                "destinationAddress": "string",
                                "subject": "string",
                                "body": "string",
                                "from": "string",
                                "priority": "0",
                                "read": false,
                                "deviceKey": "1",
                                "externalId": "EventDetectorResultsEuro JackpotD3"
                            }
                        },
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/NotificationDTO"
                            },
                            "example": "<NotificationDTO> <status>Delivered</status> <channel>EMAIL_CHANNEL</channel> <parameters /> <id>EventDetectorResultsEuro JackpotD3:::EMAIL_CHANNEL:::1</id> <type>ContactActivationMail</type> <date>1583412960000</date> <destinationAddress>string</destinationAddress> <subject>string</subject> <body>string</body> <from>string</from> <priority>0</priority> <read>False</read> <deviceKey>1</deviceKey> <externalId>EventDetectorResultsEuro JackpotD3</externalId> </NotificationDTO>"
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful notification read flag update",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotificationDTO"
                                },
                                "example": {
                                    "status": "Delivered",
                                    "channel": "EMAIL_CHANNEL",
                                    "parameters": {},
                                    "id": "EventDetectorResultsEuro JackpotD3:::EMAIL_CHANNEL:::1",
                                    "type": "ContactActivationMail",
                                    "date": 1583412960000,
                                    "destinationAddress": "string",
                                    "subject": "string",
                                    "body": "string",
                                    "from": "string",
                                    "priority": "0",
                                    "read": false,
                                    "deviceKey": "1",
                                    "externalId": "EventDetectorResultsEuro JackpotD3"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotificationDTO"
                                },
                                "example": "<NotificationDTO> <status>Delivered</status> <channel>EMAIL_CHANNEL</channel> <parameters /> <id>EventDetectorResultsEuro JackpotD3:::EMAIL_CHANNEL:::1</id> <type>ContactActivationMail</type> <date>1583412960000</date> <destinationAddress>string</destinationAddress> <subject>string</subject> <body>string</body> <from>string</from> <priority>0</priority> <read>False</read> <deviceKey>1</deviceKey> <externalId>EventDetectorResultsEuro JackpotD3</externalId> </NotificationDTO>"
                            }
                        }
                    },
                    "400": {
                        "description": "Business exception",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    },
                    "401": {
                        "description": "Not Authenticated"
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    },
                    "503": {
                        "description": "Server unavailable",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Deletes user's notification",
                "description": "Deletes (in fact, hides) players's notification so it is no longer visible for players.",
                "operationId": "deleteNotification",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Unique notification identifier",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": "EventDetectorResultsEuro JackpotD3:::EMAIL_CHANNEL:::1"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Notification successfully marked as hidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotificationDTO"
                                },
                                "example": {
                                    "status": "Delivered",
                                    "channel": "EMAIL_CHANNEL",
                                    "parameters": {},
                                    "id": "EventDetectorResultsEuro JackpotD3:::EMAIL_CHANNEL:::1",
                                    "type": "ContactActivationMail",
                                    "date": 1583412960000,
                                    "destinationAddress": "string",
                                    "subject": "string",
                                    "body": "string",
                                    "from": "string",
                                    "priority": "0",
                                    "read": false,
                                    "deviceKey": "1",
                                    "externalId": "EventDetectorResultsEuro JackpotD3"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotificationDTO"
                                },
                                "example": "<NotificationDTO> <status>Delivered</status> <channel>EMAIL_CHANNEL</channel> <parameters /> <id>EventDetectorResultsEuro JackpotD3:::EMAIL_CHANNEL:::1</id> <type>ContactActivationMail</type> <date>1583412960000</date> <destinationAddress>string</destinationAddress> <subject>string</subject> <body>string</body> <from>string</from> <priority>0</priority> <read>False</read> <deviceKey>1</deviceKey> <externalId>EventDetectorResultsEuro JackpotD3</externalId> </NotificationDTO>"
                            }
                        }
                    },
                    "400": {
                        "description": "Business exception",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    },
                    "401": {
                        "description": "Not Authenticated"
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    },
                    "503": {
                        "description": "Server unavailable",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    }
                }
            }
        },
        "/players/forgotten-password": {
            "put": {
                "summary": "Verify hints",
                "description": "Verifies hints and allows to reset password in the consequence with generated token",
                "operationId": "forgottenPassword",
                "requestBody": {
                    "description": "Object representing the user's password hints",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PasswordForgottenDTO"
                            },
                            "example": {
                                "emailAddress": "string",
                                "securityAnswer": {
                                    "id": "string",
                                    "answer": "string"
                                },
                                "firstName": "string",
                                "lastName": "string",
                                "forgottenCredentialType": "USERID"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "Password changed with no errors",
                        "content": {
                            "application/json": {},
                            "application/xml": {}
                        }
                    },
                    "400": {
                        "description": "Business exception",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    },
                    "503": {
                        "description": "Server unavailable",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    }
                }
            }
        },
        "/players/self/password": {
            "put": {
                "summary": "Change user's password",
                "description": "Change user's password",
                "operationId": "updatePassword",
                "requestBody": {
                    "description": "Object representing the user's password",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PasswordDTO"
                            },
                            "example": {
                                "oldPassword": "string",
                                "newPassword": "string"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "Password changed with no errors",
                        "content": {
                            "application/json": {},
                            "application/xml": {}
                        }
                    },
                    "400": {
                        "description": "Business exception",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    },
                    "503": {
                        "description": "Server unavailable",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    }
                }
            }
        },
        "/players/reset-password": {
            "put": {
                "summary": "Reset user's password",
                "description": "Reset user's password",
                "operationId": "resetPassword",
                "requestBody": {
                    "description": "Object representing the user's password",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PasswordResetDTO"
                            },
                            "example": {
                                "oneTimeToken": "string",
                                "newPassword": "string"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "Password changed with no errors"
                    },
                    "400": {
                        "description": "Business exception",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    },
                    "503": {
                        "description": "Server unavailable",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    }
                }
            }
        },
        "/players/self/personal-info": {
            "get": {
                "summary": "Get user's profile information",
                "description": "Allows to get user's profile information.",
                "operationId": "getPersonalInfo",
                "responses": {
                    "200": {
                        "description": "Personal information",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PersonalInfoDTO"
                                },
                                "example": {
                                    "firstName": "string",
                                    "middleName": "string",
                                    "lastName": "string",
                                    "prefix": "string",
                                    "suffix": "string",
                                    "gender": "MALE",
                                    "salutation": "Welcome",
                                    "kyc": {
                                        "status": 0,
                                        "attemptsLeft": 0
                                    },
                                    "addresses": {
                                        "HOME": {
                                            "address1": "string",
                                            "address2": "string",
                                            "address3": "string",
                                            "region": "string"
                                        },
                                        "BUSINESS": {
                                            "address1": "string",
                                            "address2": "string",
                                            "address3": "string",
                                            "region": "string"
                                        },
                                        "CONTACT": {
                                            "address1": "string",
                                            "address2": "string",
                                            "address3": "string",
                                            "region": "string"
                                        },
                                        "BILLING": {
                                            "address1": "string",
                                            "address2": "string",
                                            "address3": "string",
                                            "region": "string"
                                        },
                                        "MAILING": {
                                            "address1": "string",
                                            "address2": "string",
                                            "address3": "string",
                                            "region": "string"
                                        }
                                    },
                                    "phones": {
                                        "HOME": {
                                            "type": "HOME",
                                            "number": "string",
                                            "extension": "string",
                                            "provider": "string"
                                        },
                                        "BUSINESS": {
                                            "type": "HOME",
                                            "number": "string",
                                            "extension": "string",
                                            "provider": "string"
                                        },
                                        "MOBILE": {
                                            "type": "HOME",
                                            "number": "string",
                                            "extension": "string",
                                            "provider": "string"
                                        },
                                        "LANDLINE": {
                                            "type": "HOME",
                                            "number": "string",
                                            "extension": "string",
                                            "provider": "string"
                                        }
                                    },
                                    "emails": {
                                        "PERSONAL": {
                                            "type": "PERSONAL",
                                            "address": "string",
                                            "verified": true
                                        },
                                        "BUSINESS": {
                                            "type": "PERSONAL",
                                            "address": "string",
                                            "verified": true
                                        }
                                    },
                                    "pushClients": {
                                        "PUSH_CLIENT_1": {
                                            "id": "string",
                                            "type": "ANDROID",
                                            "externalClientId": "string",
                                            "name": "string"
                                        },
                                        "PUSH_CLIENT_2": {
                                            "id": "string",
                                            "type": "ANDROID",
                                            "externalClientId": "string",
                                            "name": "string"
                                        },
                                        "PUSH_CLIENT_3": {
                                            "id": "string",
                                            "type": "ANDROID",
                                            "externalClientId": "string",
                                            "name": "string"
                                        },
                                        "PUSH_CLIENT_4": {
                                            "id": "string",
                                            "type": "ANDROID",
                                            "externalClientId": "string",
                                            "name": "string"
                                        },
                                        "PUSH_CLIENT_5": {
                                            "id": "string",
                                            "type": "ANDROID",
                                            "externalClientId": "string",
                                            "name": "string"
                                        },
                                        "PUSH_CLIENT_6": {
                                            "id": "string",
                                            "type": "ANDROID",
                                            "externalClientId": "string",
                                            "name": "string"
                                        },
                                        "PUSH_CLIENT_7": {
                                            "id": "string",
                                            "type": "ANDROID",
                                            "externalClientId": "string",
                                            "name": "string"
                                        },
                                        "PUSH_CLIENT_8": {
                                            "id": "string",
                                            "type": "ANDROID",
                                            "externalClientId": "string",
                                            "name": "string"
                                        },
                                        "PUSH_CLIENT_9": {
                                            "id": "string",
                                            "type": "ANDROID",
                                            "externalClientId": "string",
                                            "name": "string"
                                        },
                                        "PUSH_CLIENT_10": {
                                            "id": "string",
                                            "type": "ANDROID",
                                            "externalClientId": "string",
                                            "name": "string"
                                        }
                                    },
                                    "citizenship": "string",
                                    "passwordHints": [
                                        {
                                            "securityQuestion": {
                                                "id": "string",
                                                "question": "string"
                                            },
                                            "securityAnswer": {
                                                "id": "string",
                                                "answer": "string"
                                            }
                                        }
                                    ],
                                    "dateOfBirth": 0
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/PersonalInfoDTO"
                                },
                                "example": "<PersonalInfoDTO> <firstName>string</firstName> <middleName>string</middleName> <lastName>string</lastName> <prefix>string</prefix> <suffix>string</suffix> <gender>MALE</gender> <salutation>Welcome</salutation> <kyc> <status>0</status> <attemptsLeft>0</attemptsLeft> </kyc> <addresses> <HOME> <address1>string</address1> <address2>string</address2> <address3>string</address3> <region>string</region> </HOME> <BUSINESS> <address1>string</address1> <address2>string</address2> <address3>string</address3> <region>string</region> </BUSINESS> <CONTACT> <address1>string</address1> <address2>string</address2> <address3>string</address3> <region>string</region> </CONTACT> <BILLING> <address1>string</address1> <address2>string</address2> <address3>string</address3> <region>string</region> </BILLING> <MAILING> <address1>string</address1> <address2>string</address2> <address3>string</address3> <region>string</region> </MAILING> </addresses> <phones> <HOME> <type>HOME</type> <number>string</number> <extension>string</extension> <provider>string</provider> </HOME> <BUSINESS> <type>HOME</type> <number>string</number> <extension>string</extension> <provider>string</provider> </BUSINESS> <MOBILE> <type>HOME</type> <number>string</number> <extension>string</extension> <provider>string</provider> </MOBILE> <LANDLINE> <type>HOME</type> <number>string</number> <extension>string</extension> <provider>string</provider> </LANDLINE> </phones> <emails> <PERSONAL> <type>PERSONAL</type> <address>string</address> <verified>true</verified> </PERSONAL> <BUSINESS> <type>PERSONAL</type> <address>string</address> <verified>true</verified> </BUSINESS> </emails> <pushClients> <PUSH_CLIENT_1> <id>string</id> <type>ANDROID</type> <externalClientId>string</externalClientId> <name>string</name> </PUSH_CLIENT_1> <PUSH_CLIENT_2> <id>string</id> <type>ANDROID</type> <externalClientId>string</externalClientId> <name>string</name> </PUSH_CLIENT_2> <PUSH_CLIENT_3> <id>string</id> <type>ANDROID</type> <externalClientId>string</externalClientId> <name>string</name> </PUSH_CLIENT_3> <PUSH_CLIENT_4> <id>string</id> <type>ANDROID</type> <externalClientId>string</externalClientId> <name>string</name> </PUSH_CLIENT_4> <PUSH_CLIENT_5> <id>string</id> <type>ANDROID</type> <externalClientId>string</externalClientId> <name>string</name> </PUSH_CLIENT_5> <PUSH_CLIENT_6> <id>string</id> <type>ANDROID</type> <externalClientId>string</externalClientId> <name>string</name> </PUSH_CLIENT_6> <PUSH_CLIENT_7> <id>string</id> <type>ANDROID</type> <externalClientId>string</externalClientId> <name>string</name> </PUSH_CLIENT_7> <PUSH_CLIENT_8> <id>string</id> <type>ANDROID</type> <externalClientId>string</externalClientId> <name>string</name> </PUSH_CLIENT_8> <PUSH_CLIENT_9> <id>string</id> <type>ANDROID</type> <externalClientId>string</externalClientId> <name>string</name> </PUSH_CLIENT_9> <PUSH_CLIENT_10> <id>string</id> <type>ANDROID</type> <externalClientId>string</externalClientId> <name>string</name> </PUSH_CLIENT_10> </pushClients> <citizenship>string</citizenship> <passwordHints> <securityQuestion> <id>string</id> <question>string</question> </securityQuestion> <securityAnswer> <id>string</id> <answer>string</answer> </securityAnswer> </passwordHints> <dateOfBirth>0</dateOfBirth> </PersonalInfoDTO>"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    },
                    "500": {
                        "description": "System exception",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    },
                    "503": {
                        "description": "System not available. Retry later",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    }
                }
            },
            "put": {
                "summary": "Update user's profile information",
                "description": "Updates user's personal information",
                "operationId": "updatePersonalInfo",
                "requestBody": {
                    "description": "Personal information to store",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PersonalInfoDTO"
                            },
                            "example": {
                                "firstName": "string",
                                "middleName": "string",
                                "lastName": "string",
                                "prefix": "string",
                                "suffix": "string",
                                "gender": "MALE",
                                "salutation": "Welcome",
                                "kyc": {
                                    "status": 0,
                                    "attemptsLeft": 0
                                },
                                "addresses": {
                                    "HOME": {
                                        "address1": "string",
                                        "address2": "string",
                                        "address3": "string",
                                        "region": "string"
                                    },
                                    "BUSINESS": {
                                        "address1": "string",
                                        "address2": "string",
                                        "address3": "string",
                                        "region": "string"
                                    },
                                    "CONTACT": {
                                        "address1": "string",
                                        "address2": "string",
                                        "address3": "string",
                                        "region": "string"
                                    },
                                    "BILLING": {
                                        "address1": "string",
                                        "address2": "string",
                                        "address3": "string",
                                        "region": "string"
                                    },
                                    "MAILING": {
                                        "address1": "string",
                                        "address2": "string",
                                        "address3": "string",
                                        "region": "string"
                                    }
                                },
                                "phones": {
                                    "HOME": {
                                        "type": "HOME",
                                        "number": "string",
                                        "extension": "string",
                                        "provider": "string"
                                    },
                                    "BUSINESS": {
                                        "type": "HOME",
                                        "number": "string",
                                        "extension": "string",
                                        "provider": "string"
                                    },
                                    "MOBILE": {
                                        "type": "HOME",
                                        "number": "string",
                                        "extension": "string",
                                        "provider": "string"
                                    },
                                    "LANDLINE": {
                                        "type": "HOME",
                                        "number": "string",
                                        "extension": "string",
                                        "provider": "string"
                                    }
                                },
                                "emails": {
                                    "PERSONAL": {
                                        "type": "PERSONAL",
                                        "address": "string",
                                        "verified": true
                                    },
                                    "BUSINESS": {
                                        "type": "PERSONAL",
                                        "address": "string",
                                        "verified": true
                                    }
                                },
                                "pushClients": {
                                    "PUSH_CLIENT_1": {
                                        "id": "string",
                                        "type": "ANDROID",
                                        "externalClientId": "string",
                                        "name": "string"
                                    },
                                    "PUSH_CLIENT_2": {
                                        "id": "string",
                                        "type": "ANDROID",
                                        "externalClientId": "string",
                                        "name": "string"
                                    },
                                    "PUSH_CLIENT_3": {
                                        "id": "string",
                                        "type": "ANDROID",
                                        "externalClientId": "string",
                                        "name": "string"
                                    },
                                    "PUSH_CLIENT_4": {
                                        "id": "string",
                                        "type": "ANDROID",
                                        "externalClientId": "string",
                                        "name": "string"
                                    },
                                    "PUSH_CLIENT_5": {
                                        "id": "string",
                                        "type": "ANDROID",
                                        "externalClientId": "string",
                                        "name": "string"
                                    },
                                    "PUSH_CLIENT_6": {
                                        "id": "string",
                                        "type": "ANDROID",
                                        "externalClientId": "string",
                                        "name": "string"
                                    },
                                    "PUSH_CLIENT_7": {
                                        "id": "string",
                                        "type": "ANDROID",
                                        "externalClientId": "string",
                                        "name": "string"
                                    },
                                    "PUSH_CLIENT_8": {
                                        "id": "string",
                                        "type": "ANDROID",
                                        "externalClientId": "string",
                                        "name": "string"
                                    },
                                    "PUSH_CLIENT_9": {
                                        "id": "string",
                                        "type": "ANDROID",
                                        "externalClientId": "string",
                                        "name": "string"
                                    },
                                    "PUSH_CLIENT_10": {
                                        "id": "string",
                                        "type": "ANDROID",
                                        "externalClientId": "string",
                                        "name": "string"
                                    }
                                },
                                "citizenship": "string",
                                "passwordHints": [
                                    {
                                        "securityQuestion": {
                                            "id": "string",
                                            "question": "string"
                                        },
                                        "securityAnswer": {
                                            "id": "string",
                                            "answer": "string"
                                        }
                                    }
                                ],
                                "dateOfBirth": 0
                            }
                        },
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/PersonalInfoDTO"
                            },
                            "example": "<PersonalInfoDTO> <firstName>string</firstName> <middleName>string</middleName> <lastName>string</lastName> <prefix>string</prefix> <suffix>string</suffix> <gender>MALE</gender> <salutation>Welcome</salutation> <kyc> <status>0</status> <attemptsLeft>0</attemptsLeft> </kyc> <addresses> <HOME> <address1>string</address1> <address2>string</address2> <address3>string</address3> <region>string</region> </HOME> <BUSINESS> <address1>string</address1> <address2>string</address2> <address3>string</address3> <region>string</region> </BUSINESS> <CONTACT> <address1>string</address1> <address2>string</address2> <address3>string</address3> <region>string</region> </CONTACT> <BILLING> <address1>string</address1> <address2>string</address2> <address3>string</address3> <region>string</region> </BILLING> <MAILING> <address1>string</address1> <address2>string</address2> <address3>string</address3> <region>string</region> </MAILING> </addresses> <phones> <HOME> <type>HOME</type> <number>string</number> <extension>string</extension> <provider>string</provider> </HOME> <BUSINESS> <type>HOME</type> <number>string</number> <extension>string</extension> <provider>string</provider> </BUSINESS> <MOBILE> <type>HOME</type> <number>string</number> <extension>string</extension> <provider>string</provider> </MOBILE> <LANDLINE> <type>HOME</type> <number>string</number> <extension>string</extension> <provider>string</provider> </LANDLINE> </phones> <emails> <PERSONAL> <type>PERSONAL</type> <address>string</address> <verified>true</verified> </PERSONAL> <BUSINESS> <type>PERSONAL</type> <address>string</address> <verified>true</verified> </BUSINESS> </emails> <pushClients> <PUSH_CLIENT_1> <id>string</id> <type>ANDROID</type> <externalClientId>string</externalClientId> <name>string</name> </PUSH_CLIENT_1> <PUSH_CLIENT_2> <id>string</id> <type>ANDROID</type> <externalClientId>string</externalClientId> <name>string</name> </PUSH_CLIENT_2> <PUSH_CLIENT_3> <id>string</id> <type>ANDROID</type> <externalClientId>string</externalClientId> <name>string</name> </PUSH_CLIENT_3> <PUSH_CLIENT_4> <id>string</id> <type>ANDROID</type> <externalClientId>string</externalClientId> <name>string</name> </PUSH_CLIENT_4> <PUSH_CLIENT_5> <id>string</id> <type>ANDROID</type> <externalClientId>string</externalClientId> <name>string</name> </PUSH_CLIENT_5> <PUSH_CLIENT_6> <id>string</id> <type>ANDROID</type> <externalClientId>string</externalClientId> <name>string</name> </PUSH_CLIENT_6> <PUSH_CLIENT_7> <id>string</id> <type>ANDROID</type> <externalClientId>string</externalClientId> <name>string</name> </PUSH_CLIENT_7> <PUSH_CLIENT_8> <id>string</id> <type>ANDROID</type> <externalClientId>string</externalClientId> <name>string</name> </PUSH_CLIENT_8> <PUSH_CLIENT_9> <id>string</id> <type>ANDROID</type> <externalClientId>string</externalClientId> <name>string</name> </PUSH_CLIENT_9> <PUSH_CLIENT_10> <id>string</id> <type>ANDROID</type> <externalClientId>string</externalClientId> <name>string</name> </PUSH_CLIENT_10> </pushClients> <citizenship>string</citizenship> <passwordHints> <securityQuestion> <id>string</id> <question>string</question> </securityQuestion> <securityAnswer> <id>string</id> <answer>string</answer> </securityAnswer> </passwordHints> <dateOfBirth>0</dateOfBirth> </PersonalInfoDTO>"
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Personal information",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PersonalInfoDTO"
                                },
                                "example": {
                                    "firstName": "string",
                                    "middleName": "string",
                                    "lastName": "string",
                                    "prefix": "string",
                                    "suffix": "string",
                                    "gender": "MALE",
                                    "salutation": "Welcome",
                                    "kyc": {
                                        "status": 0,
                                        "attemptsLeft": 0
                                    },
                                    "addresses": {
                                        "HOME": {
                                            "address1": "string",
                                            "address2": "string",
                                            "address3": "string",
                                            "region": "string"
                                        },
                                        "BUSINESS": {
                                            "address1": "string",
                                            "address2": "string",
                                            "address3": "string",
                                            "region": "string"
                                        },
                                        "CONTACT": {
                                            "address1": "string",
                                            "address2": "string",
                                            "address3": "string",
                                            "region": "string"
                                        },
                                        "BILLING": {
                                            "address1": "string",
                                            "address2": "string",
                                            "address3": "string",
                                            "region": "string"
                                        },
                                        "MAILING": {
                                            "address1": "string",
                                            "address2": "string",
                                            "address3": "string",
                                            "region": "string"
                                        }
                                    },
                                    "phones": {
                                        "HOME": {
                                            "type": "HOME",
                                            "number": "string",
                                            "extension": "string",
                                            "provider": "string"
                                        },
                                        "BUSINESS": {
                                            "type": "HOME",
                                            "number": "string",
                                            "extension": "string",
                                            "provider": "string"
                                        },
                                        "MOBILE": {
                                            "type": "HOME",
                                            "number": "string",
                                            "extension": "string",
                                            "provider": "string"
                                        },
                                        "LANDLINE": {
                                            "type": "HOME",
                                            "number": "string",
                                            "extension": "string",
                                            "provider": "string"
                                        }
                                    },
                                    "emails": {
                                        "PERSONAL": {
                                            "type": "PERSONAL",
                                            "address": "string",
                                            "verified": true
                                        },
                                        "BUSINESS": {
                                            "type": "PERSONAL",
                                            "address": "string",
                                            "verified": true
                                        }
                                    },
                                    "pushClients": {
                                        "PUSH_CLIENT_1": {
                                            "id": "string",
                                            "type": "ANDROID",
                                            "externalClientId": "string",
                                            "name": "string"
                                        },
                                        "PUSH_CLIENT_2": {
                                            "id": "string",
                                            "type": "ANDROID",
                                            "externalClientId": "string",
                                            "name": "string"
                                        },
                                        "PUSH_CLIENT_3": {
                                            "id": "string",
                                            "type": "ANDROID",
                                            "externalClientId": "string",
                                            "name": "string"
                                        },
                                        "PUSH_CLIENT_4": {
                                            "id": "string",
                                            "type": "ANDROID",
                                            "externalClientId": "string",
                                            "name": "string"
                                        },
                                        "PUSH_CLIENT_5": {
                                            "id": "string",
                                            "type": "ANDROID",
                                            "externalClientId": "string",
                                            "name": "string"
                                        },
                                        "PUSH_CLIENT_6": {
                                            "id": "string",
                                            "type": "ANDROID",
                                            "externalClientId": "string",
                                            "name": "string"
                                        },
                                        "PUSH_CLIENT_7": {
                                            "id": "string",
                                            "type": "ANDROID",
                                            "externalClientId": "string",
                                            "name": "string"
                                        },
                                        "PUSH_CLIENT_8": {
                                            "id": "string",
                                            "type": "ANDROID",
                                            "externalClientId": "string",
                                            "name": "string"
                                        },
                                        "PUSH_CLIENT_9": {
                                            "id": "string",
                                            "type": "ANDROID",
                                            "externalClientId": "string",
                                            "name": "string"
                                        },
                                        "PUSH_CLIENT_10": {
                                            "id": "string",
                                            "type": "ANDROID",
                                            "externalClientId": "string",
                                            "name": "string"
                                        }
                                    },
                                    "citizenship": "string",
                                    "passwordHints": [
                                        {
                                            "securityQuestion": {
                                                "id": "string",
                                                "question": "string"
                                            },
                                            "securityAnswer": {
                                                "id": "string",
                                                "answer": "string"
                                            }
                                        }
                                    ],
                                    "dateOfBirth": 0
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/PersonalInfoDTO"
                                },
                                "example": "<PersonalInfoDTO> <firstName>string</firstName> <middleName>string</middleName> <lastName>string</lastName> <prefix>string</prefix> <suffix>string</suffix> <gender>MALE</gender> <salutation>Welcome</salutation> <kyc> <status>0</status> <attemptsLeft>0</attemptsLeft> </kyc> <addresses> <HOME> <address1>string</address1> <address2>string</address2> <address3>string</address3> <region>string</region> </HOME> <BUSINESS> <address1>string</address1> <address2>string</address2> <address3>string</address3> <region>string</region> </BUSINESS> <CONTACT> <address1>string</address1> <address2>string</address2> <address3>string</address3> <region>string</region> </CONTACT> <BILLING> <address1>string</address1> <address2>string</address2> <address3>string</address3> <region>string</region> </BILLING> <MAILING> <address1>string</address1> <address2>string</address2> <address3>string</address3> <region>string</region> </MAILING> </addresses> <phones> <HOME> <type>HOME</type> <number>string</number> <extension>string</extension> <provider>string</provider> </HOME> <BUSINESS> <type>HOME</type> <number>string</number> <extension>string</extension> <provider>string</provider> </BUSINESS> <MOBILE> <type>HOME</type> <number>string</number> <extension>string</extension> <provider>string</provider> </MOBILE> <LANDLINE> <type>HOME</type> <number>string</number> <extension>string</extension> <provider>string</provider> </LANDLINE> </phones> <emails> <PERSONAL> <type>PERSONAL</type> <address>string</address> <verified>true</verified> </PERSONAL> <BUSINESS> <type>PERSONAL</type> <address>string</address> <verified>true</verified> </BUSINESS> </emails> <pushClients> <PUSH_CLIENT_1> <id>string</id> <type>ANDROID</type> <externalClientId>string</externalClientId> <name>string</name> </PUSH_CLIENT_1> <PUSH_CLIENT_2> <id>string</id> <type>ANDROID</type> <externalClientId>string</externalClientId> <name>string</name> </PUSH_CLIENT_2> <PUSH_CLIENT_3> <id>string</id> <type>ANDROID</type> <externalClientId>string</externalClientId> <name>string</name> </PUSH_CLIENT_3> <PUSH_CLIENT_4> <id>string</id> <type>ANDROID</type> <externalClientId>string</externalClientId> <name>string</name> </PUSH_CLIENT_4> <PUSH_CLIENT_5> <id>string</id> <type>ANDROID</type> <externalClientId>string</externalClientId> <name>string</name> </PUSH_CLIENT_5> <PUSH_CLIENT_6> <id>string</id> <type>ANDROID</type> <externalClientId>string</externalClientId> <name>string</name> </PUSH_CLIENT_6> <PUSH_CLIENT_7> <id>string</id> <type>ANDROID</type> <externalClientId>string</externalClientId> <name>string</name> </PUSH_CLIENT_7> <PUSH_CLIENT_8> <id>string</id> <type>ANDROID</type> <externalClientId>string</externalClientId> <name>string</name> </PUSH_CLIENT_8> <PUSH_CLIENT_9> <id>string</id> <type>ANDROID</type> <externalClientId>string</externalClientId> <name>string</name> </PUSH_CLIENT_9> <PUSH_CLIENT_10> <id>string</id> <type>ANDROID</type> <externalClientId>string</externalClientId> <name>string</name> </PUSH_CLIENT_10> </pushClients> <citizenship>string</citizenship> <passwordHints> <securityQuestion> <id>string</id> <question>string</question> </securityQuestion> <securityAnswer> <id>string</id> <answer>string</answer> </securityAnswer> </passwordHints> <dateOfBirth>0</dateOfBirth> </PersonalInfoDTO>"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    },
                    "500": {
                        "description": "System exception",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    },
                    "503": {
                        "description": "System not available. Retry later",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    }
                }
            }
        },
        "/players/self/game-self-exclusions": {
            "get": {
                "summary": "Retrieve player's self exclusions from games",
                "description": "Retrieve player's self exclusions from games",
                "operationId": "getAllPlayerSelfExclusions",
                "responses": {
                    "200": {
                        "description": "Player's game self exclusions have been retrieved",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/PlayerBanDTO"
                                    }
                                },
                                "example": [
                                    {
                                        "banTypology": {
                                            "gameCode": "string",
                                            "gameDomain": "string",
                                            "gameCategory": "string"
                                        },
                                        "banExpirationDate": 0,
                                        "reason": "string",
                                        "comment": "string",
                                        "requestedScope": "LOGIN",
                                        "gameSelfExclusionId": 0,
                                        "bannedByBO": true
                                    }
                                ]
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server unavailable",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Add a new self exclusion from a game for a player",
                "description": "Add a new self exclusion from a game for a player",
                "operationId": "addSelfExclusionForGame",
                "requestBody": {
                    "description": "Player's game self exclusion details",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PlayerBanInfoDTO"
                            },
                            "example": {
                                "banTypology": {
                                    "gameCode": "string",
                                    "gameDomain": "string",
                                    "gameCategory": "string"
                                },
                                "banExpirationDate": 0,
                                "reason": "string",
                                "comment": "string",
                                "requestedScope": "LOGIN",
                                "bannedByBO": true
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Player's game self exclusion has been added",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PlayerBanDTO"
                                },
                                "example": {
                                    "banTypology": {
                                        "gameCode": "string",
                                        "gameDomain": "string",
                                        "gameCategory": "string"
                                    },
                                    "banExpirationDate": 0,
                                    "reason": "string",
                                    "comment": "string",
                                    "requestedScope": "LOGIN",
                                    "gameSelfExclusionId": 0,
                                    "bannedByBO": true
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server unavailable",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/players/self/game-self-exclusions/{id}": {
            "get": {
                "summary": "Retrieve a player's self exclusion from game",
                "description": "Retrieve a player's self exclusion from game",
                "operationId": "getPlayerSelfExclusion",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Format - int64. The self exclusion identifier",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 1
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Player's game self exclusion has been retrieved",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PlayerBanDTO"
                                },
                                "example": {
                                    "banTypology": {
                                        "gameCode": "string",
                                        "gameDomain": "string",
                                        "gameCategory": "string"
                                    },
                                    "banExpirationDate": 0,
                                    "reason": "string",
                                    "comment": "string",
                                    "requestedScope": "LOGIN",
                                    "gameSelfExclusionId": 0,
                                    "bannedByBO": true
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Game self exclusion not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server unavailable",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Remove self exclusion from a game for a player",
                "description": "Remove self exclusion from a game for a player",
                "operationId": "removeSelfExclusionForGame",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Format - int64. The game self exclusion identifier",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 1
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Player's game self exclusion has been removed"
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Game self exclusion not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server unavailable",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/players/self/data/accuracy": {
            "get": {
                "summary": "Return data accuracy status",
                "description": "Return data accuracy status",
                "operationId": "checkDataAccuracy",
                "responses": {
                    "200": {
                        "description": "Data accuracy status is returned",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DataAccuracyStatusDTO"
                                },
                                "example": {
                                    "accuracyConfirmationNeeded": true,
                                    "lastDataAccuracyCheckTime": 0
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Business exception",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server unavailable",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "summary": "Update data accuracy status",
                "description": "Update data accuracy status",
                "operationId": "updateDataAccuracyStatus",
                "requestBody": {
                    "description": "Object representing the data accuracy status",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DataAccuracyStatusChangeDTO"
                            },
                            "example": {
                                "newDataAccuracyStatus": "ACCURATE"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Data accuracy status updated with no errors",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DataAccuracyStatusDTO"
                                },
                                "example": {
                                    "accuracyConfirmationNeeded": true,
                                    "lastDataAccuracyCheckTime": 0
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Business exception",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server unavailable",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/players/self/details": {
            "put": {
                "summary": "Update player details",
                "description": "Update player details",
                "operationId": "updatePlayerFullProfileData",
                "requestBody": {
                    "description": "Player details to update",
                    "content": {
                        "*/*": {
                            "schema": {
                                "$ref": "#/components/schemas/PlayerDetailsDTO"
                            },
                            "examples": {
                                "default": {
                                    "value": null
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Player details",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PlayerDetailsDTO"
                                },
                                "example": {
                                    "personalInfo": {
                                        "firstName": "string",
                                        "middleName": "string",
                                        "lastName": "string",
                                        "prefix": "string",
                                        "suffix": "string",
                                        "gender": "MALE",
                                        "salutation": "Welcome",
                                        "kyc": {
                                            "status": 0,
                                            "attemptsLeft": 0
                                        },
                                        "addresses": {
                                            "HOME": {
                                                "address1": "string",
                                                "address2": "string",
                                                "address3": "string",
                                                "region": "string"
                                            },
                                            "BUSINESS": {
                                                "address1": "string",
                                                "address2": "string",
                                                "address3": "string",
                                                "region": "string"
                                            },
                                            "CONTACT": {
                                                "address1": "string",
                                                "address2": "string",
                                                "address3": "string",
                                                "region": "string"
                                            },
                                            "BILLING": {
                                                "address1": "string",
                                                "address2": "string",
                                                "address3": "string",
                                                "region": "string"
                                            },
                                            "MAILING": {
                                                "address1": "string",
                                                "address2": "string",
                                                "address3": "string",
                                                "region": "string"
                                            }
                                        },
                                        "phones": {
                                            "HOME": {
                                                "type": "HOME",
                                                "number": "string",
                                                "extension": "string",
                                                "provider": "string"
                                            },
                                            "BUSINESS": {
                                                "type": "HOME",
                                                "number": "string",
                                                "extension": "string",
                                                "provider": "string"
                                            },
                                            "MOBILE": {
                                                "type": "HOME",
                                                "number": "string",
                                                "extension": "string",
                                                "provider": "string"
                                            },
                                            "LANDLINE": {
                                                "type": "HOME",
                                                "number": "string",
                                                "extension": "string",
                                                "provider": "string"
                                            }
                                        },
                                        "emails": {
                                            "PERSONAL": {
                                                "type": "PERSONAL",
                                                "address": "string",
                                                "verified": true
                                            },
                                            "BUSINESS": {
                                                "type": "PERSONAL",
                                                "address": "string",
                                                "verified": true
                                            }
                                        },
                                        "pushClients": {
                                            "PUSH_CLIENT_1": {
                                                "id": "string",
                                                "type": "ANDROID",
                                                "externalClientId": "string",
                                                "name": "string"
                                            },
                                            "PUSH_CLIENT_2": {
                                                "id": "string",
                                                "type": "ANDROID",
                                                "externalClientId": "string",
                                                "name": "string"
                                            },
                                            "PUSH_CLIENT_3": {
                                                "id": "string",
                                                "type": "ANDROID",
                                                "externalClientId": "string",
                                                "name": "string"
                                            },
                                            "PUSH_CLIENT_4": {
                                                "id": "string",
                                                "type": "ANDROID",
                                                "externalClientId": "string",
                                                "name": "string"
                                            },
                                            "PUSH_CLIENT_5": {
                                                "id": "string",
                                                "type": "ANDROID",
                                                "externalClientId": "string",
                                                "name": "string"
                                            },
                                            "PUSH_CLIENT_6": {
                                                "id": "string",
                                                "type": "ANDROID",
                                                "externalClientId": "string",
                                                "name": "string"
                                            },
                                            "PUSH_CLIENT_7": {
                                                "id": "string",
                                                "type": "ANDROID",
                                                "externalClientId": "string",
                                                "name": "string"
                                            },
                                            "PUSH_CLIENT_8": {
                                                "id": "string",
                                                "type": "ANDROID",
                                                "externalClientId": "string",
                                                "name": "string"
                                            },
                                            "PUSH_CLIENT_9": {
                                                "id": "string",
                                                "type": "ANDROID",
                                                "externalClientId": "string",
                                                "name": "string"
                                            },
                                            "PUSH_CLIENT_10": {
                                                "id": "string",
                                                "type": "ANDROID",
                                                "externalClientId": "string",
                                                "name": "string"
                                            }
                                        },
                                        "citizenship": "string",
                                        "passwordHints": [
                                            {
                                                "securityQuestion": {
                                                    "id": "string",
                                                    "question": "string"
                                                },
                                                "securityAnswer": {
                                                    "id": "string",
                                                    "answer": "string"
                                                }
                                            }
                                        ],
                                        "dateOfBirth": 0
                                    },
                                    "nonpublicPersonalInfo": {
                                        "dateOfBirth": 0,
                                        "feinNumber": "<feinNumber>",
                                        "identificationNumber": "<identificationNumber>",
                                        "identificationIssuer": "<identificationIssuer>",
                                        "socialSecurityNumber": "<socialSecurityNumber>"
                                    }
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/PlayerDetailsDTO"
                                },
                                "example": "<PlayerDetailsDTO> <personalInfo> <firstName>string</firstName> <middleName>string</middleName> <lastName>string</lastName> <prefix>string</prefix> <suffix>string</suffix> <gender>MALE</gender> <salutation>Welcome</salutation> <kyc> <status>0</status> <attemptsLeft>0</attemptsLeft> </kyc> <addresses> <HOME> <address1>string</address1> <address2>string</address2> <address3>string</address3> <region>string</region> </HOME> <BUSINESS> <address1>string</address1> <address2>string</address2> <address3>string</address3> <region>string</region> </BUSINESS> <CONTACT> <address1>string</address1> <address2>string</address2> <address3>string</address3> <region>string</region> </CONTACT> <BILLING> <address1>string</address1> <address2>string</address2> <address3>string</address3> <region>string</region> </BILLING> <MAILING> <address1>string</address1> <address2>string</address2> <address3>string</address3> <region>string</region> </MAILING> </addresses> <phones> <HOME> <type>HOME</type> <number>string</number> <extension>string</extension> <provider>string</provider> </HOME> <BUSINESS> <type>HOME</type> <number>string</number> <extension>string</extension> <provider>string</provider> </BUSINESS> <MOBILE> <type>HOME</type> <number>string</number> <extension>string</extension> <provider>string</provider> </MOBILE> <LANDLINE> <type>HOME</type> <number>string</number> <extension>string</extension> <provider>string</provider> </LANDLINE> </phones> <emails> <PERSONAL> <type>PERSONAL</type> <address>string</address> <verified>true</verified> </PERSONAL> <BUSINESS> <type>PERSONAL</type> <address>string</address> <verified>true</verified> </BUSINESS> </emails> <pushClients> <PUSH_CLIENT_1> <id>string</id> <type>ANDROID</type> <externalClientId>string</externalClientId> <name>string</name> </PUSH_CLIENT_1> <PUSH_CLIENT_2> <id>string</id> <type>ANDROID</type> <externalClientId>string</externalClientId> <name>string</name> </PUSH_CLIENT_2> <PUSH_CLIENT_3> <id>string</id> <type>ANDROID</type> <externalClientId>string</externalClientId> <name>string</name> </PUSH_CLIENT_3> <PUSH_CLIENT_4> <id>string</id> <type>ANDROID</type> <externalClientId>string</externalClientId> <name>string</name> </PUSH_CLIENT_4> <PUSH_CLIENT_5> <id>string</id> <type>ANDROID</type> <externalClientId>string</externalClientId> <name>string</name> </PUSH_CLIENT_5> <PUSH_CLIENT_6> <id>string</id> <type>ANDROID</type> <externalClientId>string</externalClientId> <name>string</name> </PUSH_CLIENT_6> <PUSH_CLIENT_7> <id>string</id> <type>ANDROID</type> <externalClientId>string</externalClientId> <name>string</name> </PUSH_CLIENT_7> <PUSH_CLIENT_8> <id>string</id> <type>ANDROID</type> <externalClientId>string</externalClientId> <name>string</name> </PUSH_CLIENT_8> <PUSH_CLIENT_9> <id>string</id> <type>ANDROID</type> <externalClientId>string</externalClientId> <name>string</name> </PUSH_CLIENT_9> <PUSH_CLIENT_10> <id>string</id> <type>ANDROID</type> <externalClientId>string</externalClientId> <name>string</name> </PUSH_CLIENT_10> </pushClients> <citizenship>string</citizenship> <passwordHints> <securityQuestion> <id>string</id> <question>string</question> </securityQuestion> <securityAnswer> <id>string</id> <answer>string</answer> </securityAnswer> </passwordHints> <dateOfBirth>0</dateOfBirth> </personalInfo> <nonpublicPersonalInfo> <dateOfBirth>0</dateOfBirth> <feinNumber>&lt;feinNumber&gt;</feinNumber> <identificationNumber>&lt;identificationNumber&gt;</identificationNumber> <identificationIssuer>&lt;identificationIssuer&gt;</identificationIssuer> <socialSecurityNumber>&lt;socialSecurityNumber&gt;</socialSecurityNumber> </nonpublicPersonalInfo> </PlayerDetailsDTO>"
                            }
                        }
                    },
                    "400": {
                        "description": "Business exception",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    },
                    "503": {
                        "description": "Server unavailable",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    }
                }
            }
        },
        "/players/self/favorites": {
            "get": {
                "summary": "Get list player favorite resource",
                "description": "Get list player favorite resource",
                "operationId": "getPlayerFavorites",
                "responses": {
                    "200": {
                        "description": "List Player favorite resource",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/PlayerFavoriteDTO"
                                    }
                                },
                                "example": [
                                    {
                                        "type": "Game, Location",
                                        "code": 0,
                                        "name": "string",
                                        "category": "string",
                                        "categoryName": "string",
                                        "favoriteId": "string"
                                    }
                                ]
                            }
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "System exception",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "System not available. Retry later",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Save Player Favorite Resource",
                "description": "Save Player Favorite Resource",
                "operationId": "savePlayerFavorite",
                "requestBody": {
                    "description": "Player favourite details",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PlayerFavoriteInfoDTO"
                            },
                            "example": {
                                "type": "Game, Location",
                                "code": 0,
                                "name": "string",
                                "category": "string",
                                "categoryName": "string"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Save player favorite resource",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PlayerFavoriteDTO"
                                },
                                "example": {
                                    "type": "Game, Location",
                                    "code": 0,
                                    "name": "string",
                                    "category": "string",
                                    "categoryName": "string",
                                    "favoriteId": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "System exception",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "System not available. Retry later",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/players/self/favorites/{id}": {
            "get": {
                "summary": "Get a single player favorite resource",
                "description": "Get a single player favorite resource",
                "operationId": "getPlayerFavorite",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of configured favorite",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": 1
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Get single player favorite resource",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/PlayerFavoriteDTO"
                                    }
                                },
                                "example": [
                                    {
                                        "type": "Game, Location",
                                        "code": 0,
                                        "name": "string",
                                        "category": "string",
                                        "categoryName": "string",
                                        "favoriteId": "string"
                                    }
                                ]
                            }
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Favorite not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "System exception",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "System not available. Retry later",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "summary": "Update player favorite resource",
                "description": "Update player favorite resource",
                "operationId": "editPlayerFavorite",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of configured favorite",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": 1
                    }
                ],
                "requestBody": {
                    "description": "Player favourite details",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PlayerFavoriteInfoDTO"
                            },
                            "example": {
                                "type": "Game, Location",
                                "code": 0,
                                "name": "string",
                                "category": "string",
                                "categoryName": "string"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Updated player favorite resource",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PlayerFavoriteDTO"
                                },
                                "example": {
                                    "type": "Game, Location",
                                    "code": 0,
                                    "name": "string",
                                    "category": "string",
                                    "categoryName": "string",
                                    "favoriteId": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Favorite not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "System exception",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "System not available. Retry later",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/players/self/profile": {
            "get": {
                "summary": "Get player profile information",
                "description": "Get player profile information",
                "operationId": "getProfile_1",
                "responses": {
                    "200": {
                        "description": "Player profile information",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProfileDTO"
                                },
                                "example": {
                                    "acceptsPromotionalEmail": true,
                                    "language": "string",
                                    "nickName": "string",
                                    "registrationDate": 0,
                                    "acceptsRewards": true,
                                    "preferredCurrency": "string",
                                    "registrationLevel": null,
                                    "userName": "string",
                                    "playerHash": "string",
                                    "preferredCommunicationChannel": "string",
                                    "communicationPreferences": {
                                        "preferredChannel": "EMAIL_CHANNEL",
                                        "pushClients": {
                                            "MAINTENANCE": true,
                                            "ALERT": true,
                                            "ALARM": true,
                                            "PROMOTION": true
                                        },
                                        "sms": {
                                            "MAINTENANCE": true,
                                            "ALERT": true,
                                            "ALARM": true,
                                            "PROMOTION": true
                                        },
                                        "email": {
                                            "MAINTENANCE": true,
                                            "ALERT": true,
                                            "ALARM": true,
                                            "PROMOTION": true
                                        },
                                        "smsPersonalBlackoutTime": {
                                            "enabled": false,
                                            "startTime": "2024-03-15",
                                            "endTime": "2024-03-15"
                                        },
                                        "smsGlobalBlackoutTime": {
                                            "enabled": false,
                                            "startTime": "2024-03-15",
                                            "endTime": "2024-03-15"
                                        },
                                        "emailFormat": "HTML",
                                        "pushClientPersonalBlackoutTime": {
                                            "enabled": false,
                                            "startTime": "2024-03-15",
                                            "endTime": "2024-03-15"
                                        },
                                        "pushClientGlobalBlackoutTime": {
                                            "enabled": false,
                                            "startTime": "2024-03-15",
                                            "endTime": "2024-03-15"
                                        }
                                    },
                                    "notificationPreferences": [
                                        {
                                            "id": "string",
                                            "eventType": "string",
                                            "channels": {
                                                "PUSH_CLIENT": {
                                                    "type": "PUSH_CLIENT",
                                                    "contactIDs": [
                                                        "string"
                                                    ],
                                                    "enabled": true,
                                                    "preferred": true
                                                },
                                                "SMS": {
                                                    "type": "PUSH_CLIENT",
                                                    "contactIDs": [
                                                        "string"
                                                    ],
                                                    "enabled": true,
                                                    "preferred": true
                                                },
                                                "EMAIL": {
                                                    "type": "PUSH_CLIENT",
                                                    "contactIDs": [
                                                        "string"
                                                    ],
                                                    "enabled": true,
                                                    "preferred": true
                                                },
                                                "PLAYER_PORTAL": {
                                                    "type": "PUSH_CLIENT",
                                                    "contactIDs": [
                                                        "string"
                                                    ],
                                                    "enabled": true,
                                                    "preferred": true
                                                }
                                            },
                                            "eventPreferences": {},
                                            "notificationType": "MAINTENANCE",
                                            "required": true
                                        }
                                    ],
                                    "affiliateId": "string",
                                    "geteInstantGamesEnabled": true
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProfileDTO"
                                },
                                "example": "<ProfileDTO> <acceptsPromotionalEmail>true</acceptsPromotionalEmail> <language>string</language> <nickName>string</nickName> <registrationDate>0</registrationDate> <acceptsRewards>true</acceptsRewards> <preferredCurrency>string</preferredCurrency> <registrationLevel></registrationLevel> <userName>string</userName> <playerHash>string</playerHash> <preferredCommunicationChannel>string</preferredCommunicationChannel> <communicationPreferences> <preferredChannel>EMAIL_CHANNEL</preferredChannel> <pushClients> <MAINTENANCE>true</MAINTENANCE> <ALERT>true</ALERT> <ALARM>true</ALARM> <PROMOTION>true</PROMOTION> </pushClients> <sms> <MAINTENANCE>true</MAINTENANCE> <ALERT>true</ALERT> <ALARM>true</ALARM> <PROMOTION>true</PROMOTION> </sms> <email> <MAINTENANCE>true</MAINTENANCE> <ALERT>true</ALERT> <ALARM>true</ALARM> <PROMOTION>true</PROMOTION> </email> <smsPersonalBlackoutTime> <enabled>False</enabled> <startTime>00:00</startTime> <endTime>00:00</endTime> </smsPersonalBlackoutTime> <smsGlobalBlackoutTime> <enabled>False</enabled> <startTime>00:00</startTime> <endTime>00:00</endTime> </smsGlobalBlackoutTime> <emailFormat>HTML</emailFormat> <pushClientPersonalBlackoutTime> <enabled>False</enabled> <startTime>00:00</startTime> <endTime>00:00</endTime> </pushClientPersonalBlackoutTime> <pushClientGlobalBlackoutTime> <enabled>False</enabled> <startTime>00:00</startTime> <endTime>00:00</endTime> </pushClientGlobalBlackoutTime> </communicationPreferences> <notificationPreferences> <id>string</id> <eventType>string</eventType> <channels> <PUSH_CLIENT> <type>PUSH_CLIENT</type> <contactIDs>string</contactIDs> <enabled>true</enabled> <preferred>true</preferred> </PUSH_CLIENT> <SMS> <type>PUSH_CLIENT</type> <contactIDs>string</contactIDs> <enabled>true</enabled> <preferred>true</preferred> </SMS> <EMAIL> <type>PUSH_CLIENT</type> <contactIDs>string</contactIDs> <enabled>true</enabled> <preferred>true</preferred> </EMAIL> <PLAYER_PORTAL> <type>PUSH_CLIENT</type> <contactIDs>string</contactIDs> <enabled>true</enabled> <preferred>true</preferred> </PLAYER_PORTAL> </channels> <eventPreferences /> <notificationType>MAINTENANCE</notificationType> <required>true</required> </notificationPreferences> <affiliateId>string</affiliateId> <geteInstantGamesEnabled>true</geteInstantGamesEnabled> </ProfileDTO>"
                            }
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    },
                    "500": {
                        "description": "System exception",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    },
                    "503": {
                        "description": "System not available. Retry later",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    }
                }
            },
            "put": {
                "summary": "Update profile information",
                "description": "Update profile information",
                "operationId": "updateProfile",
                "requestBody": {
                    "description": "Profile information to be updated",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ProfileDTO"
                            },
                            "example": {
                                "acceptsPromotionalEmail": true,
                                "language": "string",
                                "nickName": "string",
                                "registrationDate": 0,
                                "acceptsRewards": true,
                                "preferredCurrency": "string",
                                "registrationLevel": null,
                                "userName": "string",
                                "playerHash": "string",
                                "preferredCommunicationChannel": "string",
                                "communicationPreferences": {
                                    "preferredChannel": "EMAIL_CHANNEL",
                                    "pushClients": {
                                        "MAINTENANCE": true,
                                        "ALERT": true,
                                        "ALARM": true,
                                        "PROMOTION": true
                                    },
                                    "sms": {
                                        "MAINTENANCE": true,
                                        "ALERT": true,
                                        "ALARM": true,
                                        "PROMOTION": true
                                    },
                                    "email": {
                                        "MAINTENANCE": true,
                                        "ALERT": true,
                                        "ALARM": true,
                                        "PROMOTION": true
                                    },
                                    "smsPersonalBlackoutTime": {
                                        "enabled": false,
                                        "startTime": "2024-03-15",
                                        "endTime": "2024-03-15"
                                    },
                                    "smsGlobalBlackoutTime": {
                                        "enabled": false,
                                        "startTime": "2024-03-15",
                                        "endTime": "2024-03-15"
                                    },
                                    "emailFormat": "HTML",
                                    "pushClientPersonalBlackoutTime": {
                                        "enabled": false,
                                        "startTime": "2024-03-15",
                                        "endTime": "2024-03-15"
                                    },
                                    "pushClientGlobalBlackoutTime": {
                                        "enabled": false,
                                        "startTime": "2024-03-15",
                                        "endTime": "2024-03-15"
                                    }
                                },
                                "notificationPreferences": [
                                    {
                                        "id": "string",
                                        "eventType": "string",
                                        "channels": {
                                            "PUSH_CLIENT": {
                                                "type": "PUSH_CLIENT",
                                                "contactIDs": [
                                                    "string"
                                                ],
                                                "enabled": true,
                                                "preferred": true
                                            },
                                            "SMS": {
                                                "type": "PUSH_CLIENT",
                                                "contactIDs": [
                                                    "string"
                                                ],
                                                "enabled": true,
                                                "preferred": true
                                            },
                                            "EMAIL": {
                                                "type": "PUSH_CLIENT",
                                                "contactIDs": [
                                                    "string"
                                                ],
                                                "enabled": true,
                                                "preferred": true
                                            },
                                            "PLAYER_PORTAL": {
                                                "type": "PUSH_CLIENT",
                                                "contactIDs": [
                                                    "string"
                                                ],
                                                "enabled": true,
                                                "preferred": true
                                            }
                                        },
                                        "eventPreferences": {},
                                        "notificationType": "MAINTENANCE",
                                        "required": true
                                    }
                                ],
                                "affiliateId": "string",
                                "geteInstantGamesEnabled": true
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Updated profile information",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProfileDTO"
                                },
                                "example": {
                                    "acceptsPromotionalEmail": true,
                                    "language": "string",
                                    "nickName": "string",
                                    "registrationDate": 0,
                                    "acceptsRewards": true,
                                    "preferredCurrency": "string",
                                    "registrationLevel": null,
                                    "userName": "string",
                                    "playerHash": "string",
                                    "preferredCommunicationChannel": "string",
                                    "communicationPreferences": {
                                        "preferredChannel": "EMAIL_CHANNEL",
                                        "pushClients": {
                                            "MAINTENANCE": true,
                                            "ALERT": true,
                                            "ALARM": true,
                                            "PROMOTION": true
                                        },
                                        "sms": {
                                            "MAINTENANCE": true,
                                            "ALERT": true,
                                            "ALARM": true,
                                            "PROMOTION": true
                                        },
                                        "email": {
                                            "MAINTENANCE": true,
                                            "ALERT": true,
                                            "ALARM": true,
                                            "PROMOTION": true
                                        },
                                        "smsPersonalBlackoutTime": {
                                            "enabled": false,
                                            "startTime": "2024-03-15",
                                            "endTime": "2024-03-15"
                                        },
                                        "smsGlobalBlackoutTime": {
                                            "enabled": false,
                                            "startTime": "2024-03-15",
                                            "endTime": "2024-03-15"
                                        },
                                        "emailFormat": "HTML",
                                        "pushClientPersonalBlackoutTime": {
                                            "enabled": false,
                                            "startTime": "2024-03-15",
                                            "endTime": "2024-03-15"
                                        },
                                        "pushClientGlobalBlackoutTime": {
                                            "enabled": false,
                                            "startTime": "2024-03-15",
                                            "endTime": "2024-03-15"
                                        }
                                    },
                                    "notificationPreferences": [
                                        {
                                            "id": "string",
                                            "eventType": "string",
                                            "channels": {
                                                "PUSH_CLIENT": {
                                                    "type": "PUSH_CLIENT",
                                                    "contactIDs": [
                                                        "string"
                                                    ],
                                                    "enabled": true,
                                                    "preferred": true
                                                },
                                                "SMS": {
                                                    "type": "PUSH_CLIENT",
                                                    "contactIDs": [
                                                        "string"
                                                    ],
                                                    "enabled": true,
                                                    "preferred": true
                                                },
                                                "EMAIL": {
                                                    "type": "PUSH_CLIENT",
                                                    "contactIDs": [
                                                        "string"
                                                    ],
                                                    "enabled": true,
                                                    "preferred": true
                                                },
                                                "PLAYER_PORTAL": {
                                                    "type": "PUSH_CLIENT",
                                                    "contactIDs": [
                                                        "string"
                                                    ],
                                                    "enabled": true,
                                                    "preferred": true
                                                }
                                            },
                                            "eventPreferences": {},
                                            "notificationType": "MAINTENANCE",
                                            "required": true
                                        }
                                    ],
                                    "affiliateId": "string",
                                    "geteInstantGamesEnabled": true
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProfileDTO"
                                },
                                "example": "<ProfileDTO> <acceptsPromotionalEmail>true</acceptsPromotionalEmail> <language>string</language> <nickName>string</nickName> <registrationDate>0</registrationDate> <acceptsRewards>true</acceptsRewards> <preferredCurrency>string</preferredCurrency> <registrationLevel></registrationLevel> <userName>string</userName> <playerHash>string</playerHash> <preferredCommunicationChannel>string</preferredCommunicationChannel> <communicationPreferences> <preferredChannel>EMAIL_CHANNEL</preferredChannel> <pushClients> <MAINTENANCE>true</MAINTENANCE> <ALERT>true</ALERT> <ALARM>true</ALARM> <PROMOTION>true</PROMOTION> </pushClients> <sms> <MAINTENANCE>true</MAINTENANCE> <ALERT>true</ALERT> <ALARM>true</ALARM> <PROMOTION>true</PROMOTION> </sms> <email> <MAINTENANCE>true</MAINTENANCE> <ALERT>true</ALERT> <ALARM>true</ALARM> <PROMOTION>true</PROMOTION> </email> <smsPersonalBlackoutTime> <enabled>False</enabled> <startTime>00:00</startTime> <endTime>00:00</endTime> </smsPersonalBlackoutTime> <smsGlobalBlackoutTime> <enabled>False</enabled> <startTime>00:00</startTime> <endTime>00:00</endTime> </smsGlobalBlackoutTime> <emailFormat>HTML</emailFormat> <pushClientPersonalBlackoutTime> <enabled>False</enabled> <startTime>00:00</startTime> <endTime>00:00</endTime> </pushClientPersonalBlackoutTime> <pushClientGlobalBlackoutTime> <enabled>False</enabled> <startTime>00:00</startTime> <endTime>00:00</endTime> </pushClientGlobalBlackoutTime> </communicationPreferences> <notificationPreferences> <id>string</id> <eventType>string</eventType> <channels> <PUSH_CLIENT> <type>PUSH_CLIENT</type> <contactIDs>string</contactIDs> <enabled>true</enabled> <preferred>true</preferred> </PUSH_CLIENT> <SMS> <type>PUSH_CLIENT</type> <contactIDs>string</contactIDs> <enabled>true</enabled> <preferred>true</preferred> </SMS> <EMAIL> <type>PUSH_CLIENT</type> <contactIDs>string</contactIDs> <enabled>true</enabled> <preferred>true</preferred> </EMAIL> <PLAYER_PORTAL> <type>PUSH_CLIENT</type> <contactIDs>string</contactIDs> <enabled>true</enabled> <preferred>true</preferred> </PLAYER_PORTAL> </channels> <eventPreferences /> <notificationType>MAINTENANCE</notificationType> <required>true</required> </notificationPreferences> <affiliateId>string</affiliateId> <geteInstantGamesEnabled>true</geteInstantGamesEnabled> </ProfileDTO>"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    },
                    "500": {
                        "description": "System exception",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    },
                    "503": {
                        "description": "System not available. Retry later",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    }
                }
            }
        },
        "/players/verify/{code}": {
            "get": {
                "summary": "Verify player's email or SMS address",
                "description": "Verify player's email or SMS address",
                "operationId": "verifyContact_1",
                "parameters": [
                    {
                        "name": "code",
                        "in": "path",
                        "description": "One-time verification code",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Request submitted",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "400": {
                        "description": "Business exception",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server unavailable",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/players/activate-account/{code}": {
            "post": {
                "summary": "Activate user's account",
                "description": "Method used in sites where there is 2-phase registration and user's account is not active since the beginning",
                "operationId": "activateAccount",
                "parameters": [
                    {
                        "name": "code",
                        "in": "path",
                        "description": "One-time verification code",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Request submitted",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "400": {
                        "description": "Business exception",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server unavailable",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/players/security": {
            "get": {
                "summary": "Get security questions",
                "description": "Default implementation returns randomly one of the player's questions",
                "operationId": "securityQuestions",
                "parameters": [
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Username or email to get security questions for",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "Type of the identifier provided",
                        "schema": {
                            "enum": [
                                "USERNAME",
                                "EMAIL"
                            ],
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User's security questions",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/SecurityQuestionDTO"
                                    }
                                },
                                "example": [
                                    {
                                        "id": "string",
                                        "question": "string"
                                    }
                                ]
                            }
                        }
                    },
                    "400": {
                        "description": "Business exception",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server unavailable",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/players/parameter/check": {
            "post": {
                "summary": "This API can be used to verify if a specific value can be used for register a new player in the system",
                "description": "This API can be used to verify if a specific value can be used for register a new player in the system",
                "operationId": "checkAvailability",
                "requestBody": {
                    "description": "DTO that contain data for the check",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ParameterAvailabilityDTO"
                            },
                            "example": {
                                "available": true,
                                "type": "EMAIL",
                                "value": "newemail@igt.com"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "The result will be true if the specific value can be used for a new player registration"
                    },
                    "400": {
                        "description": "Business exception",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server unavailable",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/players": {
            "post": {
                "summary": "Register a user",
                "description": "Register a user",
                "operationId": "registerUser",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RegistrationDTO"
                            },
                            "example": {
                                "password": "***",
                                "personalInfo": {
                                    "firstName": "string",
                                    "middleName": "string",
                                    "lastName": "string",
                                    "prefix": "string",
                                    "suffix": "string",
                                    "gender": "MALE",
                                    "salutation": "Welcome",
                                    "kyc": {
                                        "status": 0,
                                        "attemptsLeft": 0
                                    },
                                    "addresses": {
                                        "HOME": {
                                            "address1": "string",
                                            "address2": "string",
                                            "address3": "string",
                                            "region": "string"
                                        },
                                        "BUSINESS": {
                                            "address1": "string",
                                            "address2": "string",
                                            "address3": "string",
                                            "region": "string"
                                        },
                                        "CONTACT": {
                                            "address1": "string",
                                            "address2": "string",
                                            "address3": "string",
                                            "region": "string"
                                        },
                                        "BILLING": {
                                            "address1": "string",
                                            "address2": "string",
                                            "address3": "string",
                                            "region": "string"
                                        },
                                        "MAILING": {
                                            "address1": "string",
                                            "address2": "string",
                                            "address3": "string",
                                            "region": "string"
                                        }
                                    },
                                    "phones": {
                                        "HOME": {
                                            "type": "HOME",
                                            "number": "string",
                                            "extension": "string",
                                            "provider": "string"
                                        },
                                        "BUSINESS": {
                                            "type": "HOME",
                                            "number": "string",
                                            "extension": "string",
                                            "provider": "string"
                                        },
                                        "MOBILE": {
                                            "type": "HOME",
                                            "number": "string",
                                            "extension": "string",
                                            "provider": "string"
                                        },
                                        "LANDLINE": {
                                            "type": "HOME",
                                            "number": "string",
                                            "extension": "string",
                                            "provider": "string"
                                        }
                                    },
                                    "emails": {
                                        "PERSONAL": {
                                            "type": "PERSONAL",
                                            "address": "string",
                                            "verified": true
                                        },
                                        "BUSINESS": {
                                            "type": "PERSONAL",
                                            "address": "string",
                                            "verified": true
                                        }
                                    },
                                    "pushClients": {
                                        "PUSH_CLIENT_1": {
                                            "id": "string",
                                            "type": "ANDROID",
                                            "externalClientId": "string",
                                            "name": "string"
                                        },
                                        "PUSH_CLIENT_2": {
                                            "id": "string",
                                            "type": "ANDROID",
                                            "externalClientId": "string",
                                            "name": "string"
                                        },
                                        "PUSH_CLIENT_3": {
                                            "id": "string",
                                            "type": "ANDROID",
                                            "externalClientId": "string",
                                            "name": "string"
                                        },
                                        "PUSH_CLIENT_4": {
                                            "id": "string",
                                            "type": "ANDROID",
                                            "externalClientId": "string",
                                            "name": "string"
                                        },
                                        "PUSH_CLIENT_5": {
                                            "id": "string",
                                            "type": "ANDROID",
                                            "externalClientId": "string",
                                            "name": "string"
                                        },
                                        "PUSH_CLIENT_6": {
                                            "id": "string",
                                            "type": "ANDROID",
                                            "externalClientId": "string",
                                            "name": "string"
                                        },
                                        "PUSH_CLIENT_7": {
                                            "id": "string",
                                            "type": "ANDROID",
                                            "externalClientId": "string",
                                            "name": "string"
                                        },
                                        "PUSH_CLIENT_8": {
                                            "id": "string",
                                            "type": "ANDROID",
                                            "externalClientId": "string",
                                            "name": "string"
                                        },
                                        "PUSH_CLIENT_9": {
                                            "id": "string",
                                            "type": "ANDROID",
                                            "externalClientId": "string",
                                            "name": "string"
                                        },
                                        "PUSH_CLIENT_10": {
                                            "id": "string",
                                            "type": "ANDROID",
                                            "externalClientId": "string",
                                            "name": "string"
                                        }
                                    },
                                    "citizenship": "string",
                                    "passwordHints": [
                                        {
                                            "securityQuestion": {
                                                "id": "string",
                                                "question": "string"
                                            },
                                            "securityAnswer": {
                                                "id": "string",
                                                "answer": "string"
                                            }
                                        }
                                    ],
                                    "dateOfBirth": 0
                                },
                                "profile": {
                                    "acceptsPromotionalEmail": true,
                                    "language": "string",
                                    "nickName": "string",
                                    "registrationDate": 0,
                                    "acceptsRewards": true,
                                    "preferredCurrency": "string",
                                    "registrationLevel": null,
                                    "userName": "string",
                                    "playerHash": "string",
                                    "preferredCommunicationChannel": "string",
                                    "communicationPreferences": {
                                        "preferredChannel": "EMAIL_CHANNEL",
                                        "pushClients": {
                                            "MAINTENANCE": true,
                                            "ALERT": true,
                                            "ALARM": true,
                                            "PROMOTION": true
                                        },
                                        "sms": {
                                            "MAINTENANCE": true,
                                            "ALERT": true,
                                            "ALARM": true,
                                            "PROMOTION": true
                                        },
                                        "email": {
                                            "MAINTENANCE": true,
                                            "ALERT": true,
                                            "ALARM": true,
                                            "PROMOTION": true
                                        },
                                        "smsPersonalBlackoutTime": {
                                            "enabled": false,
                                            "startTime": "2024-03-15",
                                            "endTime": "2024-03-15"
                                        },
                                        "smsGlobalBlackoutTime": {
                                            "enabled": false,
                                            "startTime": "2024-03-15",
                                            "endTime": "2024-03-15"
                                        },
                                        "emailFormat": "HTML",
                                        "pushClientPersonalBlackoutTime": {
                                            "enabled": false,
                                            "startTime": "2024-03-15",
                                            "endTime": "2024-03-15"
                                        },
                                        "pushClientGlobalBlackoutTime": {
                                            "enabled": false,
                                            "startTime": "2024-03-15",
                                            "endTime": "2024-03-15"
                                        }
                                    },
                                    "notificationPreferences": [
                                        {
                                            "id": "string",
                                            "eventType": "string",
                                            "channels": {
                                                "PUSH_CLIENT": {
                                                    "type": "PUSH_CLIENT",
                                                    "contactIDs": [
                                                        "string"
                                                    ],
                                                    "enabled": true,
                                                    "preferred": true
                                                },
                                                "SMS": {
                                                    "type": "PUSH_CLIENT",
                                                    "contactIDs": [
                                                        "string"
                                                    ],
                                                    "enabled": true,
                                                    "preferred": true
                                                },
                                                "EMAIL": {
                                                    "type": "PUSH_CLIENT",
                                                    "contactIDs": [
                                                        "string"
                                                    ],
                                                    "enabled": true,
                                                    "preferred": true
                                                },
                                                "PLAYER_PORTAL": {
                                                    "type": "PUSH_CLIENT",
                                                    "contactIDs": [
                                                        "string"
                                                    ],
                                                    "enabled": true,
                                                    "preferred": true
                                                }
                                            },
                                            "eventPreferences": {},
                                            "notificationType": "MAINTENANCE",
                                            "required": true
                                        }
                                    ],
                                    "affiliateId": "string",
                                    "geteInstantGamesEnabled": true
                                },
                                "nonpublicPersonalInfo": {
                                    "dateOfBirth": 0,
                                    "feinNumber": "<feinNumber>",
                                    "identificationNumber": "<identificationNumber>",
                                    "identificationIssuer": "<identificationIssuer>",
                                    "socialSecurityNumber": "<socialSecurityNumber>"
                                },
                                "optIntoGeoCompliance": true,
                                "promotions": [
                                    {
                                        "name": "string",
                                        "description": "string",
                                        "startTime": 0,
                                        "endTime": 0,
                                        "type": "string",
                                        "prizeType": "string",
                                        "id": "string",
                                        "discountAmount": 0,
                                        "cashPrizeAmount": 0,
                                        "serialNumber": "string",
                                        "drawId": "string",
                                        "drawDate": "string",
                                        "transactionTime": "string",
                                        "text": [
                                            {
                                                "type": "string",
                                                "position": "string",
                                                "text": "string"
                                            }
                                        ],
                                        "state": "string",
                                        "promotionCriteria": [
                                            {
                                                "priority": 0,
                                                "gameName": "string",
                                                "minBoardAmount": 0,
                                                "maxBoardAmount": 0,
                                                "minNumberOfBoards": 0,
                                                "maxNumberOfBoards": 0,
                                                "minWagerDuration": 0,
                                                "maxWagerDuration": 0,
                                                "minAdvancedDraw": 0,
                                                "maxAdvancedDraw": 0,
                                                "multiplierOption": "string",
                                                "betTypes": [
                                                    "string"
                                                ],
                                                "playTypes": [
                                                    "string"
                                                ],
                                                "openCloseTimes": [
                                                    {
                                                        "dayOfWeek": "MONDAY",
                                                        "openHour": 0,
                                                        "openMinute": 0,
                                                        "closeHour": 0,
                                                        "closeMinute": 0
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ],
                                "consents": [
                                    {
                                        "id": "1",
                                        "userType": {
                                            "userTypeId": "2",
                                            "brandId": "25",
                                            "partnerId": "1",
                                            "userTypeDescription": "full"
                                        },
                                        "callerSystem": {
                                            "callerSystem": "2",
                                            "description": "Mobile"
                                        },
                                        "version": "2",
                                        "nextVersion": "3",
                                        "enabled": true,
                                        "requiresConsent": true,
                                        "updateDate": 1583147293493,
                                        "language": "en_US"
                                    }
                                ],
                                "verifications": [
                                    {
                                        "name": "kyc",
                                        "verificationStatuses": [
                                            {
                                                "verificationProvider": "IDology",
                                                "status": "VERIFIED",
                                                "verificationMessages": [
                                                    "string"
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Registered user",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RegistrationDTO"
                                },
                                "example": {
                                    "password": "***",
                                    "personalInfo": {
                                        "firstName": "string",
                                        "middleName": "string",
                                        "lastName": "string",
                                        "prefix": "string",
                                        "suffix": "string",
                                        "gender": "MALE",
                                        "salutation": "Welcome",
                                        "kyc": {
                                            "status": 0,
                                            "attemptsLeft": 0
                                        },
                                        "addresses": {
                                            "HOME": {
                                                "address1": "string",
                                                "address2": "string",
                                                "address3": "string",
                                                "region": "string"
                                            },
                                            "BUSINESS": {
                                                "address1": "string",
                                                "address2": "string",
                                                "address3": "string",
                                                "region": "string"
                                            },
                                            "CONTACT": {
                                                "address1": "string",
                                                "address2": "string",
                                                "address3": "string",
                                                "region": "string"
                                            },
                                            "BILLING": {
                                                "address1": "string",
                                                "address2": "string",
                                                "address3": "string",
                                                "region": "string"
                                            },
                                            "MAILING": {
                                                "address1": "string",
                                                "address2": "string",
                                                "address3": "string",
                                                "region": "string"
                                            }
                                        },
                                        "phones": {
                                            "HOME": {
                                                "type": "HOME",
                                                "number": "string",
                                                "extension": "string",
                                                "provider": "string"
                                            },
                                            "BUSINESS": {
                                                "type": "HOME",
                                                "number": "string",
                                                "extension": "string",
                                                "provider": "string"
                                            },
                                            "MOBILE": {
                                                "type": "HOME",
                                                "number": "string",
                                                "extension": "string",
                                                "provider": "string"
                                            },
                                            "LANDLINE": {
                                                "type": "HOME",
                                                "number": "string",
                                                "extension": "string",
                                                "provider": "string"
                                            }
                                        },
                                        "emails": {
                                            "PERSONAL": {
                                                "type": "PERSONAL",
                                                "address": "string",
                                                "verified": true
                                            },
                                            "BUSINESS": {
                                                "type": "PERSONAL",
                                                "address": "string",
                                                "verified": true
                                            }
                                        },
                                        "pushClients": {
                                            "PUSH_CLIENT_1": {
                                                "id": "string",
                                                "type": "ANDROID",
                                                "externalClientId": "string",
                                                "name": "string"
                                            },
                                            "PUSH_CLIENT_2": {
                                                "id": "string",
                                                "type": "ANDROID",
                                                "externalClientId": "string",
                                                "name": "string"
                                            },
                                            "PUSH_CLIENT_3": {
                                                "id": "string",
                                                "type": "ANDROID",
                                                "externalClientId": "string",
                                                "name": "string"
                                            },
                                            "PUSH_CLIENT_4": {
                                                "id": "string",
                                                "type": "ANDROID",
                                                "externalClientId": "string",
                                                "name": "string"
                                            },
                                            "PUSH_CLIENT_5": {
                                                "id": "string",
                                                "type": "ANDROID",
                                                "externalClientId": "string",
                                                "name": "string"
                                            },
                                            "PUSH_CLIENT_6": {
                                                "id": "string",
                                                "type": "ANDROID",
                                                "externalClientId": "string",
                                                "name": "string"
                                            },
                                            "PUSH_CLIENT_7": {
                                                "id": "string",
                                                "type": "ANDROID",
                                                "externalClientId": "string",
                                                "name": "string"
                                            },
                                            "PUSH_CLIENT_8": {
                                                "id": "string",
                                                "type": "ANDROID",
                                                "externalClientId": "string",
                                                "name": "string"
                                            },
                                            "PUSH_CLIENT_9": {
                                                "id": "string",
                                                "type": "ANDROID",
                                                "externalClientId": "string",
                                                "name": "string"
                                            },
                                            "PUSH_CLIENT_10": {
                                                "id": "string",
                                                "type": "ANDROID",
                                                "externalClientId": "string",
                                                "name": "string"
                                            }
                                        },
                                        "citizenship": "string",
                                        "passwordHints": [
                                            {
                                                "securityQuestion": {
                                                    "id": "string",
                                                    "question": "string"
                                                },
                                                "securityAnswer": {
                                                    "id": "string",
                                                    "answer": "string"
                                                }
                                            }
                                        ],
                                        "dateOfBirth": 0
                                    },
                                    "profile": {
                                        "acceptsPromotionalEmail": true,
                                        "language": "string",
                                        "nickName": "string",
                                        "registrationDate": 0,
                                        "acceptsRewards": true,
                                        "preferredCurrency": "string",
                                        "registrationLevel": null,
                                        "userName": "string",
                                        "playerHash": "string",
                                        "preferredCommunicationChannel": "string",
                                        "communicationPreferences": {
                                            "preferredChannel": "EMAIL_CHANNEL",
                                            "pushClients": {
                                                "MAINTENANCE": true,
                                                "ALERT": true,
                                                "ALARM": true,
                                                "PROMOTION": true
                                            },
                                            "sms": {
                                                "MAINTENANCE": true,
                                                "ALERT": true,
                                                "ALARM": true,
                                                "PROMOTION": true
                                            },
                                            "email": {
                                                "MAINTENANCE": true,
                                                "ALERT": true,
                                                "ALARM": true,
                                                "PROMOTION": true
                                            },
                                            "smsPersonalBlackoutTime": {
                                                "enabled": false,
                                                "startTime": "2024-03-15",
                                                "endTime": "2024-03-15"
                                            },
                                            "smsGlobalBlackoutTime": {
                                                "enabled": false,
                                                "startTime": "2024-03-15",
                                                "endTime": "2024-03-15"
                                            },
                                            "emailFormat": "HTML",
                                            "pushClientPersonalBlackoutTime": {
                                                "enabled": false,
                                                "startTime": "2024-03-15",
                                                "endTime": "2024-03-15"
                                            },
                                            "pushClientGlobalBlackoutTime": {
                                                "enabled": false,
                                                "startTime": "2024-03-15",
                                                "endTime": "2024-03-15"
                                            }
                                        },
                                        "notificationPreferences": [
                                            {
                                                "id": "string",
                                                "eventType": "string",
                                                "channels": {
                                                    "PUSH_CLIENT": {
                                                        "type": "PUSH_CLIENT",
                                                        "contactIDs": [
                                                            "string"
                                                        ],
                                                        "enabled": true,
                                                        "preferred": true
                                                    },
                                                    "SMS": {
                                                        "type": "PUSH_CLIENT",
                                                        "contactIDs": [
                                                            "string"
                                                        ],
                                                        "enabled": true,
                                                        "preferred": true
                                                    },
                                                    "EMAIL": {
                                                        "type": "PUSH_CLIENT",
                                                        "contactIDs": [
                                                            "string"
                                                        ],
                                                        "enabled": true,
                                                        "preferred": true
                                                    },
                                                    "PLAYER_PORTAL": {
                                                        "type": "PUSH_CLIENT",
                                                        "contactIDs": [
                                                            "string"
                                                        ],
                                                        "enabled": true,
                                                        "preferred": true
                                                    }
                                                },
                                                "eventPreferences": {},
                                                "notificationType": "MAINTENANCE",
                                                "required": true
                                            }
                                        ],
                                        "affiliateId": "string",
                                        "geteInstantGamesEnabled": true
                                    },
                                    "nonpublicPersonalInfo": {
                                        "dateOfBirth": 0,
                                        "feinNumber": "<feinNumber>",
                                        "identificationNumber": "<identificationNumber>",
                                        "identificationIssuer": "<identificationIssuer>",
                                        "socialSecurityNumber": "<socialSecurityNumber>"
                                    },
                                    "optIntoGeoCompliance": true,
                                    "promotions": [
                                        {
                                            "name": "string",
                                            "description": "string",
                                            "startTime": 0,
                                            "endTime": 0,
                                            "type": "string",
                                            "prizeType": "string",
                                            "id": "string",
                                            "discountAmount": 0,
                                            "cashPrizeAmount": 0,
                                            "serialNumber": "string",
                                            "drawId": "string",
                                            "drawDate": "string",
                                            "transactionTime": "string",
                                            "text": [
                                                {
                                                    "type": "string",
                                                    "position": "string",
                                                    "text": "string"
                                                }
                                            ],
                                            "state": "string",
                                            "promotionCriteria": [
                                                {
                                                    "priority": 0,
                                                    "gameName": "string",
                                                    "minBoardAmount": 0,
                                                    "maxBoardAmount": 0,
                                                    "minNumberOfBoards": 0,
                                                    "maxNumberOfBoards": 0,
                                                    "minWagerDuration": 0,
                                                    "maxWagerDuration": 0,
                                                    "minAdvancedDraw": 0,
                                                    "maxAdvancedDraw": 0,
                                                    "multiplierOption": "string",
                                                    "betTypes": [
                                                        "string"
                                                    ],
                                                    "playTypes": [
                                                        "string"
                                                    ],
                                                    "openCloseTimes": [
                                                        {
                                                            "dayOfWeek": "MONDAY",
                                                            "openHour": 0,
                                                            "openMinute": 0,
                                                            "closeHour": 0,
                                                            "closeMinute": 0
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ],
                                    "consents": [
                                        {
                                            "id": "1",
                                            "userType": {
                                                "userTypeId": "2",
                                                "brandId": "25",
                                                "partnerId": "1",
                                                "userTypeDescription": "full"
                                            },
                                            "callerSystem": {
                                                "callerSystem": "2",
                                                "description": "Mobile"
                                            },
                                            "version": "2",
                                            "nextVersion": "3",
                                            "enabled": true,
                                            "requiresConsent": true,
                                            "updateDate": 1583147293493,
                                            "language": "en_US"
                                        }
                                    ],
                                    "verifications": [
                                        {
                                            "name": "kyc",
                                            "verificationStatuses": [
                                                {
                                                    "verificationProvider": "IDology",
                                                    "status": "VERIFIED",
                                                    "verificationMessages": [
                                                        "string"
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Business exception",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server unavailable",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/players/self": {
            "get": {
                "summary": "Get registered user's data",
                "description": "Get registered user's data",
                "operationId": "getRegisteredUserData",
                "responses": {
                    "200": {
                        "description": "Registered user",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RegistrationDTO"
                                },
                                "example": {
                                    "password": "***",
                                    "personalInfo": {
                                        "firstName": "string",
                                        "middleName": "string",
                                        "lastName": "string",
                                        "prefix": "string",
                                        "suffix": "string",
                                        "gender": "MALE",
                                        "salutation": "Welcome",
                                        "kyc": {
                                            "status": 0,
                                            "attemptsLeft": 0
                                        },
                                        "addresses": {
                                            "HOME": {
                                                "address1": "string",
                                                "address2": "string",
                                                "address3": "string",
                                                "region": "string"
                                            },
                                            "BUSINESS": {
                                                "address1": "string",
                                                "address2": "string",
                                                "address3": "string",
                                                "region": "string"
                                            },
                                            "CONTACT": {
                                                "address1": "string",
                                                "address2": "string",
                                                "address3": "string",
                                                "region": "string"
                                            },
                                            "BILLING": {
                                                "address1": "string",
                                                "address2": "string",
                                                "address3": "string",
                                                "region": "string"
                                            },
                                            "MAILING": {
                                                "address1": "string",
                                                "address2": "string",
                                                "address3": "string",
                                                "region": "string"
                                            }
                                        },
                                        "phones": {
                                            "HOME": {
                                                "type": "HOME",
                                                "number": "string",
                                                "extension": "string",
                                                "provider": "string"
                                            },
                                            "BUSINESS": {
                                                "type": "HOME",
                                                "number": "string",
                                                "extension": "string",
                                                "provider": "string"
                                            },
                                            "MOBILE": {
                                                "type": "HOME",
                                                "number": "string",
                                                "extension": "string",
                                                "provider": "string"
                                            },
                                            "LANDLINE": {
                                                "type": "HOME",
                                                "number": "string",
                                                "extension": "string",
                                                "provider": "string"
                                            }
                                        },
                                        "emails": {
                                            "PERSONAL": {
                                                "type": "PERSONAL",
                                                "address": "string",
                                                "verified": true
                                            },
                                            "BUSINESS": {
                                                "type": "PERSONAL",
                                                "address": "string",
                                                "verified": true
                                            }
                                        },
                                        "pushClients": {
                                            "PUSH_CLIENT_1": {
                                                "id": "string",
                                                "type": "ANDROID",
                                                "externalClientId": "string",
                                                "name": "string"
                                            },
                                            "PUSH_CLIENT_2": {
                                                "id": "string",
                                                "type": "ANDROID",
                                                "externalClientId": "string",
                                                "name": "string"
                                            },
                                            "PUSH_CLIENT_3": {
                                                "id": "string",
                                                "type": "ANDROID",
                                                "externalClientId": "string",
                                                "name": "string"
                                            },
                                            "PUSH_CLIENT_4": {
                                                "id": "string",
                                                "type": "ANDROID",
                                                "externalClientId": "string",
                                                "name": "string"
                                            },
                                            "PUSH_CLIENT_5": {
                                                "id": "string",
                                                "type": "ANDROID",
                                                "externalClientId": "string",
                                                "name": "string"
                                            },
                                            "PUSH_CLIENT_6": {
                                                "id": "string",
                                                "type": "ANDROID",
                                                "externalClientId": "string",
                                                "name": "string"
                                            },
                                            "PUSH_CLIENT_7": {
                                                "id": "string",
                                                "type": "ANDROID",
                                                "externalClientId": "string",
                                                "name": "string"
                                            },
                                            "PUSH_CLIENT_8": {
                                                "id": "string",
                                                "type": "ANDROID",
                                                "externalClientId": "string",
                                                "name": "string"
                                            },
                                            "PUSH_CLIENT_9": {
                                                "id": "string",
                                                "type": "ANDROID",
                                                "externalClientId": "string",
                                                "name": "string"
                                            },
                                            "PUSH_CLIENT_10": {
                                                "id": "string",
                                                "type": "ANDROID",
                                                "externalClientId": "string",
                                                "name": "string"
                                            }
                                        },
                                        "citizenship": "string",
                                        "passwordHints": [
                                            {
                                                "securityQuestion": {
                                                    "id": "string",
                                                    "question": "string"
                                                },
                                                "securityAnswer": {
                                                    "id": "string",
                                                    "answer": "string"
                                                }
                                            }
                                        ],
                                        "dateOfBirth": 0
                                    },
                                    "profile": {
                                        "acceptsPromotionalEmail": true,
                                        "language": "string",
                                        "nickName": "string",
                                        "registrationDate": 0,
                                        "acceptsRewards": true,
                                        "preferredCurrency": "string",
                                        "registrationLevel": null,
                                        "userName": "string",
                                        "playerHash": "string",
                                        "preferredCommunicationChannel": "string",
                                        "communicationPreferences": {
                                            "preferredChannel": "EMAIL_CHANNEL",
                                            "pushClients": {
                                                "MAINTENANCE": true,
                                                "ALERT": true,
                                                "ALARM": true,
                                                "PROMOTION": true
                                            },
                                            "sms": {
                                                "MAINTENANCE": true,
                                                "ALERT": true,
                                                "ALARM": true,
                                                "PROMOTION": true
                                            },
                                            "email": {
                                                "MAINTENANCE": true,
                                                "ALERT": true,
                                                "ALARM": true,
                                                "PROMOTION": true
                                            },
                                            "smsPersonalBlackoutTime": {
                                                "enabled": false,
                                                "startTime": "2024-03-15",
                                                "endTime": "2024-03-15"
                                            },
                                            "smsGlobalBlackoutTime": {
                                                "enabled": false,
                                                "startTime": "2024-03-15",
                                                "endTime": "2024-03-15"
                                            },
                                            "emailFormat": "HTML",
                                            "pushClientPersonalBlackoutTime": {
                                                "enabled": false,
                                                "startTime": "2024-03-15",
                                                "endTime": "2024-03-15"
                                            },
                                            "pushClientGlobalBlackoutTime": {
                                                "enabled": false,
                                                "startTime": "2024-03-15",
                                                "endTime": "2024-03-15"
                                            }
                                        },
                                        "notificationPreferences": [
                                            {
                                                "id": "string",
                                                "eventType": "string",
                                                "channels": {
                                                    "PUSH_CLIENT": {
                                                        "type": "PUSH_CLIENT",
                                                        "contactIDs": [
                                                            "string"
                                                        ],
                                                        "enabled": true,
                                                        "preferred": true
                                                    },
                                                    "SMS": {
                                                        "type": "PUSH_CLIENT",
                                                        "contactIDs": [
                                                            "string"
                                                        ],
                                                        "enabled": true,
                                                        "preferred": true
                                                    },
                                                    "EMAIL": {
                                                        "type": "PUSH_CLIENT",
                                                        "contactIDs": [
                                                            "string"
                                                        ],
                                                        "enabled": true,
                                                        "preferred": true
                                                    },
                                                    "PLAYER_PORTAL": {
                                                        "type": "PUSH_CLIENT",
                                                        "contactIDs": [
                                                            "string"
                                                        ],
                                                        "enabled": true,
                                                        "preferred": true
                                                    }
                                                },
                                                "eventPreferences": {},
                                                "notificationType": "MAINTENANCE",
                                                "required": true
                                            }
                                        ],
                                        "affiliateId": "string",
                                        "geteInstantGamesEnabled": true
                                    },
                                    "nonpublicPersonalInfo": {
                                        "dateOfBirth": 0,
                                        "feinNumber": "<feinNumber>",
                                        "identificationNumber": "<identificationNumber>",
                                        "identificationIssuer": "<identificationIssuer>",
                                        "socialSecurityNumber": "<socialSecurityNumber>"
                                    },
                                    "optIntoGeoCompliance": true,
                                    "promotions": [
                                        {
                                            "name": "string",
                                            "description": "string",
                                            "startTime": 0,
                                            "endTime": 0,
                                            "type": "string",
                                            "prizeType": "string",
                                            "id": "string",
                                            "discountAmount": 0,
                                            "cashPrizeAmount": 0,
                                            "serialNumber": "string",
                                            "drawId": "string",
                                            "drawDate": "string",
                                            "transactionTime": "string",
                                            "text": [
                                                {
                                                    "type": "string",
                                                    "position": "string",
                                                    "text": "string"
                                                }
                                            ],
                                            "state": "string",
                                            "promotionCriteria": [
                                                {
                                                    "priority": 0,
                                                    "gameName": "string",
                                                    "minBoardAmount": 0,
                                                    "maxBoardAmount": 0,
                                                    "minNumberOfBoards": 0,
                                                    "maxNumberOfBoards": 0,
                                                    "minWagerDuration": 0,
                                                    "maxWagerDuration": 0,
                                                    "minAdvancedDraw": 0,
                                                    "maxAdvancedDraw": 0,
                                                    "multiplierOption": "string",
                                                    "betTypes": [
                                                        "string"
                                                    ],
                                                    "playTypes": [
                                                        "string"
                                                    ],
                                                    "openCloseTimes": [
                                                        {
                                                            "dayOfWeek": "MONDAY",
                                                            "openHour": 0,
                                                            "openMinute": 0,
                                                            "closeHour": 0,
                                                            "closeMinute": 0
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ],
                                    "consents": [
                                        {
                                            "id": "1",
                                            "userType": {
                                                "userTypeId": "2",
                                                "brandId": "25",
                                                "partnerId": "1",
                                                "userTypeDescription": "full"
                                            },
                                            "callerSystem": {
                                                "callerSystem": "2",
                                                "description": "Mobile"
                                            },
                                            "version": "2",
                                            "nextVersion": "3",
                                            "enabled": true,
                                            "requiresConsent": true,
                                            "updateDate": 1583147293493,
                                            "language": "en_US"
                                        }
                                    ],
                                    "verifications": [
                                        {
                                            "name": "kyc",
                                            "verificationStatuses": [
                                                {
                                                    "verificationProvider": "IDology",
                                                    "status": "VERIFIED",
                                                    "verificationMessages": [
                                                        "string"
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Business exception",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server unavailable",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/players/self/upgrade": {
            "put": {
                "summary": "Upgrade a player",
                "description": "Upgrade a player",
                "operationId": "upgradeRegistration",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RegistrationDTO"
                            },
                            "example": {
                                "password": "***",
                                "personalInfo": {
                                    "firstName": "string",
                                    "middleName": "string",
                                    "lastName": "string",
                                    "prefix": "string",
                                    "suffix": "string",
                                    "gender": "MALE",
                                    "salutation": "Welcome",
                                    "kyc": {
                                        "status": 0,
                                        "attemptsLeft": 0
                                    },
                                    "addresses": {
                                        "HOME": {
                                            "address1": "string",
                                            "address2": "string",
                                            "address3": "string",
                                            "region": "string"
                                        },
                                        "BUSINESS": {
                                            "address1": "string",
                                            "address2": "string",
                                            "address3": "string",
                                            "region": "string"
                                        },
                                        "CONTACT": {
                                            "address1": "string",
                                            "address2": "string",
                                            "address3": "string",
                                            "region": "string"
                                        },
                                        "BILLING": {
                                            "address1": "string",
                                            "address2": "string",
                                            "address3": "string",
                                            "region": "string"
                                        },
                                        "MAILING": {
                                            "address1": "string",
                                            "address2": "string",
                                            "address3": "string",
                                            "region": "string"
                                        }
                                    },
                                    "phones": {
                                        "HOME": {
                                            "type": "HOME",
                                            "number": "string",
                                            "extension": "string",
                                            "provider": "string"
                                        },
                                        "BUSINESS": {
                                            "type": "HOME",
                                            "number": "string",
                                            "extension": "string",
                                            "provider": "string"
                                        },
                                        "MOBILE": {
                                            "type": "HOME",
                                            "number": "string",
                                            "extension": "string",
                                            "provider": "string"
                                        },
                                        "LANDLINE": {
                                            "type": "HOME",
                                            "number": "string",
                                            "extension": "string",
                                            "provider": "string"
                                        }
                                    },
                                    "emails": {
                                        "PERSONAL": {
                                            "type": "PERSONAL",
                                            "address": "string",
                                            "verified": true
                                        },
                                        "BUSINESS": {
                                            "type": "PERSONAL",
                                            "address": "string",
                                            "verified": true
                                        }
                                    },
                                    "pushClients": {
                                        "PUSH_CLIENT_1": {
                                            "id": "string",
                                            "type": "ANDROID",
                                            "externalClientId": "string",
                                            "name": "string"
                                        },
                                        "PUSH_CLIENT_2": {
                                            "id": "string",
                                            "type": "ANDROID",
                                            "externalClientId": "string",
                                            "name": "string"
                                        },
                                        "PUSH_CLIENT_3": {
                                            "id": "string",
                                            "type": "ANDROID",
                                            "externalClientId": "string",
                                            "name": "string"
                                        },
                                        "PUSH_CLIENT_4": {
                                            "id": "string",
                                            "type": "ANDROID",
                                            "externalClientId": "string",
                                            "name": "string"
                                        },
                                        "PUSH_CLIENT_5": {
                                            "id": "string",
                                            "type": "ANDROID",
                                            "externalClientId": "string",
                                            "name": "string"
                                        },
                                        "PUSH_CLIENT_6": {
                                            "id": "string",
                                            "type": "ANDROID",
                                            "externalClientId": "string",
                                            "name": "string"
                                        },
                                        "PUSH_CLIENT_7": {
                                            "id": "string",
                                            "type": "ANDROID",
                                            "externalClientId": "string",
                                            "name": "string"
                                        },
                                        "PUSH_CLIENT_8": {
                                            "id": "string",
                                            "type": "ANDROID",
                                            "externalClientId": "string",
                                            "name": "string"
                                        },
                                        "PUSH_CLIENT_9": {
                                            "id": "string",
                                            "type": "ANDROID",
                                            "externalClientId": "string",
                                            "name": "string"
                                        },
                                        "PUSH_CLIENT_10": {
                                            "id": "string",
                                            "type": "ANDROID",
                                            "externalClientId": "string",
                                            "name": "string"
                                        }
                                    },
                                    "citizenship": "string",
                                    "passwordHints": [
                                        {
                                            "securityQuestion": {
                                                "id": "string",
                                                "question": "string"
                                            },
                                            "securityAnswer": {
                                                "id": "string",
                                                "answer": "string"
                                            }
                                        }
                                    ],
                                    "dateOfBirth": 0
                                },
                                "profile": {
                                    "acceptsPromotionalEmail": true,
                                    "language": "string",
                                    "nickName": "string",
                                    "registrationDate": 0,
                                    "acceptsRewards": true,
                                    "preferredCurrency": "string",
                                    "registrationLevel": null,
                                    "userName": "string",
                                    "playerHash": "string",
                                    "preferredCommunicationChannel": "string",
                                    "communicationPreferences": {
                                        "preferredChannel": "EMAIL_CHANNEL",
                                        "pushClients": {
                                            "MAINTENANCE": true,
                                            "ALERT": true,
                                            "ALARM": true,
                                            "PROMOTION": true
                                        },
                                        "sms": {
                                            "MAINTENANCE": true,
                                            "ALERT": true,
                                            "ALARM": true,
                                            "PROMOTION": true
                                        },
                                        "email": {
                                            "MAINTENANCE": true,
                                            "ALERT": true,
                                            "ALARM": true,
                                            "PROMOTION": true
                                        },
                                        "smsPersonalBlackoutTime": {
                                            "enabled": false,
                                            "startTime": "2024-03-15",
                                            "endTime": "2024-03-15"
                                        },
                                        "smsGlobalBlackoutTime": {
                                            "enabled": false,
                                            "startTime": "2024-03-15",
                                            "endTime": "2024-03-15"
                                        },
                                        "emailFormat": "HTML",
                                        "pushClientPersonalBlackoutTime": {
                                            "enabled": false,
                                            "startTime": "2024-03-15",
                                            "endTime": "2024-03-15"
                                        },
                                        "pushClientGlobalBlackoutTime": {
                                            "enabled": false,
                                            "startTime": "2024-03-15",
                                            "endTime": "2024-03-15"
                                        }
                                    },
                                    "notificationPreferences": [
                                        {
                                            "id": "string",
                                            "eventType": "string",
                                            "channels": {
                                                "PUSH_CLIENT": {
                                                    "type": "PUSH_CLIENT",
                                                    "contactIDs": [
                                                        "string"
                                                    ],
                                                    "enabled": true,
                                                    "preferred": true
                                                },
                                                "SMS": {
                                                    "type": "PUSH_CLIENT",
                                                    "contactIDs": [
                                                        "string"
                                                    ],
                                                    "enabled": true,
                                                    "preferred": true
                                                },
                                                "EMAIL": {
                                                    "type": "PUSH_CLIENT",
                                                    "contactIDs": [
                                                        "string"
                                                    ],
                                                    "enabled": true,
                                                    "preferred": true
                                                },
                                                "PLAYER_PORTAL": {
                                                    "type": "PUSH_CLIENT",
                                                    "contactIDs": [
                                                        "string"
                                                    ],
                                                    "enabled": true,
                                                    "preferred": true
                                                }
                                            },
                                            "eventPreferences": {},
                                            "notificationType": "MAINTENANCE",
                                            "required": true
                                        }
                                    ],
                                    "affiliateId": "string",
                                    "geteInstantGamesEnabled": true
                                },
                                "nonpublicPersonalInfo": {
                                    "dateOfBirth": 0,
                                    "feinNumber": "<feinNumber>",
                                    "identificationNumber": "<identificationNumber>",
                                    "identificationIssuer": "<identificationIssuer>",
                                    "socialSecurityNumber": "<socialSecurityNumber>"
                                },
                                "optIntoGeoCompliance": true,
                                "promotions": [
                                    {
                                        "name": "string",
                                        "description": "string",
                                        "startTime": 0,
                                        "endTime": 0,
                                        "type": "string",
                                        "prizeType": "string",
                                        "id": "string",
                                        "discountAmount": 0,
                                        "cashPrizeAmount": 0,
                                        "serialNumber": "string",
                                        "drawId": "string",
                                        "drawDate": "string",
                                        "transactionTime": "string",
                                        "text": [
                                            {
                                                "type": "string",
                                                "position": "string",
                                                "text": "string"
                                            }
                                        ],
                                        "state": "string",
                                        "promotionCriteria": [
                                            {
                                                "priority": 0,
                                                "gameName": "string",
                                                "minBoardAmount": 0,
                                                "maxBoardAmount": 0,
                                                "minNumberOfBoards": 0,
                                                "maxNumberOfBoards": 0,
                                                "minWagerDuration": 0,
                                                "maxWagerDuration": 0,
                                                "minAdvancedDraw": 0,
                                                "maxAdvancedDraw": 0,
                                                "multiplierOption": "string",
                                                "betTypes": [
                                                    "string"
                                                ],
                                                "playTypes": [
                                                    "string"
                                                ],
                                                "openCloseTimes": [
                                                    {
                                                        "dayOfWeek": "MONDAY",
                                                        "openHour": 0,
                                                        "openMinute": 0,
                                                        "closeHour": 0,
                                                        "closeMinute": 0
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ],
                                "consents": [
                                    {
                                        "id": "1",
                                        "userType": {
                                            "userTypeId": "2",
                                            "brandId": "25",
                                            "partnerId": "1",
                                            "userTypeDescription": "full"
                                        },
                                        "callerSystem": {
                                            "callerSystem": "2",
                                            "description": "Mobile"
                                        },
                                        "version": "2",
                                        "nextVersion": "3",
                                        "enabled": true,
                                        "requiresConsent": true,
                                        "updateDate": 1583147293493,
                                        "language": "en_US"
                                    }
                                ],
                                "verifications": [
                                    {
                                        "name": "kyc",
                                        "verificationStatuses": [
                                            {
                                                "verificationProvider": "IDology",
                                                "status": "VERIFIED",
                                                "verificationMessages": [
                                                    "string"
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Registered user",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RegistrationDTO"
                                },
                                "example": {
                                    "password": "***",
                                    "personalInfo": {
                                        "firstName": "string",
                                        "middleName": "string",
                                        "lastName": "string",
                                        "prefix": "string",
                                        "suffix": "string",
                                        "gender": "MALE",
                                        "salutation": "Welcome",
                                        "kyc": {
                                            "status": 0,
                                            "attemptsLeft": 0
                                        },
                                        "addresses": {
                                            "HOME": {
                                                "address1": "string",
                                                "address2": "string",
                                                "address3": "string",
                                                "region": "string"
                                            },
                                            "BUSINESS": {
                                                "address1": "string",
                                                "address2": "string",
                                                "address3": "string",
                                                "region": "string"
                                            },
                                            "CONTACT": {
                                                "address1": "string",
                                                "address2": "string",
                                                "address3": "string",
                                                "region": "string"
                                            },
                                            "BILLING": {
                                                "address1": "string",
                                                "address2": "string",
                                                "address3": "string",
                                                "region": "string"
                                            },
                                            "MAILING": {
                                                "address1": "string",
                                                "address2": "string",
                                                "address3": "string",
                                                "region": "string"
                                            }
                                        },
                                        "phones": {
                                            "HOME": {
                                                "type": "HOME",
                                                "number": "string",
                                                "extension": "string",
                                                "provider": "string"
                                            },
                                            "BUSINESS": {
                                                "type": "HOME",
                                                "number": "string",
                                                "extension": "string",
                                                "provider": "string"
                                            },
                                            "MOBILE": {
                                                "type": "HOME",
                                                "number": "string",
                                                "extension": "string",
                                                "provider": "string"
                                            },
                                            "LANDLINE": {
                                                "type": "HOME",
                                                "number": "string",
                                                "extension": "string",
                                                "provider": "string"
                                            }
                                        },
                                        "emails": {
                                            "PERSONAL": {
                                                "type": "PERSONAL",
                                                "address": "string",
                                                "verified": true
                                            },
                                            "BUSINESS": {
                                                "type": "PERSONAL",
                                                "address": "string",
                                                "verified": true
                                            }
                                        },
                                        "pushClients": {
                                            "PUSH_CLIENT_1": {
                                                "id": "string",
                                                "type": "ANDROID",
                                                "externalClientId": "string",
                                                "name": "string"
                                            },
                                            "PUSH_CLIENT_2": {
                                                "id": "string",
                                                "type": "ANDROID",
                                                "externalClientId": "string",
                                                "name": "string"
                                            },
                                            "PUSH_CLIENT_3": {
                                                "id": "string",
                                                "type": "ANDROID",
                                                "externalClientId": "string",
                                                "name": "string"
                                            },
                                            "PUSH_CLIENT_4": {
                                                "id": "string",
                                                "type": "ANDROID",
                                                "externalClientId": "string",
                                                "name": "string"
                                            },
                                            "PUSH_CLIENT_5": {
                                                "id": "string",
                                                "type": "ANDROID",
                                                "externalClientId": "string",
                                                "name": "string"
                                            },
                                            "PUSH_CLIENT_6": {
                                                "id": "string",
                                                "type": "ANDROID",
                                                "externalClientId": "string",
                                                "name": "string"
                                            },
                                            "PUSH_CLIENT_7": {
                                                "id": "string",
                                                "type": "ANDROID",
                                                "externalClientId": "string",
                                                "name": "string"
                                            },
                                            "PUSH_CLIENT_8": {
                                                "id": "string",
                                                "type": "ANDROID",
                                                "externalClientId": "string",
                                                "name": "string"
                                            },
                                            "PUSH_CLIENT_9": {
                                                "id": "string",
                                                "type": "ANDROID",
                                                "externalClientId": "string",
                                                "name": "string"
                                            },
                                            "PUSH_CLIENT_10": {
                                                "id": "string",
                                                "type": "ANDROID",
                                                "externalClientId": "string",
                                                "name": "string"
                                            }
                                        },
                                        "citizenship": "string",
                                        "passwordHints": [
                                            {
                                                "securityQuestion": {
                                                    "id": "string",
                                                    "question": "string"
                                                },
                                                "securityAnswer": {
                                                    "id": "string",
                                                    "answer": "string"
                                                }
                                            }
                                        ],
                                        "dateOfBirth": 0
                                    },
                                    "profile": {
                                        "acceptsPromotionalEmail": true,
                                        "language": "string",
                                        "nickName": "string",
                                        "registrationDate": 0,
                                        "acceptsRewards": true,
                                        "preferredCurrency": "string",
                                        "registrationLevel": null,
                                        "userName": "string",
                                        "playerHash": "string",
                                        "preferredCommunicationChannel": "string",
                                        "communicationPreferences": {
                                            "preferredChannel": "EMAIL_CHANNEL",
                                            "pushClients": {
                                                "MAINTENANCE": true,
                                                "ALERT": true,
                                                "ALARM": true,
                                                "PROMOTION": true
                                            },
                                            "sms": {
                                                "MAINTENANCE": true,
                                                "ALERT": true,
                                                "ALARM": true,
                                                "PROMOTION": true
                                            },
                                            "email": {
                                                "MAINTENANCE": true,
                                                "ALERT": true,
                                                "ALARM": true,
                                                "PROMOTION": true
                                            },
                                            "smsPersonalBlackoutTime": {
                                                "enabled": false,
                                                "startTime": "2024-03-15",
                                                "endTime": "2024-03-15"
                                            },
                                            "smsGlobalBlackoutTime": {
                                                "enabled": false,
                                                "startTime": "2024-03-15",
                                                "endTime": "2024-03-15"
                                            },
                                            "emailFormat": "HTML",
                                            "pushClientPersonalBlackoutTime": {
                                                "enabled": false,
                                                "startTime": "2024-03-15",
                                                "endTime": "2024-03-15"
                                            },
                                            "pushClientGlobalBlackoutTime": {
                                                "enabled": false,
                                                "startTime": "2024-03-15",
                                                "endTime": "2024-03-15"
                                            }
                                        },
                                        "notificationPreferences": [
                                            {
                                                "id": "string",
                                                "eventType": "string",
                                                "channels": {
                                                    "PUSH_CLIENT": {
                                                        "type": "PUSH_CLIENT",
                                                        "contactIDs": [
                                                            "string"
                                                        ],
                                                        "enabled": true,
                                                        "preferred": true
                                                    },
                                                    "SMS": {
                                                        "type": "PUSH_CLIENT",
                                                        "contactIDs": [
                                                            "string"
                                                        ],
                                                        "enabled": true,
                                                        "preferred": true
                                                    },
                                                    "EMAIL": {
                                                        "type": "PUSH_CLIENT",
                                                        "contactIDs": [
                                                            "string"
                                                        ],
                                                        "enabled": true,
                                                        "preferred": true
                                                    },
                                                    "PLAYER_PORTAL": {
                                                        "type": "PUSH_CLIENT",
                                                        "contactIDs": [
                                                            "string"
                                                        ],
                                                        "enabled": true,
                                                        "preferred": true
                                                    }
                                                },
                                                "eventPreferences": {},
                                                "notificationType": "MAINTENANCE",
                                                "required": true
                                            }
                                        ],
                                        "affiliateId": "string",
                                        "geteInstantGamesEnabled": true
                                    },
                                    "nonpublicPersonalInfo": {
                                        "dateOfBirth": 0,
                                        "feinNumber": "<feinNumber>",
                                        "identificationNumber": "<identificationNumber>",
                                        "identificationIssuer": "<identificationIssuer>",
                                        "socialSecurityNumber": "<socialSecurityNumber>"
                                    },
                                    "optIntoGeoCompliance": true,
                                    "promotions": [
                                        {
                                            "name": "string",
                                            "description": "string",
                                            "startTime": 0,
                                            "endTime": 0,
                                            "type": "string",
                                            "prizeType": "string",
                                            "id": "string",
                                            "discountAmount": 0,
                                            "cashPrizeAmount": 0,
                                            "serialNumber": "string",
                                            "drawId": "string",
                                            "drawDate": "string",
                                            "transactionTime": "string",
                                            "text": [
                                                {
                                                    "type": "string",
                                                    "position": "string",
                                                    "text": "string"
                                                }
                                            ],
                                            "state": "string",
                                            "promotionCriteria": [
                                                {
                                                    "priority": 0,
                                                    "gameName": "string",
                                                    "minBoardAmount": 0,
                                                    "maxBoardAmount": 0,
                                                    "minNumberOfBoards": 0,
                                                    "maxNumberOfBoards": 0,
                                                    "minWagerDuration": 0,
                                                    "maxWagerDuration": 0,
                                                    "minAdvancedDraw": 0,
                                                    "maxAdvancedDraw": 0,
                                                    "multiplierOption": "string",
                                                    "betTypes": [
                                                        "string"
                                                    ],
                                                    "playTypes": [
                                                        "string"
                                                    ],
                                                    "openCloseTimes": [
                                                        {
                                                            "dayOfWeek": "MONDAY",
                                                            "openHour": 0,
                                                            "openMinute": 0,
                                                            "closeHour": 0,
                                                            "closeMinute": 0
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ],
                                    "consents": [
                                        {
                                            "id": "1",
                                            "userType": {
                                                "userTypeId": "2",
                                                "brandId": "25",
                                                "partnerId": "1",
                                                "userTypeDescription": "full"
                                            },
                                            "callerSystem": {
                                                "callerSystem": "2",
                                                "description": "Mobile"
                                            },
                                            "version": "2",
                                            "nextVersion": "3",
                                            "enabled": true,
                                            "requiresConsent": true,
                                            "updateDate": 1583147293493,
                                            "language": "en_US"
                                        }
                                    ],
                                    "verifications": [
                                        {
                                            "name": "kyc",
                                            "verificationStatuses": [
                                                {
                                                    "verificationProvider": "IDology",
                                                    "status": "VERIFIED",
                                                    "verificationMessages": [
                                                        "string"
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Business exception",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server unavailable",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/players/self/self-exclusion/set": {
            "put": {
                "summary": "Set self exclusion",
                "description": "Sets player's self exclusion for a specific time",
                "operationId": "setSelfExclusionTime",
                "requestBody": {
                    "description": "Self exclusion request",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SelfExclusionRequestDTO"
                            },
                            "example": {
                                "selfExclusionTime": 1597449599000,
                                "reason": "Some reason"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Self exclusion set"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "User not authenticated"
                    },
                    "500": {
                        "description": "System exception"
                    },
                    "503": {
                        "description": "System not available. Retry later"
                    }
                }
            }
        },
        "/players/self/self-exclusion/retrieve": {
            "get": {
                "summary": "Get self exclusion",
                "description": "Get self exclusion",
                "operationId": "retrieveSelfExclusion",
                "responses": {
                    "200": {
                        "description": "An information about player self-exclusion data",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SelfExclusionResponseDTO"
                                },
                                "example": {
                                    "playerIsSelfExcluded": true,
                                    "selfExclusionTime": 1597449599000,
                                    "reason": "Some reason"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "User not authenticated"
                    },
                    "500": {
                        "description": "System exception"
                    },
                    "503": {
                        "description": "System not available. Retry later"
                    }
                }
            }
        },
        "/players/self/session-limits": {
            "get": {
                "summary": "Get player session limits",
                "description": "Gets player session limits",
                "operationId": "fetchSessionLimits",
                "responses": {
                    "200": {
                        "description": "SessionLimitsDTO for player",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SessionLimitsDTO"
                                },
                                "example": {
                                    "singleSessionLimit": 0,
                                    "dailyLimit": 0,
                                    "weeklyLimit": 0,
                                    "monthlyLimit": 0,
                                    "maxSingleSessionLimit": 0,
                                    "maxDailyLimit": 0,
                                    "maxWeeklyLimit": 0,
                                    "maxMonthlyLimit": 0
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/SessionLimitsDTO"
                                },
                                "example": "<SessionLimitsDTO> <singleSessionLimit>0</singleSessionLimit> <dailyLimit>0</dailyLimit> <weeklyLimit>0</weeklyLimit> <monthlyLimit>0</monthlyLimit> <maxSingleSessionLimit>0</maxSingleSessionLimit> <maxDailyLimit>0</maxDailyLimit> <maxWeeklyLimit>0</maxWeeklyLimit> <maxMonthlyLimit>0</maxMonthlyLimit> </SessionLimitsDTO>"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    },
                    "500": {
                        "description": "System exception",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    },
                    "503": {
                        "description": "System not available. Retry later",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    }
                }
            },
            "put": {
                "summary": "Update player limits",
                "description": "Updates session-limits for player",
                "operationId": "updateSessionLimits",
                "requestBody": {
                    "description": "SessionLimitsDTO that contain data for the update",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SessionLimitsDTO"
                            },
                            "example": {
                                "singleSessionLimit": 0,
                                "dailyLimit": 0,
                                "weeklyLimit": 0,
                                "monthlyLimit": 0,
                                "maxSingleSessionLimit": 0,
                                "maxDailyLimit": 0,
                                "maxWeeklyLimit": 0,
                                "maxMonthlyLimit": 0
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "updated SessionLimitsDTO",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SessionLimitsDTO"
                                },
                                "example": {
                                    "singleSessionLimit": 0,
                                    "dailyLimit": 0,
                                    "weeklyLimit": 0,
                                    "monthlyLimit": 0,
                                    "maxSingleSessionLimit": 0,
                                    "maxDailyLimit": 0,
                                    "maxWeeklyLimit": 0,
                                    "maxMonthlyLimit": 0
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/SessionLimitsDTO"
                                },
                                "example": "<SessionLimitsDTO> <singleSessionLimit>0</singleSessionLimit> <dailyLimit>0</dailyLimit> <weeklyLimit>0</weeklyLimit> <monthlyLimit>0</monthlyLimit> <maxSingleSessionLimit>0</maxSingleSessionLimit> <maxDailyLimit>0</maxDailyLimit> <maxWeeklyLimit>0</maxWeeklyLimit> <maxMonthlyLimit>0</maxMonthlyLimit> </SessionLimitsDTO>"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    },
                    "500": {
                        "description": "System exception",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    },
                    "503": {
                        "description": "System not available. Retry later",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    }
                }
            }
        },
        "/notifications/unsubscribe": {
            "post": {
                "summary": "Unsubscribe player from notification(s)",
                "description": "Unsubscribe player from notification(s) according to token content, this API is anonymousimplementation has to guarantee that information in the token are sufficient to unsubscribe player",
                "operationId": "unsubscribe",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "Unsubscribe token",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Notification unsubscribed with no errors"
                    },
                    "400": {
                        "description": "Business exception",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    },
                    "503": {
                        "description": "Server unavailable",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    }
                }
            }
        },
        "/players/self/verification/status/{name}": {
            "get": {
                "summary": "Gets verification results for a passed property",
                "description": "Gets verification results for a passed property",
                "operationId": "getVerificationStatuses",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "Unique name of the verified property",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": "email"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Player property verification result",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/VerificationDTO"
                                },
                                "example": {
                                    "name": "kyc",
                                    "verificationStatuses": [
                                        {
                                            "verificationProvider": "IDology",
                                            "status": "VERIFIED",
                                            "verificationMessages": [
                                                "string"
                                            ]
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/VerificationDTO"
                                },
                                "example": "<VerificationDTO> <name>kyc</name> <verificationStatuses> <verificationProvider>IDology</verificationProvider> <status>VERIFIED</status> <verificationMessages>string</verificationMessages> </verificationStatuses> </VerificationDTO>"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    },
                    "500": {
                        "description": "System exception",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    },
                    "503": {
                        "description": "System not available. Retry later",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    }
                }
            }
        },
        "/players/self/verification/status": {
            "get": {
                "summary": "Gets all available verification results",
                "description": "Gets all available verification results",
                "operationId": "getVerificationStatus",
                "responses": {
                    "200": {
                        "description": "List of verification results",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/VerificationPageDTO"
                                },
                                "example": {
                                    "nextPageUrl": "string",
                                    "previousPageUrl": "string",
                                    "pageUrls": {},
                                    "nextItems": 0,
                                    "previousItems": 0,
                                    "verifications": [
                                        {
                                            "name": "kyc",
                                            "verificationStatuses": [
                                                {
                                                    "verificationProvider": "IDology",
                                                    "status": "VERIFIED",
                                                    "verificationMessages": [
                                                        "string"
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/VerificationPageDTO"
                                },
                                "example": "<VerificationPageDTO> <nextPageUrl>string</nextPageUrl> <previousPageUrl>string</previousPageUrl> <pageUrls /> <nextItems>0</nextItems> <previousItems>0</previousItems> <verifications> <name>kyc</name> <verificationStatuses> <verificationProvider>IDology</verificationProvider> <status>VERIFIED</status> <verificationMessages>string</verificationMessages> </verificationStatuses> </verifications> </VerificationPageDTO>"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    },
                    "500": {
                        "description": "System exception",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    },
                    "503": {
                        "description": "System not available. Retry later",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": "<interactiveErrorDTO> <code>string</code> <fieldErrors> <code>string</code> <field>string</field> </fieldErrors> </interactiveErrorDTO>"
                            }
                        }
                    }
                }
            }
        },
        "/players/self/wallet/pending-transactions": {
            "get": {
                "summary": "Get the pending transaction. An eWallet a transaction is defined as pending when has been reserved but not yet confirmed. Hence the funds associated to these transaction can't be used by the player",
                "description": "Get the pending transaction. An eWallet a transaction is defined as pending when has been reserved but not yet confirmed. Hence the funds associated to these transaction can't be used by the player",
                "operationId": "getPendingTransaction",
                "parameters": [
                    {
                        "name": "pageNumber",
                        "in": "query",
                        "description": "Format - int32. Page number to be returned, starting from 1",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Format - int32. Amount of records to be returned. Defines offset if 'page' greater than 1",
                        "schema": {
                            "type": "integer",
                            "default": 5
                        }
                    },
                    {
                        "name": "date-from",
                        "in": "query",
                        "description": "Format - int64. Date in UTC millis. -30d used if not provided ",
                        "schema": {
                            "type": "integer"
                        },
                        "example": 1582633200000
                    },
                    {
                        "name": "date-to",
                        "in": "query",
                        "description": "Format - int64. Date in UTC millis. Current UTC date used if not provided.",
                        "schema": {
                            "type": "integer"
                        },
                        "example": 1582633200000
                    },
                    {
                        "name": "order",
                        "in": "query",
                        "description": "Property name that should be used to sort the results.",
                        "schema": {
                            "type": "string"
                        },
                        "example": "amount"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Pending transactions list",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WalletTransactionDTO"
                                },
                                "example": {
                                    "actionTypeId": 2,
                                    "amount": 101100000,
                                    "channelId": 1,
                                    "currency": "USD",
                                    "date": 1589893792133,
                                    "externalPlatformId": "0bddf718-4ecd-4487-8e3a-1aaa4b48ce7e",
                                    "externalTransactionId": "0bddf718-4ecd-4487-8e3a-1aaa4b48ce7e",
                                    "note": "Purchase on Game",
                                    "operationId": 402,
                                    "operationTypeId": 3,
                                    "description": "Generic game debit reservation",
                                    "phaseId": 1
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server not available. Retry later",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/players/self/wallet/financial-transactions": {
            "get": {
                "summary": "Get the financial transaction.",
                "description": "Get the financial transaction.",
                "operationId": "getFinancialTransaction",
                "parameters": [
                    {
                        "name": "pageNumber",
                        "in": "query",
                        "description": "Format - int32. Page number to be returned, starting from 1",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Format - int32. Amount of records to be returned. Defines offset if 'page' greater than 1",
                        "schema": {
                            "type": "integer",
                            "default": 5
                        }
                    },
                    {
                        "name": "date-from",
                        "in": "query",
                        "description": "Format - int64. Date in UTC millis. -30d used if not provided ",
                        "schema": {
                            "type": "integer"
                        },
                        "example": 1582633200000
                    },
                    {
                        "name": "date-to",
                        "in": "query",
                        "description": "Format - int64. Date in UTC millis. Current UTC date used if not provided.",
                        "schema": {
                            "type": "integer"
                        },
                        "example": 1582633200000
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Pending transactions list",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WalletTransactionDTO"
                                },
                                "example": {
                                    "actionTypeId": 2,
                                    "amount": 101100000,
                                    "channelId": 1,
                                    "currency": "USD",
                                    "date": 1589893792133,
                                    "externalPlatformId": "0bddf718-4ecd-4487-8e3a-1aaa4b48ce7e",
                                    "externalTransactionId": "0bddf718-4ecd-4487-8e3a-1aaa4b48ce7e",
                                    "note": "Purchase on Game",
                                    "operationId": 402,
                                    "operationTypeId": 3,
                                    "description": "Generic game debit reservation",
                                    "phaseId": 1
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server not available. Retry later",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/players/self/bonus-bags/owned": {
            "get": {
                "summary": "Retrieves the player's owned bonus bag",
                "description": "Retrieves the player's owned bonus bag",
                "operationId": "ownedBags",
                "responses": {
                    "200": {
                        "description": "Returns the owned bonus bag or empty list",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/BonusBagDTO"
                                    }
                                },
                                "example": [
                                    {
                                        "bagId": 0,
                                        "name": "string",
                                        "description": "string",
                                        "currencyCode": "string",
                                        "amount": 0,
                                        "reaminingAmount": 0,
                                        "winningAmount": 0,
                                        "wageringRequirementType": "string",
                                        "originalWageringRequirementAmount": 0,
                                        "wageringRequirementAmount": 0,
                                        "conversionRequirementType": "string",
                                        "originalConversionRequirementAmount": 0,
                                        "conversionRequirementAmount": 0,
                                        "optInRequired": true,
                                        "usableForGamePlay": true,
                                        "expirationDateType": "string",
                                        "expirationDate": 0,
                                        "dinamycDuration": 0,
                                        "convertedAmount": 0,
                                        "conversionDate": 0,
                                        "acceptanceDate": 0,
                                        "statusDescription": "string",
                                        "statusID": 0
                                    }
                                ]
                            }
                        }
                    },
                    "400": {
                        "description": "Business exception",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server unavailable",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/players/self/bonus-bags/eligible": {
            "get": {
                "summary": "Retrieves the player's eligible bonus bag",
                "description": "Retrieves the player's eligible bonus bag",
                "operationId": "eligibleBags",
                "responses": {
                    "200": {
                        "description": "Returns the eligible bonus bag or empty list",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/BonusBagDTO"
                                    }
                                },
                                "example": [
                                    {
                                        "bagId": 0,
                                        "name": "string",
                                        "description": "string",
                                        "currencyCode": "string",
                                        "amount": 0,
                                        "reaminingAmount": 0,
                                        "winningAmount": 0,
                                        "wageringRequirementType": "string",
                                        "originalWageringRequirementAmount": 0,
                                        "wageringRequirementAmount": 0,
                                        "conversionRequirementType": "string",
                                        "originalConversionRequirementAmount": 0,
                                        "conversionRequirementAmount": 0,
                                        "optInRequired": true,
                                        "usableForGamePlay": true,
                                        "expirationDateType": "string",
                                        "expirationDate": 0,
                                        "dinamycDuration": 0,
                                        "convertedAmount": 0,
                                        "conversionDate": 0,
                                        "acceptanceDate": 0,
                                        "statusDescription": "string",
                                        "statusID": 0
                                    }
                                ]
                            }
                        }
                    },
                    "400": {
                        "description": "Business exception",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server unavailable",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/players/self/bonus-bag/{bag-id}/accept": {
            "put": {
                "summary": "Accept a bonus bag",
                "description": "Accept a bonus bag",
                "operationId": "acceptBag",
                "parameters": [
                    {
                        "name": "bag-id",
                        "in": "path",
                        "description": "Format - int64. The bonus bag unique identifier to accept",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The accepted bonus bag",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BonusBagDTO"
                                },
                                "example": {
                                    "bagId": 0,
                                    "name": "string",
                                    "description": "string",
                                    "currencyCode": "string",
                                    "amount": 0,
                                    "reaminingAmount": 0,
                                    "winningAmount": 0,
                                    "wageringRequirementType": "string",
                                    "originalWageringRequirementAmount": 0,
                                    "wageringRequirementAmount": 0,
                                    "conversionRequirementType": "string",
                                    "originalConversionRequirementAmount": 0,
                                    "conversionRequirementAmount": 0,
                                    "optInRequired": true,
                                    "usableForGamePlay": true,
                                    "expirationDateType": "string",
                                    "expirationDate": 0,
                                    "dinamycDuration": 0,
                                    "convertedAmount": 0,
                                    "conversionDate": 0,
                                    "acceptanceDate": 0,
                                    "statusDescription": "string",
                                    "statusID": 0
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Business exception",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server unavailable",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/players/self/bonus-bag/{bag-id}/detail": {
            "get": {
                "summary": "Retrieves the bonus bag detail",
                "description": "Retrieves the bonus bag detail",
                "operationId": "bagDetail",
                "parameters": [
                    {
                        "name": "bag-id",
                        "in": "path",
                        "description": "Format - int64. The bonus bag unique identifier to accept",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns the eligible bonus bag or empty list",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/BonusBagDTO"
                                    }
                                },
                                "example": [
                                    {
                                        "bagId": 0,
                                        "name": "string",
                                        "description": "string",
                                        "currencyCode": "string",
                                        "amount": 0,
                                        "reaminingAmount": 0,
                                        "winningAmount": 0,
                                        "wageringRequirementType": "string",
                                        "originalWageringRequirementAmount": 0,
                                        "wageringRequirementAmount": 0,
                                        "conversionRequirementType": "string",
                                        "originalConversionRequirementAmount": 0,
                                        "conversionRequirementAmount": 0,
                                        "optInRequired": true,
                                        "usableForGamePlay": true,
                                        "expirationDateType": "string",
                                        "expirationDate": 0,
                                        "dinamycDuration": 0,
                                        "convertedAmount": 0,
                                        "conversionDate": 0,
                                        "acceptanceDate": 0,
                                        "statusDescription": "string",
                                        "statusID": 0
                                    }
                                ]
                            }
                        }
                    },
                    "400": {
                        "description": "Business exception",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server unavailable",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/players/self/bonus-bags/historic": {
            "get": {
                "summary": "Retrieves the player's historic bonus bag",
                "description": "Retrieves the player's historic bonus bag",
                "operationId": "historicBags",
                "responses": {
                    "200": {
                        "description": "Returns the historic bonus bag or empty list",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/BonusBagDTO"
                                    }
                                },
                                "example": [
                                    {
                                        "bagId": 0,
                                        "name": "string",
                                        "description": "string",
                                        "currencyCode": "string",
                                        "amount": 0,
                                        "reaminingAmount": 0,
                                        "winningAmount": 0,
                                        "wageringRequirementType": "string",
                                        "originalWageringRequirementAmount": 0,
                                        "wageringRequirementAmount": 0,
                                        "conversionRequirementType": "string",
                                        "originalConversionRequirementAmount": 0,
                                        "conversionRequirementAmount": 0,
                                        "optInRequired": true,
                                        "usableForGamePlay": true,
                                        "expirationDateType": "string",
                                        "expirationDate": 0,
                                        "dinamycDuration": 0,
                                        "convertedAmount": 0,
                                        "conversionDate": 0,
                                        "acceptanceDate": 0,
                                        "statusDescription": "string",
                                        "statusID": 0
                                    }
                                ]
                            }
                        }
                    },
                    "400": {
                        "description": "Business exception",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server unavailable",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/players/self/promotions/history": {
            "get": {
                "summary": "Retrieves player's promotions history. It retrieves all the promotion which the player subscribed and/or received the related prizes. It contains also promotions that are not available anymore (Expired)",
                "description": "Retrieves player's promotions history. It retrieves all the promotion which the player subscribed and/or received the related prizes. It contains also promotions that are not available anymore (Expired)",
                "operationId": "promotionsHistory",
                "responses": {
                    "200": {
                        "description": "Player's promotions history or empty list",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/CmdPromotionDTO"
                                    }
                                },
                                "example": [
                                    {
                                        "promotionId": 0,
                                        "name": "string",
                                        "description": "string",
                                        "startDate": 0,
                                        "endDate": 0,
                                        "optInType": "PROMO_CODE",
                                        "percentageOfCompletion": 0,
                                        "depleted": true,
                                        "subscription": {
                                            "promotionId": 0,
                                            "promoCode": "string",
                                            "subscriptionDate": 0,
                                            "status": "RESERVED"
                                        },
                                        "receivedPrizes": 0
                                    }
                                ]
                            }
                        }
                    },
                    "400": {
                        "description": "Business exception",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server unavailable",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/players/self/promotion/{promotion-id}/opt-in/{promo-code-id}": {
            "post": {
                "summary": "Creates player promotion subscription using a promo code",
                "description": "Creates player promotion subscription using a promo code",
                "operationId": "optInPromotion",
                "parameters": [
                    {
                        "name": "promotion-id",
                        "in": "path",
                        "description": "Format - int64. The unique identifier for the promotion",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "promo-code-id",
                        "in": "path",
                        "description": "The unique promo identifier used for subscribing the promotion",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Promotion subscription created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CmdPromotionSubscriptionDTO"
                                },
                                "example": {
                                    "promotionId": 0,
                                    "promoCode": "string",
                                    "subscriptionDate": 0,
                                    "status": "RESERVED"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Business exception",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server unavailable",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/players/self/promotion/{promotion-id}/opt-in": {
            "post": {
                "summary": "Creates player promotion subscription",
                "description": "Creates player promotion subscription",
                "operationId": "optInPromotion_1",
                "parameters": [
                    {
                        "name": "promotion-id",
                        "in": "path",
                        "description": "Format - int64. The unique identifier for the promotion",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Promotion subscription created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CmdPromotionSubscriptionDTO"
                                },
                                "example": {
                                    "promotionId": 0,
                                    "promoCode": "string",
                                    "subscriptionDate": 0,
                                    "status": "RESERVED"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Business exception",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server unavailable",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/players/self/promotion/{promotion-id}/prizes": {
            "get": {
                "summary": "Retrieves player's received prizes detail for a specific promotion.",
                "description": "Retrieves player's received prizes detail for a specific promotion.",
                "operationId": "receivedRewards",
                "parameters": [
                    {
                        "name": "promotion-id",
                        "in": "path",
                        "description": "Format - int64. The unique identifier for the promotion",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Player's received prizes detail or empty list",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/CmdPromotionDTO"
                                    }
                                },
                                "example": [
                                    {
                                        "promotionId": 0,
                                        "name": "string",
                                        "description": "string",
                                        "startDate": 0,
                                        "endDate": 0,
                                        "optInType": "PROMO_CODE",
                                        "percentageOfCompletion": 0,
                                        "depleted": true,
                                        "subscription": {
                                            "promotionId": 0,
                                            "promoCode": "string",
                                            "subscriptionDate": 0,
                                            "status": "RESERVED"
                                        },
                                        "receivedPrizes": 0
                                    }
                                ]
                            }
                        }
                    },
                    "400": {
                        "description": "Business exception",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server unavailable",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/players/self/promotions/enrolled": {
            "get": {
                "summary": "Retrieves enrolled player's promotions. Promotions are the ones that are active and require subscription and the player is already subscribed or the promotion that does not require any subscription",
                "description": "Retrieves enrolled player's promotions. Promotions are the ones that are active and require subscription and the player is already subscribed or the promotion that does not require any subscription",
                "operationId": "enrolledPromotions",
                "responses": {
                    "200": {
                        "description": "Enrolled player's promotions or empty list",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/CmdPromotionDTO"
                                    }
                                },
                                "example": [
                                    {
                                        "promotionId": 0,
                                        "name": "string",
                                        "description": "string",
                                        "startDate": 0,
                                        "endDate": 0,
                                        "optInType": "PROMO_CODE",
                                        "percentageOfCompletion": 0,
                                        "depleted": true,
                                        "subscription": {
                                            "promotionId": 0,
                                            "promoCode": "string",
                                            "subscriptionDate": 0,
                                            "status": "RESERVED"
                                        },
                                        "receivedPrizes": 0
                                    }
                                ]
                            }
                        }
                    },
                    "400": {
                        "description": "Business exception",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server unavailable",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/players/self/promotions/available": {
            "get": {
                "summary": "Retrieves available player's promotions which require player subscription and the player is not already subscribed",
                "description": "Retrieves available player's promotions which require player subscription and the player is not already subscribed",
                "operationId": "availablePromotions",
                "responses": {
                    "200": {
                        "description": "Available player's promotions or empty list",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/CmdPromotionDTO"
                                    }
                                },
                                "example": [
                                    {
                                        "promotionId": 0,
                                        "name": "string",
                                        "description": "string",
                                        "startDate": 0,
                                        "endDate": 0,
                                        "optInType": "PROMO_CODE",
                                        "percentageOfCompletion": 0,
                                        "depleted": true,
                                        "subscription": {
                                            "promotionId": 0,
                                            "promoCode": "string",
                                            "subscriptionDate": 0,
                                            "status": "RESERVED"
                                        },
                                        "receivedPrizes": 0
                                    }
                                ]
                            }
                        }
                    },
                    "400": {
                        "description": "Business exception",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server unavailable",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/reason-translations/{action-id}": {
            "get": {
                "summary": "Get list of localized reasons ",
                "description": "Get list of localized reasons ",
                "operationId": "getReasons",
                "parameters": [
                    {
                        "name": "action-id",
                        "in": "path",
                        "description": "Id of configured action",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": "Ban"
                    },
                    {
                        "name": "language",
                        "in": "query",
                        "description": "Language",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": "en_UK"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of localized reasons ",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ActionReasonDTO"
                                    }
                                },
                                "example": [
                                    {
                                        "actionId": "string",
                                        "reasonId": "string",
                                        "reasonDescription": "string"
                                    }
                                ]
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Action id not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "System exception",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "System not available. Retry later",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/marketing-tracking/feedback/{feedback-id}": {
            "get": {
                "summary": "Get tracking image",
                "description": "Tracks that a notification has been opened updating reading counter",
                "operationId": "feedbackNotification",
                "parameters": [
                    {
                        "name": "feedback-id",
                        "in": "path",
                        "description": "Id of the received notification",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Produces an invisible 1x1 pixel PNG image",
                        "content": {
                            "image/png": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary"
                                },
                                "examples": {
                                    "default": {
                                        "value": null
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "image/png": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "examples": {
                                    "default": {
                                        "value": null
                                    }
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server unavailable",
                        "content": {
                            "image/png": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "examples": {
                                    "default": {
                                        "value": null
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/players/self/games/transactions/{id}": {
            "get": {
                "summary": "Get transaction by ID",
                "description": "Allows to fetch transaction by unique ID.",
                "operationId": "getTransaction_2",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Unique transaction identifier",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Lottery transaction",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GameTransactionDTO"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "System exception",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "System not available. Retry later",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/players/self/games/transactions/finder": {
            "post": {
                "summary": "Get player games transactions (advanced)",
                "description": "Allows to query player's games transactions repository with graphql-like search capability. Results pagination is applied.",
                "operationId": "getTransactions_3",
                "requestBody": {
                    "description": "Container for complex search criteria, allows to define filters for each transaction types",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SearchCriteriaDTO"
                            },
                            "example": {
                                "page": 1,
                                "size": 30,
                                "dateFrom": 0,
                                "dateTo": 0,
                                "sortBy": "TIMESTAMP",
                                "sortAscending": false,
                                "wagersSearch": {
                                    "linkRelatedTransactions": false,
                                    "serial": "string",
                                    "product": 0,
                                    "subscriptionId": 0,
                                    "groupId": "string",
                                    "correlationId": "string",
                                    "betSlipId": "string",
                                    "betTypeId": "string",
                                    "triggerType": "winningNumbersTrigger",
                                    "startDrawNumber": 0,
                                    "endDrawNumber": 0,
                                    "transactionAmountMin": 0,
                                    "transactionAmountMax": 0,
                                    "transactionPointAmountMin": 0,
                                    "transactionPointAmountMax": 0,
                                    "transactionVirtualAmountMin": 0,
                                    "transactionVirtualAmountMax": 0,
                                    "currency": "USD",
                                    "freeTicket": "null"
                                },
                                "validationSearch": {
                                    "linkRelatedTransactions": false,
                                    "serial": "string",
                                    "product": 0,
                                    "transactionAmountMin": 0,
                                    "transactionAmountMax": 0,
                                    "transactionPointAmountMin": 0,
                                    "transactionPointAmountMax": 0,
                                    "currency": "USD",
                                    "subscriptionId": 0,
                                    "prizeTier": "HIGH_TIER",
                                    "prizeType": "CASH",
                                    "description": "string",
                                    "startDrawNumber": 0,
                                    "endDrawNumber": 0
                                },
                                "claimsSearch": {
                                    "linkRelatedTransactions": false,
                                    "claimStatus": "PENDING",
                                    "claimSource": "string",
                                    "dateFrom": 0,
                                    "dateTo": 0,
                                    "drawNumber": 0
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Lottery transactions list",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GameTransactionsPageDTO"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "System exception",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "System not available. Retry later",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/players/self/games/transactions": {
            "get": {
                "summary": "Get player games transactions",
                "description": "Allows to query player's games transactions repository with optional filters. Results pagination is applied.",
                "operationId": "getTransactions_4",
                "parameters": [
                    {
                        "name": "types",
                        "in": "query",
                        "description": "Filter results by transaction types.",
                        "schema": {
                            "enum": [
                                "WAGER",
                                "CLAIM",
                                "VALIDATION"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "name": "global-transaction-id",
                        "in": "query",
                        "description": "Identifier that is used for matching group related transactions, like subscriptions, carts, ",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "correlation-id",
                        "in": "query",
                        "description": "Identifier that is used for matching related transactions (e.g. retryId for wagers)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "include-body",
                        "in": "query",
                        "description": "Defines if transactions in response should have original xml 'body' document fetched from database. Default value is 'false'",
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    {
                        "name": "link-transactions",
                        "in": "query",
                        "description": "Indicates if response should include transactions related with the ones chosen as first level type. For example if WAGER is selected as first level type, than 'true' indicates that transactions of different type but same retry-id  should be fetched as well. Linked transactions are grouped and returned as a list  nested in first level transaction.If 'false' value is provided, related transactions will not be loaded.",
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    {
                        "name": "link-transactions-type",
                        "in": "query",
                        "description": "Type of transaction, to return as first level type in case 'link-transactions' is set to 'true'",
                        "schema": {
                            "type": "string",
                            "default": "WAGER"
                        }
                    },
                    {
                        "name": "lottery-product-id",
                        "in": "query",
                        "description": "Id of a lottery product",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "sort-by",
                        "in": "query",
                        "description": "Property name that should be used to sort the results",
                        "schema": {
                            "enum": [
                                "TIMESTAMP",
                                "DRAW_NUMBER",
                                "POINTS_AMOUNT",
                                "AMOUNT"
                            ],
                            "type": "string",
                            "default": "TIMESTAMP"
                        }
                    },
                    {
                        "name": "sort-ascending",
                        "in": "query",
                        "description": "Indicates sort order. ",
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Format - int32. Page number to be returned. ",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "description": "Format - int32. Amount of records to be returned. Defines offset if 'page' greater than 1. ",
                        "schema": {
                            "type": "integer",
                            "default": 30
                        }
                    },
                    {
                        "name": "date-from",
                        "in": "query",
                        "description": "Format - int64. UTC date in millis. 'date-to' -30d used if not provided ",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "date-to",
                        "in": "query",
                        "description": "Format - int64. UTC date in millis. Current UTC time is used if not provided.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Lottery transactions list",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GameTransactionsPageDTO"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "System exception",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "System not available. Retry later",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/draw-games/subscriptions/page": {
            "get": {
                "summary": "getSubscriptionsByPage",
                "description": "Gets user's subscriptions for requested page.\n\nError Codes:\nMISSING_PLAYER_DATA ",
                "operationId": "getSubscriptionsByPage",
                "parameters": [
                    {
                        "name": "game-names",
                        "in": "query",
                        "description": "Names of games to get subscriptions for",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "statuses",
                        "in": "query",
                        "description": "Comma separated list of statuses to limit results to",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "description": "Format - int32.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Format - int32.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "date-from",
                        "in": "query",
                        "description": "Format - int64. Paging start date",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "date-to",
                        "in": "query",
                        "description": "Format - int64. Paging end date",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of subscriptions",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SubscriptionPageDTO"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "User not authenticated"
                    },
                    "500": {
                        "description": "System exception"
                    },
                    "503": {
                        "description": "System not available. Retry later"
                    }
                }
            }
        },
        "/draw-games/statistics": {
            "get": {
                "summary": "getDrawsStatistics",
                "description": "These API are providing draw statistics for all draw games except Flash 5 game.\n\nError Codes:\nMISSING_PLAYER_DATA ",
                "operationId": "getDrawsStatistics",
                "parameters": [
                    {
                        "name": "game-names",
                        "in": "query",
                        "description": "Names of games to get statistics for",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "date-from",
                        "in": "query",
                        "description": "Format - int64. Paging start date",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "date-to",
                        "in": "query",
                        "description": "Format - int64. Paging end date",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "description": "Format - int32.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "draw-count",
                        "in": "query",
                        "description": "Format - int32.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "lang",
                        "in": "query",
                        "description": "Language in which to return names",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of statistics",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DrawStatisticsPageDTO"
                                },
                                "example": {
                                    "nextPageUrl": "string",
                                    "previousPageUrl": "string",
                                    "pageUrls": {},
                                    "nextItems": 0,
                                    "previousItems": 0,
                                    "drawStatistics": [
                                        {
                                            "resultStatistics": {
                                                "gameName": "string",
                                                "period": "string",
                                                "periodStartTime": 0,
                                                "mostDrawnResults": [
                                                    "string"
                                                ],
                                                "leastDrawnResults": [
                                                    "string"
                                                ],
                                                "statistics": [
                                                    {
                                                        "result": "string",
                                                        "frequency": 0
                                                    }
                                                ],
                                                "drawCount": 0,
                                                "selectionType": "string"
                                            }
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "User not authenticated"
                    },
                    "500": {
                        "description": "System exception"
                    },
                    "503": {
                        "description": "System not available. Retry later"
                    }
                }
            }
        },
        "/players/self/wallet/balance": {
            "get": {
                "summary": "Get user's wallet balance",
                "description": "Get user's wallet balance",
                "operationId": "getBalance",
                "responses": {
                    "200": {
                        "description": "User's wallet balance with Winnings and Deposit amounts",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WalletBalanceDTO"
                                },
                                "example": {
                                    "availableBalance": {
                                        "value": 0,
                                        "currencyCode": "string"
                                    },
                                    "accountBalance": {
                                        "value": 0,
                                        "currencyCode": "string"
                                    },
                                    "withdrawableBalance": {
                                        "value": 0,
                                        "currencyCode": "string"
                                    },
                                    "winningsBalance": {
                                        "value": 0,
                                        "currencyCode": "string"
                                    },
                                    "depositsBalance": {
                                        "value": 0,
                                        "currencyCode": "string"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Business exception",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server unavailable",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/interactiveErrorDTO"
                                },
                                "example": {
                                    "code": "string",
                                    "fieldErrors": [
                                        {
                                            "code": "string",
                                            "field": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/oauth/loginOneTime": {
            "post": {
                "summary": "loginOneTime",
                "description": "Returns the authorization code if the OAuth token\n is correct. \n \n The following attribute should be populated in the TokenDTO.<br/>\n \n clientId, siteId<br/>\n \n The method will return a single TokenDTO with the authCode.<br/>\n\nError Codes:\nTOKEN_NOT_AUTHORIZED \nINVALID_CLIENT_ID \nTOKEN_LIMIT_EXCEEDED ",
                "operationId": "loginOneTime",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TokenDTO"
                            },
                            "example": {
                                "siteId": "string",
                                "scope": [
                                    "string"
                                ],
                                "clientId": "string",
                                "clientCredentials": {},
                                "authCode": "string",
                                "token": "string",
                                "tokenType": "string",
                                "tokenParams": {},
                                "resourceOwnerCredentials": {}
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OAuth authorization code",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/TokenDTO"
                                    },
                                    "description": "Encapsulates the details for an OAuth token, contains both the data required to use a token and to create one."
                                },
                                "example": [
                                    {
                                        "siteId": "string",
                                        "scope": [
                                            "string"
                                        ],
                                        "clientId": "string",
                                        "clientCredentials": {},
                                        "authCode": "string",
                                        "token": "string",
                                        "tokenType": "string",
                                        "tokenParams": {},
                                        "resourceOwnerCredentials": {}
                                    }
                                ]
                            }
                        }
                    },
                    "401": {
                        "description": "Oauth token not valid"
                    },
                    "500": {
                        "description": "System exception"
                    },
                    "503": {
                        "description": "System not available. Retry later"
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "FieldErrorDTO": {
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string"
                    },
                    "field": {
                        "type": "string"
                    }
                }
            },
            "WinnerAwarenessDTO": {
                "type": "object",
                "properties": {
                    "gameId": {
                        "type": "string",
                        "description": "The instant game number or online game name"
                    },
                    "region": {
                        "enum": [
                            "RETAILER",
                            "CITY",
                            "COUNTY",
                            "STATE",
                            "COUNTRY"
                        ],
                        "type": "string",
                        "description": "Region information is aggregated over"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "Total number of winners",
                        "format": "int64"
                    },
                    "totalAmount": {
                        "type": "integer",
                        "description": "Total amount won in cents",
                        "format": "int64"
                    },
                    "highestAmount": {
                        "type": "integer",
                        "description": "Amount of single highest ticket won in cents",
                        "format": "int64"
                    },
                    "prizeTiers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PrizeTierDTO"
                        },
                        "description": "List of prize tiers won"
                    }
                },
                "description": "Winner awareness information for a specific region and game."
            },
            "FavoriteWagerPageDTO": {
                "type": "object",
                "properties": {
                    "nextPageUrl": {
                        "type": "string",
                        "description": "URL to get the next page of the paginated results"
                    },
                    "previousPageUrl": {
                        "type": "string",
                        "description": "URL to get the previous page of the paginated results"
                    },
                    "pageUrls": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "page number - page URL mapping to jump to selected page"
                    },
                    "nextItems": {
                        "type": "integer",
                        "description": "Total amount of items contained in the next pages",
                        "format": "int32"
                    },
                    "previousItems": {
                        "type": "integer",
                        "description": "Total amount of items contained in the previous pages",
                        "format": "int32"
                    },
                    "favoriteWagers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FavoriteWagerDTO"
                        },
                        "description": "List of favorite wagers"
                    }
                },
                "description": "Represents a page of favorite wager. It is used when the service returns pages of favorite wagers."
            },
            "BusinessHoursDTO": {
                "type": "object",
                "properties": {
                    "dayOfWeek": {
                        "enum": [
                            "SUNDAY",
                            "MONDAY",
                            "TUESDAY",
                            "WEDNESDAY",
                            "THURSDAY",
                            "FRIDAY",
                            "SATURDAY"
                        ],
                        "type": "string",
                        "description": "Day of the week hours are for"
                    },
                    "openTime": {
                        "type": "string",
                        "description": "Opening time for the day"
                    },
                    "closeTime": {
                        "type": "string",
                        "description": "Closing time for the day"
                    },
                    "middayOpenTime": {
                        "type": "string",
                        "description": "Midday opening time for the day"
                    },
                    "middayCloseTime": {
                        "type": "string",
                        "description": "Midday closing time for the day"
                    }
                },
                "description": "Business hours for day of the week."
            },
            "ResultStatisticsDTO": {
                "type": "object",
                "properties": {
                    "gameName": {
                        "type": "string",
                        "description": "Game name"
                    },
                    "period": {
                        "type": "string",
                        "description": "Period over which the statistics was gathered e.g. day, week, month"
                    },
                    "periodStartTime": {
                        "type": "integer",
                        "description": "Start time of the period",
                        "format": "int64"
                    },
                    "mostDrawnResults": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of most frequently drawn results"
                    },
                    "leastDrawnResults": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of least frequently drawn results"
                    },
                    "statistics": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ResultStatisticDTO"
                        },
                        "description": "List of selections and frequency"
                    },
                    "drawCount": {
                        "type": "integer",
                        "description": "Number draw's statistics are for",
                        "format": "int32"
                    },
                    "selectionType": {
                        "type": "string",
                        "description": "If the result statistics are calculated for the PRIMARY, SECONDARY, ... set of results"
                    }
                },
                "description": "Represents draw result statistics"
            },
            "UidDTO": {
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Type of UID requested or intended usage of UID such as for wager retry detection."
                    },
                    "uid": {
                        "type": "string",
                        "description": "The generated UID."
                    }
                }
            },
            "BetTypeSelectionsRulesDTO": {
                "type": "object",
                "properties": {
                    "numberOfSelections": {
                        "type": "integer",
                        "description": "Total number of selections",
                        "format": "int32"
                    },
                    "numberOfUniqueSelections": {
                        "type": "integer",
                        "description": "Number of unique selections",
                        "format": "int32"
                    },
                    "maxSameSelections": {
                        "type": "integer",
                        "description": "Maximum number of same selections",
                        "format": "int32"
                    }
                },
                "description": "Represents the selections rules for a given bet type."
            },
            "SelectionDescriptionDTO": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The selection id or value."
                    },
                    "description": {
                        "type": "string",
                        "description": "The name or description of the selection."
                    }
                },
                "description": "Name or description of selection."
            },
            "PopularBoardDTO": {
                "type": "object",
                "properties": {
                    "primarySelections": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The primary numbers of the board informed only when a single selection is made; It is a list of marks"
                    },
                    "secondarySelections": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The secondary numbers of the board informed only when a single selection is made; It is a list of marks"
                    },
                    "stake": {
                        "type": "integer",
                        "description": "Sum of stakes of all boards with the same selection",
                        "format": "int64"
                    },
                    "expectedPayout": {
                        "type": "integer",
                        "description": "Potential win amount",
                        "format": "int64"
                    }
                }
            },
            "PromotionDTO": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Promotion name"
                    },
                    "description": {
                        "type": "string",
                        "description": "Text description of the promotion"
                    },
                    "startTime": {
                        "type": "integer",
                        "description": "Timestamp of when the promotion will start",
                        "format": "int64"
                    },
                    "endTime": {
                        "type": "integer",
                        "description": "Timestamp of when the promotion will end",
                        "format": "int64"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of promotion such as voucher or coupon"
                    },
                    "prizeType": {
                        "type": "string",
                        "description": "The prize type of the promotion such as cash or discount"
                    },
                    "id": {
                        "type": "string",
                        "description": "The voucher or coupon number"
                    },
                    "discountAmount": {
                        "type": "integer",
                        "description": "The amount discounted from the purchase price in cents",
                        "format": "int64"
                    },
                    "cashPrizeAmount": {
                        "type": "integer",
                        "description": "The cash prize amount in cents",
                        "format": "int64"
                    },
                    "serialNumber": {
                        "type": "string",
                        "description": "The promotion serial number\n\nFormat: CCC-SSSSSSSSS-PPIIDD, 3 digits CDC, 9 digits serial number, 2 digits product number, 2 digits site id, 2 digits checksum"
                    },
                    "drawId": {
                        "type": "string",
                        "description": "The promotion draw number"
                    },
                    "drawDate": {
                        "type": "string",
                        "description": "The promotion draw date"
                    },
                    "transactionTime": {
                        "type": "string",
                        "description": "The creation time"
                    },
                    "text": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TextDTO"
                        },
                        "description": "List of text regions to print"
                    },
                    "wagers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/WagerDTO"
                        },
                        "description": "List of wagers and/or free tickets attached to the promotion"
                    },
                    "state": {
                        "type": "string",
                        "description": "The promotion state(active,inactive)"
                    }
                },
                "description": "Represents an active promotion for a given game.  It is assume the data for\n an inactive promotion will not be provided."
            },
            "FavoriteWagerDTO": {
                "required": [
                    "group",
                    "wager"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Id of the favorite wager"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the favorite wager"
                    },
                    "group": {
                        "$ref": "#/components/schemas/FavoriteWagerGroupDTO"
                    },
                    "wager": {
                        "$ref": "#/components/schemas/WagerDTO"
                    }
                },
                "description": "Represents a favorite wager"
            },
            "WagerDTO": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "description": "Status of the wager"
                    },
                    "rejectReason": {
                        "type": "string",
                        "description": "Reason wager was rejected."
                    },
                    "error": {
                        "$ref": "#/components/schemas/ErrorDTO"
                    },
                    "type": {
                        "enum": [
                            "SUBSCRIPTION",
                            "SYNDICATE",
                            "NORMAL",
                            "FRACTION"
                        ],
                        "type": "string",
                        "description": "Wager type"
                    },
                    "channel": {
                        "type": "string",
                        "description": "Wager purchase channel"
                    },
                    "drawIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of drawIds for non-consecutive multi-draw games. If drawIds are supplied, drawId and duration properties must not be sent"
                    },
                    "drawId": {
                        "type": "string",
                        "description": "Starting drawId for a consecutive multi-draw wager. If supplied, drawIds cannot be set. If supplied, duration has to be set"
                    },
                    "duration": {
                        "type": "integer",
                        "description": "Number of draws from drawNumber in which the wager will be participating. If supplied, drawNumber must be set and drawNumbers cannot be given",
                        "format": "int32"
                    },
                    "delay": {
                        "type": "integer",
                        "description": "Start wagering by skipping certain number of draws starting from current draw",
                        "format": "int32"
                    },
                    "drawNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Draw names"
                    },
                    "gameName": {
                        "type": "string",
                        "description": "Name of the game for which the wager will be placed"
                    },
                    "addonWagers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/WagerDTO"
                        },
                        "description": "List of draw add-on wagers"
                    },
                    "price": {
                        "type": "integer",
                        "description": "Wager price in cents",
                        "format": "int64"
                    },
                    "id": {
                        "type": "string",
                        "description": "Internal wager id. Reference implementation uses this field for ESTE's serialNumber."
                    },
                    "requestId": {
                        "type": "string",
                        "description": "Externally provided wager id."
                    },
                    "serialNumber": {
                        "type": "string",
                        "description": "Wager serial number. Reference implementation uses this field for GMS's serialNumber, ESTE's exttxid."
                    },
                    "boards": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/BoardDTO"
                        },
                        "description": "Board data for the wager"
                    },
                    "transactionTime": {
                        "type": "integer",
                        "description": "Creation time",
                        "format": "int64"
                    },
                    "additionalPrizeTier": {
                        "type": "boolean"
                    },
                    "stake": {
                        "type": "integer",
                        "description": "Selected stake",
                        "format": "int64"
                    },
                    "multiplier": {
                        "type": "integer",
                        "description": "The wager multiplier",
                        "format": "int64"
                    },
                    "predefinedGameRuleSetId": {
                        "type": "string",
                        "description": "Predefined game rule set id e.g. in Keno"
                    },
                    "systemLevel": {
                        "type": "integer",
                        "description": "System level used in games with variable selection",
                        "format": "int32"
                    },
                    "subscriptionId": {
                        "type": "string",
                        "description": "Subscription id"
                    },
                    "syndicateId": {
                        "type": "string",
                        "description": "Syndicate id"
                    },
                    "syndicateInstanceId": {
                        "type": "string",
                        "description": "Syndicate instance id"
                    },
                    "syndicateTotalParts": {
                        "type": "integer",
                        "description": "Total syndicate parts",
                        "format": "int32"
                    },
                    "syndicatePartsPerWager": {
                        "type": "integer",
                        "description": "Number of syndicate parts per wager",
                        "format": "int32"
                    },
                    "groupMemberId": {
                        "type": "string",
                        "description": "Group play member id"
                    },
                    "groupId": {
                        "type": "string",
                        "description": "Group play id"
                    },
                    "favorite": {
                        "type": "boolean",
                        "description": "Indicates whether a wager is favorite wager or not"
                    },
                    "favoriteId": {
                        "type": "string",
                        "description": "Specifying favorite wager id"
                    },
                    "digest": {
                        "type": "string",
                        "description": "A hash or checksum of selected fields in the wager request"
                    },
                    "paymentSourceId": {
                        "type": "string",
                        "description": "Payment source to use to pay for wager"
                    },
                    "paymentAmount": {
                        "type": "integer",
                        "description": "Amount to transfer from payment source to gaming account\n to pay for wager",
                        "format": "int64"
                    },
                    "paymentTransactionId": {
                        "type": "string",
                        "description": "Id of already completed funds transfer from payment source\n to gaming account that should be reversed if wager fails"
                    },
                    "signature": {
                        "type": "string",
                        "description": "Signature of the wager returned by the back-end system"
                    },
                    "drawStartDate": {
                        "type": "integer",
                        "description": "Staring draw date in which the wager will be participating in milliseconds since epoch.",
                        "format": "int64"
                    },
                    "drawEndDate": {
                        "type": "integer",
                        "description": "Ending draw date in which the wager will be participating in milliseconds since epoch.",
                        "format": "int64"
                    },
                    "revision": {
                        "type": "string",
                        "description": "The current revision of the game rules."
                    },
                    "freeTicket": {
                        "$ref": "#/components/schemas/WagerDTO"
                    },
                    "freeTickets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/WagerDTO"
                        },
                        "description": "If present in a response, the list contains requests to send\n to get the free tickets."
                    },
                    "ticketSecurity": {
                        "$ref": "#/components/schemas/TicketSecurityDTO"
                    },
                    "alreadyPrinted": {
                        "type": "boolean",
                        "description": "Indicates the wager was done offline and the ticket has already\n been printed and the requestId field contains the foreign serial\n number printed on the ticket."
                    },
                    "addonPlayed": {
                        "type": "boolean",
                        "description": "Indicates the included addon wagers are played when set."
                    },
                    "freeTicketRequest": {
                        "type": "boolean",
                        "description": "Indicates wager request is for a free ticket."
                    },
                    "promotionId": {
                        "type": "string",
                        "description": "If wager request is a promotional free ticket, the promotion\n number for the free ticket."
                    },
                    "paymentType": {
                        "type": "string",
                        "description": "Payment type (e.g: real money, virtual money, points)"
                    },
                    "prizes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PrizeDTO"
                        },
                        "description": "List of prizes won instantly"
                    },
                    "bonusEntries": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of bonus entries (e.g. Millionaire Club Numbers)"
                    },
                    "webCode": {
                        "type": "string",
                        "description": "Unique entry web code for seconds change games"
                    },
                    "taxes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TaxDTO"
                        },
                        "description": "List of taxes charged for the wager."
                    },
                    "discountAmount": {
                        "type": "integer",
                        "description": "The amount discounted from the purchase price in cents of this wager",
                        "format": "int64"
                    },
                    "promotion": {
                        "$ref": "#/components/schemas/PromotionDTO"
                    },
                    "correlationId": {
                        "type": "string",
                        "description": "Id to match this wager with other transactions"
                    },
                    "ticketMessage": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TextDTO"
                        },
                        "description": "List of text regions to print"
                    },
                    "wageredAt": {
                        "$ref": "#/components/schemas/AddressDTO"
                    },
                    "redemptionMethod": {
                        "type": "string",
                        "description": "Preferred method of paying winnings such as PLAYER_ACCOUNT, BANK_ACCOUNT, or CASH."
                    },
                    "extraPlayed": {
                        "type": "boolean",
                        "description": "An extra game, such as Double Take, is included with this wager"
                    },
                    "gridId": {
                        "type": "string",
                        "description": "Grid wagered"
                    },
                    "fractions": {
                        "type": "integer",
                        "description": "Number of fractions wagered or for a fractional wager the total number of fractions\n the wager is to be broken into.",
                        "format": "int64"
                    },
                    "resultDate": {
                        "type": "integer",
                        "description": "Entry date for the results of the last draw the wager is eligible to participate in.",
                        "format": "int64"
                    },
                    "ticketEntryCode": {
                        "type": "string",
                        "description": "Ticket entry code.  Used to identify the online wager portion of a hybrid game."
                    },
                    "fractionSerialNumbers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of wager serial numbers for each fraction."
                    },
                    "triggerType": {
                        "type": "string",
                        "description": "Trigger type which caused the wager to be generated. A player can create a trigger based on some event,\n like a high jackpot amount, that will cause a wager to automatically be placed by a player system."
                    },
                    "autoTopUp": {
                        "type": "boolean",
                        "description": "If true, indicates if account should be automatically topped up"
                    },
                    "idDocument": {
                        "$ref": "#/components/schemas/IdDocumentDTO"
                    },
                    "prolongation": {
                        "type": "boolean",
                        "description": "If true, indicates wager is a prolongation of a previous wager."
                    },
                    "betSlipId": {
                        "type": "string",
                        "description": "The id of bet slip used to placed the wager."
                    }
                },
                "description": "Represents a wager for a draw"
            },
            "SubscriptionDTO": {
                "required": [
                    "autoRenew",
                    "drawDays",
                    "subscriptionDuration"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Id of the subscription, this is the ID of the individual purchase."
                    },
                    "description": {
                        "type": "string",
                        "description": "Optional subscription description"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of the subscription"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the subscription, when purchasing a predefined subscription \n this is the integer ID of the subscription type."
                    },
                    "autoRenew": {
                        "type": "boolean",
                        "description": "Indicates subscription will be auto-renewed"
                    },
                    "wager": {
                        "$ref": "#/components/schemas/WagerDTO"
                    },
                    "wagers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/WagerDTO"
                        },
                        "description": "Wagers details to be placed by the subscription"
                    },
                    "drawTimes": {
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "description": "A list of draw times for the draws that this subscription \n participates in."
                    },
                    "fee": {
                        "type": "integer",
                        "description": "The service fee amount add to the purchase price in cents of this subscription",
                        "format": "int64"
                    },
                    "subscriptionDuration": {
                        "type": "integer",
                        "description": "Number of draws for which subscription is created",
                        "format": "int32"
                    },
                    "favoriteWagerId": {
                        "type": "string",
                        "description": "Identifier of the favorite wager which was used to create subscription"
                    },
                    "autoTopUp": {
                        "type": "boolean",
                        "description": "Indicates whether subscription will use be auto-top up"
                    },
                    "forceCreateRegardlessOfDuplicates": {
                        "type": "boolean",
                        "description": "Allows player to create subscription even if system detected that duplicates exists."
                    },
                    "drawDays": {
                        "type": "array",
                        "items": {
                            "enum": [
                                "MONDAY",
                                "TUESDAY",
                                "WEDNESDAY",
                                "THURSDAY",
                                "FRIDAY",
                                "SATURDAY",
                                "SUNDAY"
                            ],
                            "type": "string"
                        },
                        "description": "Specifies days for which subscription should be triggered"
                    },
                    "discountAmount": {
                        "type": "integer",
                        "description": "The amount discounted from the purchase price in cents of this subscription",
                        "format": "int64"
                    },
                    "parentId": {
                        "type": "string",
                        "description": "The id of the subscription this renewal subscription was created from"
                    },
                    "renewalStatus": {
                        "type": "string",
                        "description": "Informational description of renewal state of this subscription"
                    },
                    "refundAmount": {
                        "type": "integer",
                        "description": "Amount refund is the this subscription is cancelled",
                        "format": "int64"
                    },
                    "created": {
                        "type": "integer",
                        "description": "Timestamp of when the subscription was created",
                        "format": "int64"
                    },
                    "lastModified": {
                        "type": "integer",
                        "description": "Timestamp of the last modification to the subscription",
                        "format": "int64"
                    },
                    "startTime": {
                        "type": "integer",
                        "description": "Timestamp of when the subscription will start.  If time is not an exact draw time, the subscription will start on next draw after the given start time.",
                        "format": "int64"
                    }
                },
                "description": "Represents a subscription for a draw"
            },
            "LocationDTO": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The location name."
                    }
                }
            },
            "ResultDTO": {
                "type": "object",
                "properties": {
                    "primary": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of main numbers or different characters"
                    },
                    "secondary": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of additional numbers or different characters"
                    },
                    "tertiary": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of tertiary numbers or different characters"
                    },
                    "multiplier": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "primaryRevealOrder": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Reveal order of main numbers or different characters"
                    },
                    "secondaryRevealOrder": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Reveal order of additional numbers or different characters"
                    },
                    "tertiaryRevealOrder": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Reveal order of tertiary numbers or different characters"
                    },
                    "drawType": {
                        "type": "string",
                        "description": "Type of the draw, such as normal or bonus."
                    },
                    "prizeTierId": {
                        "type": "string",
                        "description": "The prize tier these results are for. Typically only used with bonus or raffle type results."
                    }
                },
                "description": "Represents a result for a draw"
            },
            "PrizeTierDTO": {
                "type": "object",
                "properties": {
                    "tierNumber": {
                        "type": "integer",
                        "description": "Tier identification number",
                        "format": "int32"
                    },
                    "prizeAmount": {
                        "type": "integer",
                        "description": "Tier prize amount",
                        "format": "int64"
                    },
                    "winningTickets": {
                        "type": "integer",
                        "description": "Total number of winning ticket within the tier",
                        "format": "int32"
                    },
                    "paidTickets": {
                        "type": "integer",
                        "description": "Number of winning ticket that have been paid (claimed)",
                        "format": "int32"
                    },
                    "prizeDescription": {
                        "type": "string",
                        "description": "Description of the prize for this tier"
                    }
                }
            },
            "PlayerInfoDTO": {
                "type": "object",
                "properties": {
                    "firstName": {
                        "type": "string",
                        "description": "First name."
                    },
                    "middleName": {
                        "type": "string",
                        "description": "Middle name."
                    },
                    "lastName": {
                        "type": "string",
                        "description": "Surname or last name."
                    },
                    "prefix": {
                        "type": "string",
                        "description": "Title or prefix."
                    },
                    "suffix": {
                        "type": "string",
                        "description": "Suffix"
                    },
                    "personId": {
                        "type": "string",
                        "description": "Personal ID. Depending on the country it can be the Social Security Number,\n Passport number or any other official identification number."
                    },
                    "address": {
                        "$ref": "#/components/schemas/AddressDTO"
                    },
                    "phone": {
                        "$ref": "#/components/schemas/PhoneDTO"
                    }
                }
            },
            "AddressDTO": {
                "type": "object",
                "properties": {
                    "address1": {
                        "type": "string",
                        "description": "Main address line."
                    },
                    "address2": {
                        "type": "string",
                        "description": "Second address line."
                    },
                    "address3": {
                        "type": "string",
                        "description": "Third address line."
                    },
                    "region": {
                        "type": "string",
                        "description": "Geographic region."
                    }
                }
            },
            "DrawPageDTO": {
                "type": "object",
                "properties": {
                    "nextPageUrl": {
                        "type": "string",
                        "description": "URL to get the next page of the paginated results"
                    },
                    "previousPageUrl": {
                        "type": "string",
                        "description": "URL to get the previous page of the paginated results"
                    },
                    "pageUrls": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "page number - page URL mapping to jump to selected page"
                    },
                    "nextItems": {
                        "type": "integer",
                        "description": "Total amount of items contained in the next pages",
                        "format": "int32"
                    },
                    "previousItems": {
                        "type": "integer",
                        "description": "Total amount of items contained in the previous pages",
                        "format": "int32"
                    },
                    "draws": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DrawDTO"
                        },
                        "description": "List of draws"
                    }
                },
                "description": "Represents a page of draws. It is used when the service returns pages of draws."
            },
            "PayoutDTO": {
                "type": "object",
                "properties": {
                    "stake": {
                        "type": "integer",
                        "description": "Wagered amount in cents",
                        "format": "int64"
                    },
                    "payout": {
                        "type": "integer",
                        "description": "Payout amount in cents",
                        "format": "int64"
                    }
                },
                "description": "Provides payout information for a specific prize tier \n and stake amount."
            },
            "TicketSecurityDTO": {
                "type": "object",
                "properties": {
                    "docToken": {
                        "type": "string",
                        "description": "The input SureLock document token encoded as a hexadecimal string."
                    },
                    "secureDocToken": {
                        "type": "string",
                        "description": "The input SureLock secure document token encoded as a hexadecimal string."
                    },
                    "keyModifier": {
                        "type": "string",
                        "description": "The output SureLock key modifier encoded as a hexadecimal string."
                    },
                    "type": {
                        "type": "string",
                        "description": "Ticket security type.  For example SureLock or NASPL ECN"
                    }
                }
            },
            "TaxDTO": {
                "type": "object",
                "properties": {
                    "taxId": {
                        "type": "string",
                        "description": "The type of tax this amount and rate is."
                    },
                    "taxAmount": {
                        "type": "integer",
                        "description": "Amount of tax charged.",
                        "format": "int64"
                    },
                    "taxRate": {
                        "type": "integer",
                        "description": "The tax percentage multiplied by 1000.",
                        "format": "int64"
                    },
                    "grossAmount": {
                        "type": "integer",
                        "description": "Gross amount in cents.",
                        "format": "int64"
                    },
                    "netAmount": {
                        "type": "integer",
                        "description": "Net amount in cents.",
                        "format": "int64"
                    }
                }
            },
            "SyndicateDTO": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Syndicate id"
                    },
                    "type": {
                        "enum": [
                            "TRADITIONAL",
                            "GROUP_PLAY"
                        ],
                        "type": "string",
                        "description": "Syndicate Type"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "Syndicate instance id"
                    },
                    "name": {
                        "type": "string",
                        "description": "Syndicate name"
                    },
                    "averageLifeTime": {
                        "type": "integer",
                        "description": "Average life time",
                        "format": "int64"
                    },
                    "unsoldParts": {
                        "type": "integer",
                        "description": "Number of unsold parts - zero if no syndicate instance is available",
                        "format": "int32"
                    },
                    "totalParts": {
                        "type": "integer",
                        "description": "Total syndicate parts",
                        "format": "int32"
                    },
                    "partsPerWager": {
                        "type": "integer",
                        "description": "Number of syndicate parts per wager",
                        "format": "int32"
                    },
                    "wager": {
                        "$ref": "#/components/schemas/WagerDTO"
                    },
                    "groupWagers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/WagerDTO"
                        },
                        "description": "Syndicate wager objects"
                    },
                    "totalWins": {
                        "type": "integer",
                        "description": "Total Wins",
                        "format": "int32"
                    },
                    "totalWinningAmount": {
                        "type": "integer",
                        "description": "Total winnings amount (in cents)",
                        "format": "int64"
                    },
                    "totalPartsAllowed": {
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "description": "List of allowed total syndicate parts per wager."
                    }
                },
                "description": "Syndicate information - both definition and instance data"
            },
            "PrizeTierDescriptionDTO": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Prize tier ID"
                    },
                    "numberOfSelections": {
                        "type": "integer",
                        "description": "Number of selections in wager",
                        "format": "int32"
                    },
                    "numberOfMatchingSelections": {
                        "type": "integer",
                        "description": "Number of wagered selections matching drawn numbers",
                        "format": "int32"
                    },
                    "multiplier": {
                        "type": "integer",
                        "description": "Multiplier amount",
                        "format": "int32"
                    },
                    "payouts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PayoutDTO"
                        },
                        "description": "List of payout amounts for this prize tier"
                    },
                    "drawType": {
                        "type": "string",
                        "description": "Type of the draw, such as normal or bonus."
                    },
                    "numberOfPrimarySelections": {
                        "type": "integer",
                        "description": "Number of primary selections in wager",
                        "format": "int32"
                    },
                    "numberOfMatchingPrimarySelections": {
                        "type": "integer",
                        "description": "Number of wagered primary selections matching drawn numbers",
                        "format": "int32"
                    },
                    "numberOfSecondarySelections": {
                        "type": "integer",
                        "description": "Number secondary of selections in wager",
                        "format": "int32"
                    },
                    "numberOfMatchingSecondarySelections": {
                        "type": "integer",
                        "description": "Number of wagered secondary selections matching drawn numbers",
                        "format": "int32"
                    }
                },
                "description": "Description of a specific prize tier."
            },
            "CancelDTO": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The transaction id."
                    },
                    "status": {
                        "type": "string",
                        "description": "Result of cancel request."
                    },
                    "rejectReason": {
                        "type": "string",
                        "description": "Reason cancel was rejected."
                    },
                    "ticketSerialNumber": {
                        "type": "string",
                        "description": "Serial number of the ticket to cancel."
                    },
                    "creditAmount": {
                        "type": "integer",
                        "description": "Credit amount in cents.",
                        "format": "int64"
                    },
                    "serialNumber": {
                        "type": "string",
                        "description": "Serial number of the cancel transaction.\n\nFormat: CCC-SSSSSSSSS-PPIIDD, 3 digits CDC, 9 digits serial number, 2 digits product number, 2 digits site id, 2 digits checksum"
                    },
                    "transactionTime": {
                        "type": "integer",
                        "description": "Creation time",
                        "format": "int64"
                    },
                    "ticketMessage": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TextDTO"
                        },
                        "description": "List of text regions to print"
                    },
                    "numberOfCancelledDraws": {
                        "type": "integer",
                        "description": "The number of cancelled draws as an outcome of cancellation.",
                        "format": "int32"
                    },
                    "ticketEntryCode": {
                        "type": "string",
                        "description": "Ticket entry code.  Used to identify the online wager portion of a hybrid game to cancel (deactivate)."
                    },
                    "fractions": {
                        "type": "integer",
                        "description": "The total number fractions cancelled for a fractioned wager.",
                        "format": "int32"
                    },
                    "timeLimit": {
                        "type": "integer",
                        "description": "The cancel time limit in milliseconds.",
                        "format": "int64"
                    },
                    "ticketSecurity": {
                        "$ref": "#/components/schemas/TicketSecurityDTO"
                    }
                }
            },
            "PhoneDTO": {
                "type": "object",
                "properties": {
                    "number": {
                        "type": "string",
                        "description": "Phone number."
                    },
                    "extension": {
                        "type": "string",
                        "description": "Phone extension"
                    }
                }
            },
            "GridDTO": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The grid identifier."
                    },
                    "stake": {
                        "type": "integer",
                        "description": "The stake amount in cents for the grid entry.",
                        "format": "int64"
                    }
                },
                "description": "A single grid entry."
            },
            "BetTypeDTO": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Id of the bet type"
                    },
                    "groupId": {
                        "type": "string",
                        "description": "Group id the bet type belongs to"
                    },
                    "primarySelectionsRules": {
                        "$ref": "#/components/schemas/BetTypeSelectionsRulesDTO"
                    },
                    "secondarySelectionsRules": {
                        "$ref": "#/components/schemas/BetTypeSelectionsRulesDTO"
                    },
                    "tertiarySelectionsRules": {
                        "$ref": "#/components/schemas/BetTypeSelectionsRulesDTO"
                    },
                    "combinations": {
                        "type": "integer",
                        "description": "Number of simple bet combinations for bet type",
                        "format": "int32"
                    },
                    "boardsAllowed": {
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "description": "List of number of boards allowed for the bet type"
                    }
                },
                "description": "Represents a bet type definition."
            },
            "QuickPickDTO": {
                "required": [
                    "boardSpecs"
                ],
                "type": "object",
                "properties": {
                    "requestId": {
                        "type": "string",
                        "description": "An id for this request that will be echoed back in the response"
                    },
                    "generatorId": {
                        "type": "string",
                        "description": "The id of the RNG used to create the returned numbers"
                    },
                    "generatorVersion": {
                        "type": "string",
                        "description": "Version of the RNG used to create the returned numbers"
                    },
                    "timeStamp": {
                        "type": "integer",
                        "description": "Time when the numbers were generated",
                        "format": "int64"
                    },
                    "boardSpecs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/BoardSpecDTO"
                        },
                        "description": "List of board specifications"
                    }
                }
            },
            "TransactionLookupDTO": {
                "required": [
                    "wagers"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The transaction id."
                    },
                    "type": {
                        "enum": [
                            "WAGER",
                            "CANCEL",
                            "VALIDATION"
                        ],
                        "type": "string",
                        "description": "The type of the transaction."
                    },
                    "status": {
                        "enum": [
                            "FOUND",
                            "NOT_FOUND",
                            "REJECTED"
                        ],
                        "type": "string",
                        "description": "The result of the lookup request."
                    },
                    "rejectReason": {
                        "type": "string",
                        "description": "Reason lookup was rejected."
                    },
                    "wagers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/WagerDTO"
                        },
                        "description": "The wager details."
                    },
                    "cancels": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/CancelDTO"
                        },
                        "description": "The cancel details."
                    },
                    "validations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ValidationDTO"
                        },
                        "description": "The validation details."
                    }
                }
            },
            "BoardSpecDTO": {
                "type": "object",
                "properties": {
                    "numberOfBoards": {
                        "type": "integer",
                        "description": "Number of boards to generate",
                        "format": "int32"
                    },
                    "numberOfSelections": {
                        "type": "integer",
                        "description": "Number of selections in each board",
                        "format": "int32"
                    },
                    "rangeMin": {
                        "type": "integer",
                        "description": "Minimum selection value inclusive",
                        "format": "int32"
                    },
                    "rangeMax": {
                        "type": "integer",
                        "description": "Maximum selection value inclusive",
                        "format": "int32"
                    },
                    "withReplacement": {
                        "type": "boolean",
                        "description": "If true, the same selection can be included more than once in the same board.\n In non-statistical terminology “with replacement” is equivalent to “allow duplicates”."
                    },
                    "rangeExclusions": {
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "description": "Values to exclude from the range of selection values given by rangeMin and rangeMax"
                    },
                    "frequency": {
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "description": "Frequency (distribution) assigned to the numbers prior to selection"
                    },
                    "probabilityWeight": {
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "description": "Probability weight assigned to the numbers prior to selection"
                    },
                    "sortOrder": {
                        "enum": [
                            "ASCENDING",
                            "DESCENDING",
                            "UNSORTED"
                        ],
                        "type": "string",
                        "description": "The sort order of selections in a board"
                    },
                    "boards": {
                        "type": "array",
                        "items": {
                            "type": "array",
                            "items": {
                                "type": "integer",
                                "format": "int32"
                            }
                        },
                        "description": "The list of boards generated with each board being a list of selections"
                    }
                }
            },
            "FavoriteWagerGroupDTO": {
                "required": [
                    "id"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The group id. The group id does not change if the group name is changed."
                    },
                    "name": {
                        "type": "string",
                        "description": "The group name."
                    }
                }
            },
            "InstantGameEstimateDTO": {
                "type": "object",
                "properties": {
                    "gameId": {
                        "type": "integer",
                        "description": "Instant game id",
                        "format": "int32"
                    },
                    "inventoryEstimate": {
                        "enum": [
                            "LOW",
                            "MEDIUM",
                            "HIGH"
                        ],
                        "type": "string",
                        "description": "Estimated ticket inventory at location"
                    }
                },
                "description": "Estimated inventory at a location for an instant game."
            },
            "ErrorDTO": {
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string"
                    },
                    "fieldErrors": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FieldErrorDTO"
                        }
                    }
                }
            },
            "FavoriteWagerGroupPageDTO": {
                "type": "object",
                "properties": {
                    "nextPageUrl": {
                        "type": "string",
                        "description": "URL to get the next page of the paginated results"
                    },
                    "previousPageUrl": {
                        "type": "string",
                        "description": "URL to get the previous page of the paginated results"
                    },
                    "pageUrls": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "page number - page URL mapping to jump to selected page"
                    },
                    "nextItems": {
                        "type": "integer",
                        "description": "Total amount of items contained in the next pages",
                        "format": "int32"
                    },
                    "previousItems": {
                        "type": "integer",
                        "description": "Total amount of items contained in the previous pages",
                        "format": "int32"
                    },
                    "favoriteWagerGroups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FavoriteWagerGroupDTO"
                        },
                        "description": "List of favorite wager groupss"
                    }
                }
            },
            "StakeDTO": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The id of the stake such as BIG or SMALL"
                    },
                    "stake": {
                        "type": "integer",
                        "description": "The wagered amount in cents",
                        "format": "int64"
                    },
                    "acceptedStake": {
                        "type": "integer",
                        "description": "The accepted amount in cents",
                        "format": "int64"
                    }
                }
            },
            "TokenDTO": {
                "required": [
                    "clientId",
                    "resourceOwnerCredentials",
                    "siteId"
                ],
                "type": "object",
                "properties": {
                    "siteId": {
                        "type": "string",
                        "description": "An Identifier for the site or the instance of OAuth.\n For example 29 / RIC"
                    },
                    "scope": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Roles required or granted."
                    },
                    "clientId": {
                        "type": "string",
                        "description": "The ID of the client using OAuth, for example MOBILEAPP1."
                    },
                    "clientCredentials": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Security credentials (user/password) that validate that the client ID is correct.\n For example an APP token with password."
                    },
                    "authCode": {
                        "type": "string",
                        "description": "The authentication code issued by the OAuth server that can be used to obtain \n an access token."
                    },
                    "token": {
                        "type": "string",
                        "description": "An access or refresh token."
                    },
                    "tokenType": {
                        "type": "string",
                        "description": "String values from TokenType, and also other types supported by OAuth servers."
                    },
                    "tokenParams": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Token parameters for example expiry time may be included in token responses."
                    },
                    "resourceOwnerCredentials": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The player's username and password; the player's credentials are only\n needed when using the login resource; the support credential names\n are USERNAME and PASSWORD."
                    }
                },
                "description": "Encapsulates the details for an OAuth token, contains both the data required to use a token and to create one."
            },
            "PerBoardsWageredDTO": {
                "type": "object",
                "properties": {
                    "numberOfBoards": {
                        "type": "integer",
                        "description": "Number of boards wagered.",
                        "format": "int32"
                    },
                    "price": {
                        "type": "integer",
                        "description": "Price of wager in cents.",
                        "format": "int64"
                    }
                },
                "description": "Game rules based on number of boards wagered."
            },
            "ValidationDTO": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "description": "Status of validation request."
                    },
                    "rejectReason": {
                        "type": "string",
                        "description": "Reason validation was rejected."
                    },
                    "ticketSerialNumber": {
                        "type": "string",
                        "description": "Serial number of the ticket to validate."
                    },
                    "canPay": {
                        "type": "boolean",
                        "description": "When set indicates agent can pay the\n ticket validation amount."
                    },
                    "ticketStatus": {
                        "enum": [
                            "WINNER",
                            "NOT_A_WINNER",
                            "RESULTS_NOT_IN",
                            "PAID",
                            "EXPIRED",
                            "ON_HOLD",
                            "WINNER_DRAWS_REMAINING",
                            "INSTANT_WINNER_DRAWS_REMAINING",
                            "CLAIMED",
                            "NOT_WINNER_DRAWS_REMAINING",
                            "CLAIM_AT_LOTTERY",
                            "CANCELED"
                        ],
                        "type": "string",
                        "description": "Ticket's win status"
                    },
                    "cashAmount": {
                        "type": "integer",
                        "description": "Amount of cash won.",
                        "format": "int64"
                    },
                    "claimAmount": {
                        "type": "integer",
                        "description": "Amount claimed.",
                        "format": "int64"
                    },
                    "taxes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TaxDTO"
                        },
                        "description": "List of taxes charged against the winnings."
                    },
                    "netAmount": {
                        "type": "integer",
                        "description": "Amount of winnings after tax.",
                        "format": "int64"
                    },
                    "merchandise": {
                        "type": "string",
                        "description": "Description of merchandise prize won."
                    },
                    "jackpot": {
                        "type": "boolean",
                        "description": "When set indicates the ticket is a jackpot winner."
                    },
                    "datePaid": {
                        "type": "integer",
                        "description": "Date ticket was paid.",
                        "format": "int64"
                    },
                    "dateClaimed": {
                        "type": "integer",
                        "description": "Date ticket was claimed.",
                        "format": "int64"
                    },
                    "exchangeTicket": {
                        "$ref": "#/components/schemas/WagerDTO"
                    },
                    "freeTicket": {
                        "$ref": "#/components/schemas/WagerDTO"
                    },
                    "numberOfFreeTickets": {
                        "type": "integer",
                        "description": "If a free ticket request is included, number\n of free tickets to request.",
                        "format": "int32"
                    },
                    "ticketSecurity": {
                        "$ref": "#/components/schemas/TicketSecurityDTO"
                    },
                    "serialNumber": {
                        "type": "string",
                        "description": "Serial number of the validation transaction.\n\nFormat: CCC-SSSSSSSSS-PPIIDD, 3 digits CDC, 9 digits serial number, 2 digits product number, 2 digits site id, 2 digits checksum"
                    },
                    "transactionTime": {
                        "type": "integer",
                        "description": "Creation time",
                        "format": "int64"
                    },
                    "ticketMessage": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TextDTO"
                        },
                        "description": "List of text regions to print"
                    },
                    "validatedAt": {
                        "$ref": "#/components/schemas/AddressDTO"
                    },
                    "player": {
                        "$ref": "#/components/schemas/PlayerInfoDTO"
                    },
                    "prizes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PrizeDTO"
                        },
                        "description": "Detailed prize information"
                    },
                    "gameName": {
                        "type": "string",
                        "description": "Name of the game ticket is for"
                    },
                    "startDraw": {
                        "type": "string",
                        "description": "Ticket start draw"
                    },
                    "endDraw": {
                        "type": "string",
                        "description": "Ticket end draw"
                    },
                    "fromWager": {
                        "$ref": "#/components/schemas/WagerDTO"
                    },
                    "ticketEntryCode": {
                        "type": "string",
                        "description": "Ticket entry code.  Used to identify the online wager portion of a hybrid game to validate."
                    },
                    "limits": {
                        "$ref": "#/components/schemas/LimitsDTO"
                    },
                    "prolongable": {
                        "type": "boolean",
                        "description": "If true, indicates the wager that was validated can be played again (prolonged)."
                    },
                    "securityCode": {
                        "type": "string",
                        "description": "NASPL security code. Required when validating\n NASPL secured ticket"
                    }
                }
            },
            "GamePageDTO": {
                "type": "object",
                "properties": {
                    "nextPageUrl": {
                        "type": "string",
                        "description": "URL to request the next page, if one exists."
                    },
                    "previousPageUrl": {
                        "type": "string",
                        "description": "URL to request the previous page, if one exists."
                    },
                    "pageUrls": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "page number - page URL mapping to jump to selected page."
                    },
                    "nextItems": {
                        "type": "integer",
                        "description": "Total number of games contained in the next pages.",
                        "format": "int32"
                    },
                    "previousItems": {
                        "type": "integer",
                        "description": "Total number of games contained in the previous pages.",
                        "format": "int32"
                    },
                    "games": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/GameDTO"
                        },
                        "description": "List of games"
                    }
                }
            },
            "IdDocumentDTO": {
                "type": "object",
                "properties": {
                    "idNumber": {
                        "type": "string",
                        "description": "Id number."
                    },
                    "firstName": {
                        "type": "string",
                        "description": "First name or names."
                    },
                    "dateOfBirth": {
                        "type": "string",
                        "description": "Date of birth in YYYYMMDD format."
                    },
                    "cityOfBirth": {
                        "type": "string",
                        "description": "City born in."
                    },
                    "departmentOfBirth": {
                        "type": "string",
                        "description": "Administrative region born in."
                    },
                    "phoneNumber": {
                        "type": "string",
                        "description": "Phone number."
                    },
                    "origin": {
                        "type": "string",
                        "description": "Device or location, such as terminal, where document was scanned."
                    },
                    "documentType": {
                        "type": "string",
                        "description": "The document type scanned."
                    },
                    "documentIssueDate": {
                        "type": "string",
                        "description": "Date document was issued in YYYYMMDD format."
                    },
                    "documentIssueLocation": {
                        "type": "string",
                        "description": "Location or place document was issued."
                    },
                    "documentIssuer": {
                        "type": "string",
                        "description": "Name of the document issuer;"
                    },
                    "qualityOfIssuing": {
                        "type": "string",
                        "description": "The quality."
                    },
                    "modified": {
                        "type": "boolean",
                        "description": "If true, scanned information was modified by the retailer."
                    },
                    "encryptedName": {
                        "type": "string",
                        "description": "Encrypted name."
                    },
                    "encryptedAddress": {
                        "type": "string",
                        "description": "Encrypted address."
                    },
                    "encryptedEmail": {
                        "type": "string",
                        "description": "Encrypted email address."
                    },
                    "decryptionKeyId": {
                        "type": "string",
                        "description": "Id of the decryption key to use with the encrypted fields."
                    },
                    "hash": {
                        "type": "string",
                        "description": "Hash of names."
                    }
                }
            },
            "SubscriptionPageDTO": {
                "type": "object",
                "properties": {
                    "nextPageUrl": {
                        "type": "string",
                        "description": "URL to get the next page of the paginated results"
                    },
                    "previousPageUrl": {
                        "type": "string",
                        "description": "URL to get the previous page of the paginated results"
                    },
                    "pageUrls": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "page number - page URL mapping to jump to selected page"
                    },
                    "nextItems": {
                        "type": "integer",
                        "description": "Total amount of items contained in the next pages",
                        "format": "int32"
                    },
                    "previousItems": {
                        "type": "integer",
                        "description": "Total amount of items contained in the previous pages",
                        "format": "int32"
                    },
                    "subscriptions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/SubscriptionDTO"
                        },
                        "description": "List of subscriptions"
                    }
                },
                "description": "Represents a page of subscriptions. It is used when the service returns pages of subscriptions."
            },
            "DrawStatisticsPageDTO": {
                "type": "object",
                "properties": {
                    "nextPageUrl": {
                        "type": "string",
                        "description": "URL to get the next page of the paginated results"
                    },
                    "previousPageUrl": {
                        "type": "string",
                        "description": "URL to get the previous page of the paginated results"
                    },
                    "pageUrls": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "page number - page URL mapping to jump to selected page"
                    },
                    "nextItems": {
                        "type": "integer",
                        "description": "Total amount of items contained in the next pages",
                        "format": "int32"
                    },
                    "previousItems": {
                        "type": "integer",
                        "description": "Total amount of items contained in the previous pages",
                        "format": "int32"
                    },
                    "drawStatistics": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DrawStatisticsDTO"
                        },
                        "description": "List of statistics"
                    }
                },
                "description": "Represents a page of subscriptions. It is used when the service returns pages of subscriptions."
            },
            "DrawStatisticsDTO": {
                "type": "object",
                "properties": {
                    "resultStatistics": {
                        "$ref": "#/components/schemas/ResultStatisticsDTO"
                    }
                },
                "description": "Represents a page of statistics. It is used when the service returns pages of statistics."
            },
            "JackpotDTO": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Id of the jackpot"
                    },
                    "amount": {
                        "type": "integer",
                        "description": "Jackpot amount",
                        "format": "int64"
                    },
                    "cashAmount": {
                        "type": "integer",
                        "description": "Jackpot cash amount",
                        "format": "int64"
                    },
                    "description": {
                        "type": "string",
                        "description": "Jackpot description"
                    }
                },
                "description": "Represents a jackpot"
            },
            "GameDTO": {
                "type": "object",
                "properties": {
                    "gameId": {
                        "type": "string",
                        "description": "Numeric Game identifier"
                    },
                    "gameName": {
                        "type": "string",
                        "description": "Name of the instant game"
                    },
                    "validationStatus": {
                        "enum": [
                            "NOT_ACTIVE",
                            "ACTIVE",
                            "DISABLED",
                            "CLOSED"
                        ],
                        "type": "string",
                        "description": "Validation status"
                    },
                    "ticketPrice": {
                        "type": "integer",
                        "description": "Price of ticket for game",
                        "format": "int64"
                    },
                    "launchDate": {
                        "type": "integer",
                        "description": "Date when the game is expected to be available at retailer",
                        "format": "int64"
                    },
                    "startDistributionDate": {
                        "type": "integer",
                        "description": "Date when game distribution to retailers will start",
                        "format": "int64"
                    },
                    "endDistributionDate": {
                        "type": "integer",
                        "description": "Date when game will no longer be distributed to retailers",
                        "format": "int64"
                    },
                    "disableDate": {
                        "type": "integer",
                        "description": "Date where game is disabled and no longer redeemable",
                        "format": "int64"
                    },
                    "preCallDate": {
                        "type": "integer",
                        "description": "Date where game to 30 days away from being called",
                        "format": "int64"
                    },
                    "numberOfTicketsInPack": {
                        "type": "integer",
                        "description": "Number of tickets in a pack",
                        "format": "int64"
                    },
                    "totalTicket": {
                        "type": "integer",
                        "description": "Approximate number of total tickets in game",
                        "format": "int64"
                    },
                    "overallOdds": {
                        "type": "string",
                        "description": "The overall odds of the game"
                    },
                    "featured": {
                        "type": "boolean",
                        "description": "Game is being featured or promoted"
                    },
                    "prizeTiers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PrizeTierDTO"
                        },
                        "description": "List of the games prize tiers"
                    },
                    "lastUpdatedTime": {
                        "type": "integer",
                        "description": "Timestamp of when game was last updated",
                        "format": "int64"
                    }
                }
            },
            "SubscriptionRuleSetDTO": {
                "type": "object",
                "properties": {
                    "durations": {
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "description": "The list of durations that can be purchased.  Used when available durations are not a consecutive range."
                    },
                    "minDuration": {
                        "type": "integer",
                        "description": "The minimum duration that can be purchased",
                        "format": "int32"
                    },
                    "maxDuration": {
                        "type": "integer",
                        "description": "The maximum duration that can be purchased",
                        "format": "int32"
                    },
                    "durationUnit": {
                        "enum": [
                            "DAYS",
                            "WEEKS",
                            "DRAWS"
                        ],
                        "type": "string",
                        "description": "The units of minimum and maximum duration"
                    },
                    "maxAdvancedDraw": {
                        "type": "integer",
                        "description": "The maximum number of advanced draws the player can select as the starting draw for the subscription",
                        "format": "int32"
                    },
                    "fee": {
                        "type": "integer",
                        "description": "The service fee amount add to the purchase price in cents",
                        "format": "int64"
                    },
                    "discountAmount": {
                        "type": "integer",
                        "description": "The amount discounted from the purchase price in cents",
                        "format": "int64"
                    },
                    "discountType": {
                        "enum": [
                            "FIXED",
                            "PER_BOARD"
                        ],
                        "type": "string",
                        "description": "The discount type"
                    }
                },
                "description": "Represents the set of subscription rules for a given game"
            },
            "BoardDTO": {
                "required": [
                    "multiplier",
                    "primarySelections",
                    "primarySelectionsQuickpicked",
                    "quickPickCount",
                    "quickpick",
                    "secondaryQuickPickCount",
                    "secondarySelectionsQuickpicked"
                ],
                "type": "object",
                "properties": {
                    "systemBetType": {
                        "type": "string",
                        "description": "Type or modality of the bet"
                    },
                    "betType": {
                        "type": "string",
                        "description": "Type of the bet"
                    },
                    "favorite": {
                        "type": "boolean",
                        "description": "Indicates whether a board is favorite board or not"
                    },
                    "favoriteId": {
                        "type": "string",
                        "description": "Specifying favorite board id"
                    },
                    "quickpick": {
                        "type": "boolean",
                        "description": "If the board is or will be generated using random numbers provided by the system"
                    },
                    "multiplier": {
                        "type": "boolean",
                        "description": "If the board will be played with multiplier"
                    },
                    "primarySelections": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The primary numbers of the board informed only when a single selection is made; It is a list of marks"
                    },
                    "secondarySelections": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The secondary numbers of the board informed only when a single selection is made; It is a list of marks"
                    },
                    "tertiarySelections": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The tertiary numbers of the board informed only when a single selection is made; It is a list of marks"
                    },
                    "primaryMultipleSelections": {
                        "type": "array",
                        "items": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "description": "The primary numbers of the board informed only when a multiple selection is made; It is a list of selections which each selections is a list of marks"
                    },
                    "secondaryMultipleSelections": {
                        "type": "array",
                        "items": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "description": "The secondary numbers of the board informed only when a multiple selection is made; It is a list of selections which each selections is a list of marks"
                    },
                    "tertiaryMultipleSelections": {
                        "type": "array",
                        "items": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "description": "The tertiary numbers of the board informed only when a multiple selection is made; It is a list of selections which each selections is a list of marks"
                    },
                    "primarySelectionsQuickpicked": {
                        "type": "boolean",
                        "description": "Indicates that some or all of the primary selections were quick-picked\n for the player."
                    },
                    "secondarySelectionsQuickpicked": {
                        "type": "boolean",
                        "description": "Indicates that some or all of the secondary selections were quick-picked\n for the player."
                    },
                    "tertiarySelectionsQuickpicked": {
                        "type": "boolean",
                        "description": "Indicates that some or all of the tertiary selections were quick-picked\n for the player."
                    },
                    "stake": {
                        "type": "integer",
                        "description": "Stake or wagered amount for this board.",
                        "format": "int64"
                    },
                    "selections": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The numbers selected."
                    },
                    "stakes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/StakeDTO"
                        },
                        "description": "List of stakes for games that allow mor than one stake per board"
                    },
                    "soldOut": {
                        "type": "boolean",
                        "description": "If true, the board was sold out."
                    },
                    "addonPlayed": {
                        "type": "boolean",
                        "description": "Indicates the included addon wagers are played when set."
                    },
                    "drawNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of draw names the board is for."
                    },
                    "taxes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TaxDTO"
                        },
                        "description": "List of taxes charged for the board."
                    },
                    "quickPickCount": {
                        "type": "integer",
                        "description": "Number of selections quick-picked.",
                        "format": "int32"
                    },
                    "secondaryQuickPickCount": {
                        "type": "integer",
                        "description": "Number of secondary selections quick-picked.",
                        "format": "int32"
                    },
                    "tertiaryQuickPickCount": {
                        "type": "integer",
                        "description": "Number of tertiary selections quick-picked.",
                        "format": "int32"
                    },
                    "groupMemberId": {
                        "type": "string",
                        "description": "Owner of the board."
                    },
                    "potentialPrizeAmount": {
                        "type": "integer",
                        "description": "Potential prize amount for the board; returned by the transaction engine when the wager is placed.  Used by the\n Cash Pop game.",
                        "format": "int64"
                    }
                },
                "description": "The board can contain single or multiple selections"
            },
            "DrawDTO": {
                "type": "object",
                "properties": {
                    "gameName": {
                        "type": "string",
                        "description": "Game name"
                    },
                    "brandName": {
                        "type": "string",
                        "description": "Brand name associated with the game name"
                    },
                    "id": {
                        "type": "string",
                        "description": "Draw id"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of draw e.g. Wednesday draw"
                    },
                    "drawDay": {
                        "type": "array",
                        "items": {
                            "enum": [
                                "MONDAY",
                                "TUESDAY",
                                "WEDNESDAY",
                                "THURSDAY",
                                "FRIDAY",
                                "SATURDAY",
                                "SUNDAY"
                            ],
                            "type": "string"
                        },
                        "description": "Days when draw takes place"
                    },
                    "description": {
                        "type": "string",
                        "description": "Draw description"
                    },
                    "status": {
                        "enum": [
                            "OPEN",
                            "CLOSED",
                            "RESULTS_AVAILABLE",
                            "PAYABLE",
                            "FUTURE",
                            "CANCELLED",
                            "NO_MORE_DRAWS",
                            "INVALID"
                        ],
                        "type": "string",
                        "description": "Draw status"
                    },
                    "openTime": {
                        "type": "integer",
                        "description": "Draw opening time",
                        "format": "int64"
                    },
                    "closeTime": {
                        "type": "integer",
                        "description": "Draw closing time",
                        "format": "int64"
                    },
                    "drawTime": {
                        "type": "integer",
                        "description": "Draw time",
                        "format": "int64"
                    },
                    "wagerAvailable": {
                        "type": "boolean",
                        "description": "If wagering is available"
                    },
                    "wagerCloseTime": {
                        "type": "integer",
                        "description": "Draw wagering closing time",
                        "format": "int64"
                    },
                    "cancelAvailable": {
                        "type": "boolean",
                        "description": "If wagering cancellation is available"
                    },
                    "cancelCloseTime": {
                        "type": "integer",
                        "description": "Draw wagering cancellation closing time",
                        "format": "int64"
                    },
                    "breakEndTime": {
                        "type": "integer",
                        "description": "Draw breaking ending time",
                        "format": "int64"
                    },
                    "protestPeriodEndTime": {
                        "type": "integer",
                        "description": "Protest period end",
                        "format": "int64"
                    },
                    "resultsAvailableTime": {
                        "type": "integer",
                        "description": "Time when draw results will be published",
                        "format": "int64"
                    },
                    "totalSales": {
                        "type": "integer",
                        "description": "Revenue for a draw",
                        "format": "int64"
                    },
                    "additionalPrizeTierTotalSales": {
                        "type": "integer",
                        "description": "Revenue for additional prize tier for a draw",
                        "format": "int64"
                    },
                    "gameRuleSet": {
                        "$ref": "#/components/schemas/GameRuleSetDTO"
                    },
                    "predefinedGameRuleSets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/GameRuleSetDTO"
                        },
                        "description": "Predefined game rule sets used for e.g. Keno"
                    },
                    "addonDraws": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DrawDTO"
                        },
                        "description": "List of add-on draws"
                    },
                    "estimatedJackpot": {
                        "type": "integer",
                        "description": "Estimated jackpot",
                        "format": "int64"
                    },
                    "jackpotDescription": {
                        "type": "string",
                        "description": "Jackpot description"
                    },
                    "rollover": {
                        "type": "boolean",
                        "description": "Rollover rule (payouts adjusted after N draws with no high-tier wins) applies for this draw or not"
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ResultDTO"
                        },
                        "description": "Game results"
                    },
                    "prizeTiers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PrizeTierDTO"
                        },
                        "description": "Prize tiers"
                    },
                    "resultStatistics": {
                        "$ref": "#/components/schemas/ResultStatisticsDTO"
                    },
                    "subscriptionAvailable": {
                        "type": "boolean",
                        "description": "Indicates subscription is available"
                    },
                    "jackpots": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/JackpotDTO"
                        },
                        "description": "Jackpots"
                    },
                    "popularBoards": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PopularBoardDTO"
                        },
                        "description": "Popular boards"
                    }
                },
                "description": "Represents a draw"
            },
            "GameRuleSetDTO": {
                "type": "object",
                "properties": {
                    "status": {
                        "enum": [
                            "ACCEPTED",
                            "REJECTED"
                        ],
                        "type": "string",
                        "description": "Status of game rules request."
                    },
                    "rejectReason": {
                        "type": "string",
                        "description": "Reason request was rejected."
                    },
                    "id": {
                        "type": "string",
                        "description": "Game rule set id"
                    },
                    "name": {
                        "type": "string",
                        "description": "Game rule set name"
                    },
                    "basePrice": {
                        "type": "integer",
                        "description": "Price of single row in cents",
                        "format": "int64"
                    },
                    "minPrice": {
                        "type": "integer",
                        "description": "Minimum price of wager in cents",
                        "format": "int64"
                    },
                    "maxPrice": {
                        "type": "integer",
                        "description": "Maximum price of wager in cents",
                        "format": "int64"
                    },
                    "minBoards": {
                        "type": "integer",
                        "description": "Minimum number of boards",
                        "format": "int32"
                    },
                    "maxBoards": {
                        "type": "integer",
                        "description": "Maximum number of boards",
                        "format": "int32"
                    },
                    "defaultBoards": {
                        "type": "integer",
                        "description": "Default number of boards",
                        "format": "int32"
                    },
                    "additionalPrizeTierAvailable": {
                        "type": "boolean",
                        "description": "Flag determining if additional prize tier should be shown"
                    },
                    "additionalPrizeTierPrice": {
                        "type": "integer",
                        "description": "Price of the additional prize tier selection in cents",
                        "format": "int64"
                    },
                    "minPrimarySelections": {
                        "type": "integer",
                        "description": "Minimum number of primary selections",
                        "format": "int32"
                    },
                    "minSecondarySelections": {
                        "type": "integer",
                        "description": "Minimum number of secondary selections",
                        "format": "int32"
                    },
                    "minTertiarySelections": {
                        "type": "integer",
                        "description": "Minimum number of tertiary selections",
                        "format": "int32"
                    },
                    "maxPrimarySelections": {
                        "type": "integer",
                        "description": "Maximum number of primary selections",
                        "format": "int32"
                    },
                    "maxSecondarySelections": {
                        "type": "integer",
                        "description": "Maximum number of secondary selections",
                        "format": "int32"
                    },
                    "maxTertiarySelections": {
                        "type": "integer",
                        "description": "Maximum number of tertiary selections",
                        "format": "int32"
                    },
                    "defaultNumberOfSelections": {
                        "type": "integer",
                        "description": "Default number of selections for games that allow varying number of selections",
                        "format": "int32"
                    },
                    "quickPickAvailable": {
                        "type": "boolean",
                        "description": "Flag indicating if quick picks are available"
                    },
                    "multiplierAvailable": {
                        "type": "boolean",
                        "description": "Availability of multiplier"
                    },
                    "multiplierPrice": {
                        "type": "integer",
                        "description": "Price of the multiplier in cents",
                        "format": "int64"
                    },
                    "multipliers": {
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "description": "List of available multipliers"
                    },
                    "stakes": {
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "description": "Either provide a list of available stakes or stakeInterval + minStake + maxStake"
                    },
                    "stakeInterval": {
                        "type": "integer",
                        "description": "Stake interval in cents",
                        "format": "int64"
                    },
                    "minStake": {
                        "type": "integer",
                        "description": "Minimum stake in cents",
                        "format": "int64"
                    },
                    "maxStake": {
                        "type": "integer",
                        "description": "Maximum stake in cents",
                        "format": "int64"
                    },
                    "defaultStake": {
                        "type": "integer",
                        "description": "Default stake in cents",
                        "format": "int64"
                    },
                    "durations": {
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "description": "List of available durations"
                    },
                    "maxDuration": {
                        "type": "integer",
                        "description": "Maximum duration allowed",
                        "format": "int32"
                    },
                    "minSystemLevel": {
                        "type": "integer",
                        "description": "Minimum system level",
                        "format": "int32"
                    },
                    "maxSystemLevel": {
                        "type": "integer",
                        "description": "Maximum system level",
                        "format": "int32"
                    },
                    "systemLevels": {
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "description": "List of available system levels"
                    },
                    "primarySelectionsLowNumber": {
                        "type": "integer",
                        "description": "The lowest primary selection value allowed",
                        "format": "int32"
                    },
                    "primarySelectionsHighNumber": {
                        "type": "integer",
                        "description": "The highest primary selection value allowed",
                        "format": "int32"
                    },
                    "primarySelectionsAllowed": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of allowed primary selection values"
                    },
                    "secondarySelectionsLowNumber": {
                        "type": "integer",
                        "description": "The lowest secondary selection value allowed",
                        "format": "int32"
                    },
                    "secondarySelectionsHighNumber": {
                        "type": "integer",
                        "description": "The highest secondary selection value allowed",
                        "format": "int32"
                    },
                    "secondarySelectionsAllowed": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of allowed secondary selection values"
                    },
                    "tertiarySelectionsLowNumber": {
                        "type": "integer",
                        "description": "The lowest tertiary selection value allowed",
                        "format": "int32"
                    },
                    "tertiarySelectionsHighNumber": {
                        "type": "integer",
                        "description": "The highest tertiary selection value allowed",
                        "format": "int32"
                    },
                    "tertiarySelectionsAllowed": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of allowed tertiary selection values"
                    },
                    "prizeTierDescriptions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PrizeTierDescriptionDTO"
                        },
                        "description": "Descriptions of each prize tier including payout amount"
                    },
                    "gameId": {
                        "type": "string",
                        "description": "Game id"
                    },
                    "subscriptionRules": {
                        "$ref": "#/components/schemas/SubscriptionRuleSetDTO"
                    },
                    "promotions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PromotionDTO"
                        },
                        "description": "Game promotions"
                    },
                    "revision": {
                        "type": "string",
                        "description": "The current revision of the game rules."
                    },
                    "ticketMessage": {
                        "type": "string",
                        "description": "The ticket message to print on tickets."
                    },
                    "basePointsPrice": {
                        "type": "integer",
                        "description": "Price of single row in points",
                        "format": "int64"
                    },
                    "betTypes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/BetTypeDTO"
                        },
                        "description": "Game bet types"
                    },
                    "systemBetTypes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/SystemBetTypeDTO"
                        },
                        "description": "Game system bet types"
                    },
                    "defaultBetType": {
                        "type": "string",
                        "description": "The default bet type."
                    },
                    "drawNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of named draws for this game"
                    },
                    "selectionDescriptions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/SelectionDescriptionDTO"
                        },
                        "description": "Description of game selections"
                    },
                    "addonAvailable": {
                        "type": "boolean",
                        "description": "If true, the addon game is available."
                    },
                    "grids": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/GridDTO"
                        },
                        "description": "List of available grids."
                    },
                    "syndicates": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/SyndicateDTO"
                        },
                        "description": "List of available syndicates"
                    },
                    "addonGames": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/GameRuleSetDTO"
                        },
                        "description": "List of addon games"
                    },
                    "maxMultiPlay": {
                        "type": "integer",
                        "description": "Max number of repeats allowed",
                        "format": "int32"
                    },
                    "defaultMultiPlay": {
                        "type": "integer",
                        "description": "Default number of repeats allowed",
                        "format": "int32"
                    },
                    "fractions": {
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "description": "The list of fractions allowed for this game"
                    },
                    "fractionMaxPrice": {
                        "type": "integer",
                        "description": "The fractions max price",
                        "format": "int64"
                    },
                    "fractionMinPrice": {
                        "type": "integer",
                        "description": "The fractions max price",
                        "format": "int64"
                    },
                    "confirmDurationThreshold": {
                        "type": "integer",
                        "description": "Require confirmation before placing a wager with a duration greater than or equal to the threshold",
                        "format": "int32"
                    },
                    "confirmWagerThreshold": {
                        "type": "integer",
                        "description": "Require confirmation before placing wager if price of wager is greater than or equal to the threshold",
                        "format": "int64"
                    },
                    "reenterGame": {
                        "type": "boolean",
                        "description": "Return to game entry screen instead of home screen after placing wager"
                    },
                    "perBoardsWagered": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PerBoardsWageredDTO"
                        },
                        "description": "List of rules based on number of boards wagered"
                    },
                    "fractionFullSystemBetAllowed": {
                        "type": "boolean",
                        "description": "Indicates if a fractioned wager can be of bet type full system."
                    },
                    "fractionReducedSystemBetAllowed": {
                        "type": "boolean",
                        "description": "Indicates if a fractioned wager can be of bet type reduced system."
                    },
                    "fractionSimpleBetAllowed": {
                        "type": "boolean",
                        "description": "Indicates if a fractioned wager can be of bet type simple."
                    },
                    "fractionQuickPickAllowed": {
                        "type": "boolean",
                        "description": "Indicates if a fractioned wager can be a quick-pick."
                    },
                    "fractionManualEntryAllowed": {
                        "type": "boolean",
                        "description": "Indicates if a fractioned wager can be a manual entry."
                    },
                    "fractionDurationsAllowed": {
                        "type": "boolean",
                        "description": "Indicates if durations (multiple draws) are supported for a fractioned wager."
                    },
                    "delaysAllowed": {
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "description": "List of allowed delays (advanced draws).  Skip n number of draws starting from the current draw."
                    }
                },
                "description": "Represents the set of game rules for a given game"
            },
            "TextDTO": {
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "The type of the text such as header, body, or ticket"
                    },
                    "position": {
                        "type": "string",
                        "description": "The position to print ticket such as above or below logo"
                    },
                    "text": {
                        "type": "string",
                        "description": "The text to print"
                    }
                },
                "description": "Text information"
            },
            "WagerPageDTO": {
                "type": "object",
                "properties": {
                    "nextPageUrl": {
                        "type": "string",
                        "description": "URL to get the next page of the paginated results"
                    },
                    "previousPageUrl": {
                        "type": "string",
                        "description": "URL to get the previous page of the paginated results"
                    },
                    "pageUrls": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "page number - page URL mapping to jump to selected page"
                    },
                    "nextItems": {
                        "type": "integer",
                        "description": "Total amount of items contained in the next pages",
                        "format": "int32"
                    },
                    "previousItems": {
                        "type": "integer",
                        "description": "Total amount of items contained in the previous pages",
                        "format": "int32"
                    },
                    "wagers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/WagerDTO"
                        },
                        "description": "List of wager details"
                    }
                }
            },
            "SystemBetTypeDTO": {
                "type": "object",
                "properties": {
                    "boardsAllowed": {
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "description": "List of number of boards allowed for the system bet type"
                    },
                    "combinations": {
                        "type": "integer",
                        "description": "Number of combinations",
                        "format": "int32"
                    },
                    "picks": {
                        "type": "integer",
                        "description": "Number of picks",
                        "format": "int32"
                    },
                    "id": {
                        "type": "string",
                        "description": "Id of system bet type"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of system bet type"
                    }
                },
                "description": "Represents a system bet type definition"
            },
            "ResultStatisticDTO": {
                "type": "object",
                "properties": {
                    "result": {
                        "type": "string",
                        "description": "The result (number) this statistic is for"
                    },
                    "frequency": {
                        "type": "number",
                        "description": "Frequency with which the result occurred",
                        "format": "double"
                    }
                }
            },
            "LocationPageDTO": {
                "type": "object",
                "properties": {
                    "nextPageUrl": {
                        "type": "string",
                        "description": "URL to get the next page of the paginated results"
                    },
                    "previousPageUrl": {
                        "type": "string",
                        "description": "URL to get the previous page of the paginated results"
                    },
                    "pageUrls": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "page number - page URL mapping to jump to selected page"
                    },
                    "nextItems": {
                        "type": "integer",
                        "description": "Total amount of items contained in the next pages",
                        "format": "int32"
                    },
                    "previousItems": {
                        "type": "integer",
                        "description": "Total amount of items contained in the previous pages",
                        "format": "int32"
                    },
                    "locations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/LocationDTO"
                        },
                        "description": "Page of query results"
                    }
                },
                "description": "A page of locations."
            },
            "PrizeDTO": {
                "type": "object",
                "properties": {
                    "gameName": {
                        "type": "string",
                        "description": "Name of the game the ticket that win a prize for"
                    },
                    "brandName": {
                        "type": "string",
                        "description": "Brand name associated with the game name"
                    },
                    "drawId": {
                        "type": "string",
                        "description": "Draw id ticket that win for"
                    },
                    "drawTime": {
                        "type": "integer",
                        "description": "Date of the draw",
                        "format": "int64"
                    },
                    "resultSet": {
                        "type": "string",
                        "description": "Name of the result set the ticket that win for"
                    },
                    "prizeTierName": {
                        "type": "string",
                        "description": "Name of the division the ticket that win for"
                    },
                    "prizeTierId": {
                        "type": "string",
                        "description": "Id of the division the ticket that win for"
                    },
                    "shares": {
                        "type": "integer",
                        "description": "Number of shares the ticket that in within the division",
                        "format": "int32"
                    },
                    "amount": {
                        "type": "integer",
                        "description": "Amount the ticket that win within the division",
                        "format": "int64"
                    },
                    "status": {
                        "enum": [
                            "NOT_PAID",
                            "PAID",
                            "EXPIRED"
                        ],
                        "type": "string",
                        "description": "The status of the prize"
                    },
                    "type": {
                        "enum": [
                            "PARAMUTUEL",
                            "FIXED",
                            "FIXED_AND_PARAMUTUEL",
                            "FREE_TICKET",
                            "MERCHANDISE"
                        ],
                        "type": "string",
                        "description": "Type of prize the ticket won"
                    },
                    "merchandiseDescription": {
                        "type": "string",
                        "description": "Merchandise prize description"
                    }
                },
                "description": "Represents a prize for a draw"
            },
            "LimitsDTO": {
                "type": "object",
                "properties": {
                    "maxRetailerValidationThreshold": {
                        "type": "integer",
                        "description": "Maximum amount in cents a retailer is allowed to payout.  A value greater than the threshold\n will cause the validation request to be rejected.",
                        "format": "int64"
                    }
                },
                "description": "Definition of various limits which can be applied to draw game transaction processing."
            },
            "interactiveWagerDTO": {
                "type": "object",
                "properties": {
                    "revealId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "revealVersionId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "externalRevealId": {
                        "type": "string"
                    },
                    "organizationName": {
                        "type": "string"
                    },
                    "productId": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "lotteryGridNumber": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "siteId": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "revealName": {
                        "type": "string"
                    },
                    "amount": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "playedDate": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "wagerType": {
                        "enum": [
                            "TRY",
                            "BUY"
                        ],
                        "type": "string"
                    },
                    "channel": {
                        "type": "string"
                    },
                    "subChannel": {
                        "type": "string"
                    },
                    "currency": {
                        "type": "string"
                    },
                    "clientWagerId": {
                        "type": "string"
                    },
                    "externalTransactionId": {
                        "type": "string"
                    },
                    "revealStatus": {
                        "type": "string"
                    },
                    "revealErrorCode": {
                        "type": "string"
                    },
                    "revealData": {
                        "type": "string"
                    },
                    "scenario": {
                        "type": "string"
                    },
                    "playResult": {
                        "type": "string"
                    },
                    "prizeValue": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "prizeDivision": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "prizeTable": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/WagerPrizeDTO"
                        }
                    },
                    "prizeStructure": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/WagerPrizeDTO"
                        }
                    },
                    "deviceDetails": {
                        "type": "string"
                    },
                    "gameSessionId": {
                        "type": "string"
                    },
                    "spots": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "multiplier": {
                        "type": "boolean"
                    },
                    "gameSystem": {
                        "type": "string"
                    },
                    "displayTypes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "description": "E-instant (electronic scratch card) wager that will be placed by trigger activation",
                "nullable": true
            },
            "WagerPrizeDTO": {
                "type": "object",
                "properties": {
                    "division": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "prize": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "bonusAmount": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "prizeNonCash": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "prizeTypeId": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "description": {
                        "type": "string"
                    },
                    "progressive": {
                        "type": "boolean"
                    }
                }
            },
            "interactiveErrorDTO": {
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string"
                    },
                    "fieldErrors": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/interactiveFieldErrorDTO"
                        }
                    }
                }
            },
            "interactiveFieldErrorDTO": {
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string"
                    },
                    "field": {
                        "type": "string"
                    }
                }
            },
            "interactiveAddressDTO": {
                "type": "object",
                "properties": {
                    "address1": {
                        "type": "string"
                    },
                    "address2": {
                        "type": "string"
                    },
                    "address3": {
                        "type": "string"
                    },
                    "region": {
                        "type": "string"
                    }
                }
            },
            "interactiveBoardDTO": {
                "type": "object",
                "properties": {
                    "systemBetType": {
                        "type": "string"
                    },
                    "betType": {
                        "type": "string"
                    },
                    "favorite": {
                        "type": "boolean"
                    },
                    "favoriteId": {
                        "type": "string"
                    },
                    "quickpick": {
                        "type": "boolean"
                    },
                    "multiplier": {
                        "type": "boolean"
                    },
                    "primarySelections": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "secondarySelections": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "tertiarySelections": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "primaryMultipleSelections": {
                        "type": "array",
                        "items": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "secondaryMultipleSelections": {
                        "type": "array",
                        "items": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "tertiaryMultipleSelections": {
                        "type": "array",
                        "items": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "primarySelectionsQuickpicked": {
                        "type": "boolean"
                    },
                    "secondarySelectionsQuickpicked": {
                        "type": "boolean"
                    },
                    "tertiarySelectionsQuickpicked": {
                        "type": "boolean"
                    },
                    "stake": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "selections": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "stakes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/interactiveStakeDTO"
                        }
                    },
                    "soldOut": {
                        "type": "boolean"
                    },
                    "addonPlayed": {
                        "type": "boolean"
                    },
                    "drawNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "taxes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/interactiveTaxDTO"
                        }
                    },
                    "quickPickCount": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "secondaryQuickPickCount": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "tertiaryQuickPickCount": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "groupMemberId": {
                        "type": "string"
                    },
                    "potentialPrizeAmount": {
                        "type": "integer",
                        "format": "int64"
                    }
                }
            },
            "CartDTO": {
                "required": [
                    "id"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Id of the cart",
                        "example": "84e62dfe6fd64ff89f565d3b5e80140f"
                    },
                    "externalRequestId": {
                        "type": "string",
                        "description": "External representation of the cart",
                        "example": "1000008847+4fc528c3680f4ec28926ba4f1787f4bb"
                    },
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/CartItemDTO"
                        },
                        "description": "Collection of cart items"
                    },
                    "totals": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PaymentDTO"
                        },
                        "description": "Collection of total payments amounts distinguished by payment type"
                    },
                    "cartType": {
                        "enum": [
                            "REGULAR",
                            "PACKAGE"
                        ],
                        "type": "string",
                        "description": "Possible cart types"
                    },
                    "cartPromotion": {
                        "$ref": "#/components/schemas/CartPromotionDTO"
                    }
                },
                "description": "Object representing cart"
            },
            "CartItemDTO": {
                "required": [
                    "id"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Id of the cart item",
                        "example": "93cf20a2-97f6-4ed4-9ec8-e5e9b12f250f"
                    },
                    "type": {
                        "enum": [
                            "WAGER",
                            "SUBSCRIPTION",
                            "EINSTANT_WAGER",
                            "FREE_WAGER"
                        ],
                        "type": "string",
                        "description": "Type of the cart item",
                        "example": "WAGER"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the cart item"
                    },
                    "payment": {
                        "$ref": "#/components/schemas/PaymentDTO"
                    },
                    "valid": {
                        "type": "boolean",
                        "description": "Flag indicating if cart item passed validation"
                    },
                    "error": {
                        "$ref": "#/components/schemas/interactiveErrorDTO"
                    },
                    "packageId": {
                        "type": "string",
                        "description": "Id of associated package, see PackageDTO.packageId"
                    },
                    "predefinedId": {
                        "type": "string",
                        "description": "Id of specific instances of a package"
                    }
                },
                "description": "Represents cart item in a cart"
            },
            "CartPromotionDTO": {
                "type": "object",
                "properties": {
                    "wagers": {
                        "type": "object",
                        "properties": {
                            "status": {
                                "type": "string"
                            },
                            "rejectReason": {
                                "type": "string"
                            },
                            "error": {
                                "$ref": "#/components/schemas/interactiveErrorDTO"
                            },
                            "type": {
                                "enum": [
                                    "SUBSCRIPTION",
                                    "SYNDICATE",
                                    "NORMAL",
                                    "FRACTION"
                                ],
                                "type": "string"
                            },
                            "channel": {
                                "type": "string"
                            },
                            "drawIds": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "drawId": {
                                "type": "string"
                            },
                            "duration": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "delay": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "drawNames": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "gameName": {
                                "type": "string"
                            },
                            "addonWagers": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/interactiveWagerDTO"
                                }
                            },
                            "price": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "id": {
                                "type": "string"
                            },
                            "requestId": {
                                "type": "string"
                            },
                            "serialNumber": {
                                "type": "string"
                            },
                            "boards": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/interactiveBoardDTO"
                                }
                            },
                            "transactionTime": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "additionalPrizeTier": {
                                "type": "boolean"
                            },
                            "stake": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "multiplier": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "predefinedGameRuleSetId": {
                                "type": "string"
                            },
                            "systemLevel": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "subscriptionId": {
                                "type": "string"
                            },
                            "syndicateId": {
                                "type": "string"
                            },
                            "syndicateInstanceId": {
                                "type": "string"
                            },
                            "syndicateTotalParts": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "syndicatePartsPerWager": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "groupMemberId": {
                                "type": "string"
                            },
                            "groupId": {
                                "type": "string"
                            },
                            "favorite": {
                                "type": "boolean"
                            },
                            "favoriteId": {
                                "type": "string"
                            },
                            "digest": {
                                "type": "string"
                            },
                            "paymentSourceId": {
                                "type": "string"
                            },
                            "paymentAmount": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "paymentTransactionId": {
                                "type": "string"
                            },
                            "signature": {
                                "type": "string"
                            },
                            "drawStartDate": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "drawEndDate": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "drawDates": {
                                "type": "array",
                                "items": {
                                    "type": "integer",
                                    "format": "int64"
                                }
                            },
                            "revision": {
                                "type": "string"
                            },
                            "freeTicket": {
                                "$ref": "#/components/schemas/interactiveWagerDTO"
                            },
                            "freeTickets": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/interactiveWagerDTO"
                                }
                            },
                            "ticketSecurity": {
                                "$ref": "#/components/schemas/interactiveTicketSecurityDTO"
                            },
                            "alreadyPrinted": {
                                "type": "boolean"
                            },
                            "addonPlayed": {
                                "type": "boolean"
                            },
                            "freeTicketRequest": {
                                "type": "boolean"
                            },
                            "promotionId": {
                                "type": "string"
                            },
                            "paymentType": {
                                "type": "string"
                            },
                            "prizes": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/interactivePrizeDTO"
                                }
                            },
                            "bonusEntries": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "webCode": {
                                "type": "string"
                            },
                            "taxes": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/interactiveTaxDTO"
                                }
                            },
                            "discountAmount": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "promotion": {
                                "$ref": "#/components/schemas/interactivePromotionDTO"
                            },
                            "correlationId": {
                                "type": "string"
                            },
                            "ticketMessage": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/interactiveTextDTO"
                                }
                            },
                            "wageredAt": {
                                "$ref": "#/components/schemas/interactiveAddressDTO"
                            },
                            "redemptionMethod": {
                                "type": "string"
                            },
                            "extraPlayed": {
                                "type": "boolean"
                            },
                            "gridId": {
                                "type": "string"
                            },
                            "fractions": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "resultDate": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "ticketEntryCode": {
                                "type": "string"
                            },
                            "fractionSerialNumbers": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "triggerType": {
                                "type": "string"
                            },
                            "autoTopUp": {
                                "type": "boolean"
                            },
                            "idDocument": {
                                "$ref": "#/components/schemas/interactiveIdDocumentDTO"
                            },
                            "prolongation": {
                                "type": "boolean"
                            },
                            "betSlipId": {
                                "type": "string"
                            },
                            "virtualMoney": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "loyaltyPoints": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "bullseyePlayed": {
                                "type": "boolean"
                            }
                        },
                        "description": "Collection of promotional wagers."
                    }
                },
                "description": "Cart promotion associated with cart."
            },
            "interactiveIdDocumentDTO": {
                "type": "object",
                "properties": {
                    "idNumber": {
                        "type": "string"
                    },
                    "firstName": {
                        "type": "string"
                    },
                    "dateOfBirth": {
                        "type": "string"
                    },
                    "cityOfBirth": {
                        "type": "string"
                    },
                    "departmentOfBirth": {
                        "type": "string"
                    },
                    "phoneNumber": {
                        "type": "string"
                    },
                    "origin": {
                        "type": "string"
                    },
                    "documentType": {
                        "type": "string"
                    },
                    "documentIssueDate": {
                        "type": "string"
                    },
                    "documentIssueLocation": {
                        "type": "string"
                    },
                    "documentIssuer": {
                        "type": "string"
                    },
                    "qualityOfIssuing": {
                        "type": "string"
                    },
                    "modified": {
                        "type": "boolean"
                    },
                    "encryptedName": {
                        "type": "string"
                    },
                    "encryptedAddress": {
                        "type": "string"
                    },
                    "encryptedEmail": {
                        "type": "string"
                    },
                    "decryptionKeyId": {
                        "type": "string"
                    },
                    "hash": {
                        "type": "string"
                    }
                }
            },
            "OpenCloseTimeDTO": {
                "type": "object",
                "properties": {
                    "dayOfWeek": {
                        "enum": [
                            "MONDAY",
                            "TUESDAY",
                            "WEDNESDAY",
                            "THURSDAY",
                            "FRIDAY",
                            "SATURDAY",
                            "SUNDAY"
                        ],
                        "type": "string"
                    },
                    "openHour": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "openMinute": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "closeHour": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "closeMinute": {
                        "type": "integer",
                        "format": "int32"
                    }
                }
            },
            "PaymentDTO": {
                "required": [
                    "amount"
                ],
                "type": "object",
                "properties": {
                    "source": {
                        "$ref": "#/components/schemas/PaymentSourceDTO"
                    },
                    "amount": {
                        "type": "integer",
                        "description": "Represents payment",
                        "format": "int64",
                        "example": 200
                    }
                },
                "description": "Represents payment"
            },
            "PaymentSourceDTO": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Payment source id.",
                        "example": "MONEY"
                    },
                    "name": {
                        "type": "string",
                        "description": "Payment source name.",
                        "example": "MONEY"
                    },
                    "preferred": {
                        "type": "boolean"
                    }
                },
                "description": "A payment source is information about a players available methods of payment."
            },
            "interactivePrizeDTO": {
                "type": "object",
                "properties": {
                    "gameName": {
                        "type": "string"
                    },
                    "brandName": {
                        "type": "string"
                    },
                    "drawId": {
                        "type": "string"
                    },
                    "drawTime": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "resultSet": {
                        "type": "string"
                    },
                    "prizeTierName": {
                        "type": "string"
                    },
                    "prizeTierId": {
                        "type": "string"
                    },
                    "shares": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "amount": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "status": {
                        "enum": [
                            "NOT_PAID",
                            "PAID",
                            "EXPIRED"
                        ],
                        "type": "string"
                    },
                    "type": {
                        "enum": [
                            "PARAMUTUEL",
                            "FIXED",
                            "FIXED_AND_PARAMUTUEL",
                            "FREE_TICKET",
                            "MERCHANDISE"
                        ],
                        "type": "string"
                    },
                    "merchandiseDescription": {
                        "type": "string"
                    }
                }
            },
            "PromotionCriteriaDTO": {
                "type": "object",
                "properties": {
                    "priority": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "gameName": {
                        "type": "string"
                    },
                    "minBoardAmount": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "maxBoardAmount": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "minNumberOfBoards": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "maxNumberOfBoards": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "minWagerDuration": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "maxWagerDuration": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "minAdvancedDraw": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "maxAdvancedDraw": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "multiplierOption": {
                        "type": "string"
                    },
                    "betTypes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "playTypes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "openCloseTimes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/OpenCloseTimeDTO"
                        }
                    }
                }
            },
            "interactivePromotionDTO": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "startTime": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "endTime": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "type": {
                        "type": "string"
                    },
                    "prizeType": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "discountAmount": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "cashPrizeAmount": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "serialNumber": {
                        "type": "string"
                    },
                    "drawId": {
                        "type": "string"
                    },
                    "drawDate": {
                        "type": "string"
                    },
                    "transactionTime": {
                        "type": "string"
                    },
                    "text": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/interactiveTextDTO"
                        }
                    },
                    "state": {
                        "type": "string"
                    },
                    "promotionCriteria": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PromotionCriteriaDTO"
                        }
                    }
                }
            },
            "interactiveStakeDTO": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "stake": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "acceptedStake": {
                        "type": "integer",
                        "format": "int64"
                    }
                }
            },
            "interactiveTaxDTO": {
                "type": "object",
                "properties": {
                    "taxId": {
                        "type": "string"
                    },
                    "taxAmount": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "taxRate": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "grossAmount": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "netAmount": {
                        "type": "integer",
                        "format": "int64"
                    }
                }
            },
            "interactiveTextDTO": {
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string"
                    },
                    "position": {
                        "type": "string"
                    },
                    "text": {
                        "type": "string"
                    }
                }
            },
            "interactiveTicketSecurityDTO": {
                "type": "object",
                "properties": {
                    "docToken": {
                        "type": "string"
                    },
                    "secureDocToken": {
                        "type": "string"
                    },
                    "keyModifier": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    }
                }
            },
            "MergeDTO": {
                "type": "object",
                "properties": {
                    "fromCart": {
                        "$ref": "#/components/schemas/CartDTO"
                    },
                    "toCart": {
                        "$ref": "#/components/schemas/CartDTO"
                    },
                    "fromSelections": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/SelectionsDTO"
                        },
                        "description": "Selections to be placed onto merged items"
                    }
                },
                "description": "Object representing the carts to merge"
            },
            "SelectionsDTO": {
                "required": [
                    "boards",
                    "cartItemId",
                    "digest"
                ],
                "type": "object",
                "properties": {
                    "cartItemId": {
                        "type": "string",
                        "description": "Id of the cart item",
                        "example": "93cf20a2-97f6-4ed4-9ec8-e5e9b12f250f"
                    },
                    "digest": {
                        "type": "string",
                        "description": "Wager digest",
                        "example": "69c17c659e5414f55536f921a1f50cee8af02620e513b7df3c55ee1b2e1bbae0"
                    },
                    "boards": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/interactiveBoardDTO"
                        },
                        "description": "List of boards"
                    }
                },
                "description": "Selections to be placed onto merged items."
            },
            "OrderDTO": {
                "required": [
                    "cartId",
                    "id",
                    "items",
                    "status",
                    "timestampCreate",
                    "timestampLastModified"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Id of the order",
                        "example": "ef89de71-5a67-4c9a-b12f-c995264e8fa8"
                    },
                    "cartId": {
                        "type": "string",
                        "description": "Id of the cart that order was created from",
                        "example": "bddcc08afb5648bfbac5b0aca6bb1a33"
                    },
                    "status": {
                        "enum": [
                            "CREATED",
                            "PENDING",
                            "SUCCESS",
                            "PARTIAL_SUCCESS",
                            "FAILED",
                            "TO_VOID",
                            "VOIDED"
                        ],
                        "type": "string",
                        "description": "Status of the order",
                        "example": "SUCCESS"
                    },
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/OrderItemDTO"
                        },
                        "description": "Collection of order items"
                    },
                    "payments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PaymentDTO"
                        },
                        "description": "Collection of total payments amounts distinguished by payment type"
                    },
                    "timestampCreate": {
                        "type": "integer",
                        "description": "UTC Timestamp indicating when the order was created",
                        "format": "int64"
                    },
                    "timestampLastModified": {
                        "type": "integer",
                        "description": "UTC Timestamp when the order was last modified",
                        "format": "int64"
                    }
                },
                "description": "Object representing order"
            },
            "OrderItemDTO": {
                "required": [
                    "data",
                    "id",
                    "status",
                    "type"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Id of the order item",
                        "example": "7370fd26-5f07-4adb-81cf-22c04ce4d36e"
                    },
                    "type": {
                        "enum": [
                            "WAGER",
                            "SUBSCRIPTION",
                            "EINSTANT_WAGER",
                            "FREE_WAGER",
                            "DISCOUNT"
                        ],
                        "type": "string",
                        "description": "Type of the order item",
                        "example": "WAGER"
                    },
                    "data": {
                        "type": "string",
                        "description": "Order item specific data, JSON string."
                    },
                    "status": {
                        "enum": [
                            "CREATED",
                            "PROCESSING",
                            "SUCCESS",
                            "SOFT_FAILED",
                            "HARD_FAILED",
                            "TO_VOID",
                            "VOIDED"
                        ],
                        "type": "string",
                        "description": "Status of the order item",
                        "example": "SUCCESS"
                    },
                    "payment": {
                        "$ref": "#/components/schemas/PaymentDTO"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the order item"
                    },
                    "packageId": {
                        "type": "string",
                        "description": "Id of associated package, see PackageDTO.packageId"
                    }
                },
                "description": "Represents order item"
            },
            "interactiveSubscriptionDTO": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "autoRenew": {
                        "type": "boolean"
                    },
                    "wager": {
                        "$ref": "#/components/schemas/interactiveWagerDTO"
                    },
                    "wagers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/interactiveWagerDTO"
                        }
                    },
                    "drawTimes": {
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    "fee": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "subscriptionDuration": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "favoriteWagerId": {
                        "type": "string"
                    },
                    "autoTopUp": {
                        "type": "boolean"
                    },
                    "drawDays": {
                        "type": "array",
                        "items": {
                            "enum": [
                                "MONDAY",
                                "TUESDAY",
                                "WEDNESDAY",
                                "THURSDAY",
                                "FRIDAY",
                                "SATURDAY",
                                "SUNDAY"
                            ],
                            "type": "string"
                        }
                    },
                    "discountAmount": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "parentId": {
                        "type": "string"
                    },
                    "renewalStatus": {
                        "type": "string"
                    },
                    "refundAmount": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "created": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "lastModified": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "startTime": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "forceCreateRegardlessOfDuplicates": {
                        "type": "boolean"
                    }
                },
                "description": "Subscription that will be created by trigger activation",
                "nullable": true
            },
            "VoucherDTO": {
                "required": [
                    "errorEncountered"
                ],
                "type": "object",
                "properties": {
                    "errorEncountered": {
                        "type": "boolean",
                        "description": "Flag indicates that en error encountered"
                    },
                    "voucherErrorDTO": {
                        "$ref": "#/components/schemas/VoucherErrorDTO"
                    },
                    "voucherId": {
                        "type": "integer",
                        "description": "Voucher Id",
                        "format": "int64"
                    },
                    "voucherReferenceId": {
                        "type": "integer",
                        "description": "Referenced Voucher Id",
                        "format": "int64"
                    },
                    "voucherCode": {
                        "type": "string",
                        "description": "Voucher Code"
                    },
                    "voucherType": {
                        "enum": [
                            "FIXED_GAME_VOUCHER",
                            "FREE_PLAY_VOUCHER",
                            "LOGIN_VOUCHER",
                            "MERCHANDISE_VOUCHER",
                            "DISCOUNT_VOUCHER",
                            "GIFT_VOUCHER",
                            "UNKNOWN_VOUCHER"
                        ],
                        "type": "string",
                        "description": "Voucher types"
                    },
                    "publicAvailable": {
                        "type": "boolean",
                        "description": "Indicates is voucher is publicly available"
                    },
                    "creatorId": {
                        "type": "string",
                        "description": "Creator Type"
                    },
                    "ownerId": {
                        "type": "string",
                        "description": "Owner Type"
                    },
                    "partnerId": {
                        "type": "integer",
                        "description": "Partner Type",
                        "format": "int32"
                    },
                    "brandId": {
                        "type": "integer",
                        "description": "Brand Type",
                        "format": "int32"
                    },
                    "issueDate": {
                        "type": "integer",
                        "description": "Issue date",
                        "format": "int64"
                    },
                    "expirationDate": {
                        "type": "integer",
                        "description": "Expiration date, UTC ",
                        "format": "int64"
                    },
                    "lastUpdateDate": {
                        "type": "integer",
                        "description": "Last update Date",
                        "format": "int64"
                    },
                    "voucherPaymentType": {
                        "enum": [
                            "MONEY",
                            "LOYALTY",
                            "FREE"
                        ],
                        "type": "string",
                        "description": "Voucher payment Types"
                    },
                    "voucherPaymentTxId": {
                        "type": "string",
                        "description": "Payment Transaction Id"
                    },
                    "voucherState": {
                        "enum": [
                            "ACTIVE",
                            "CANCELLED",
                            "CONFIRMED",
                            "DELETED",
                            "EXPIRED",
                            "NOT_PAID",
                            "VALIDATED"
                        ],
                        "type": "string",
                        "description": "Voucher states"
                    },
                    "voucherValue": {
                        "type": "integer",
                        "description": "Voucher amount",
                        "format": "int64"
                    },
                    "voucherValueType": {
                        "enum": [
                            "MONEY",
                            "LOYALTY",
                            "AMOUNT"
                        ],
                        "type": "string",
                        "description": "Voucher value types"
                    },
                    "voucherChannel": {
                        "type": "string",
                        "description": "Voucher Channel"
                    },
                    "descriptionId": {
                        "type": "integer",
                        "description": "Description Id",
                        "format": "int64"
                    },
                    "requestToken": {
                        "type": "string",
                        "description": "Token generated by the party that creates voucher, can be used to make sure voucher was not altered. In baseline this is used by login vouchers to generate Low Tier Surelock code."
                    },
                    "securityToken": {
                        "type": "string",
                        "description": "Security token generated by the party that creates voucher, used to sign voucher or voucher metadata like request token, to avoid mitm attack on voucher data. In baseline this is used by login vouchers to generate Low Tier Surelock code"
                    },
                    "signature": {
                        "type": "string",
                        "description": "Voucher signature, can be calculated in backend and return to client, in baseline this is SureLock keyModifier"
                    },
                    "securityKey": {
                        "type": "string",
                        "description": "Security key, which is used to sign requestToken. This should never be persisted, we will get key with the request that require signature verification"
                    },
                    "voucherDetail": {
                        "$ref": "#/components/schemas/VoucherDetailDTO"
                    },
                    "voucherExternalIds": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/VoucherExternalIdDTO"
                        }
                    }
                },
                "description": "Main class represents voucher"
            },
            "VoucherDetailCashInDTO": {
                "required": [
                    "cdc",
                    "retailerId",
                    "terminalId",
                    "txstoreUUID"
                ],
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/VoucherDetailDTO"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "txstoreUUID": {
                                "type": "string",
                                "description": "TxStore TransactionId"
                            },
                            "retailerId": {
                                "type": "integer",
                                "description": "Retailer Id",
                                "format": "int32"
                            },
                            "terminalId": {
                                "type": "integer",
                                "description": "Terminal Id",
                                "format": "int32"
                            },
                            "mjfAddress": {
                                "type": "string"
                            },
                            "cdc": {
                                "type": "integer",
                                "description": "CDC value",
                                "format": "int32"
                            }
                        }
                    }
                ],
                "description": "Voucher CashIn details"
            },
            "VoucherDetailCreditDTO": {
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/VoucherDetailDTO"
                    }
                ],
                "description": "Voucher Credit details"
            },
            "VoucherDetailDTO": {
                "required": [
                    "@class"
                ],
                "type": "object",
                "properties": {
                    "voucherDetailId": {
                        "type": "integer",
                        "description": "Voucher Details Id",
                        "format": "int64"
                    },
                    "voucherId": {
                        "type": "integer",
                        "description": "Voucher Id",
                        "format": "int64"
                    },
                    "externalTransactionId": {
                        "type": "string",
                        "description": "External Transaction Id"
                    },
                    "voucherTemplateId": {
                        "type": "integer",
                        "description": "Voucher template Id",
                        "format": "int64"
                    },
                    "@class": {
                        "type": "string"
                    }
                },
                "description": "Common Voucher details",
                "discriminator": {
                    "propertyName": "@class"
                }
            },
            "VoucherDetailDiscountDTO": {
                "required": [
                    "minWagerAmount"
                ],
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/VoucherDetailDTO"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "minWagerAmount": {
                                "type": "integer",
                                "description": "Minimum wager amount",
                                "format": "int32"
                            },
                            "gameType": {
                                "type": "string",
                                "description": "GameType"
                            },
                            "gameName": {
                                "type": "string",
                                "description": "Game name"
                            },
                            "gameId": {
                                "type": "integer",
                                "description": "Game id",
                                "format": "int32"
                            },
                            "redemptionCdc": {
                                "type": "integer",
                                "description": "Redemption Cdc",
                                "format": "int32"
                            },
                            "retailerId": {
                                "type": "integer",
                                "description": "Retailer Id",
                                "format": "int32"
                            },
                            "terminalId": {
                                "type": "integer",
                                "description": "Terminal Id",
                                "format": "int32"
                            },
                            "specGame": {
                                "type": "boolean"
                            }
                        }
                    }
                ],
                "description": "Voucher Discount details"
            },
            "VoucherDetailFixedGameDTO": {
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/VoucherDetailDTO"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "wager": {
                                "$ref": "#/components/schemas/interactiveWagerDTO"
                            },
                            "productId": {
                                "type": "string",
                                "description": "Product Id"
                            }
                        }
                    }
                ],
                "description": "Voucher Fixed Game details"
            },
            "VoucherDetailFreePlayDTO": {
                "required": [
                    "stake"
                ],
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/VoucherDetailDTO"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "productId": {
                                "type": "string",
                                "description": "Product Id"
                            },
                            "numberOfDraws": {
                                "type": "integer",
                                "description": "Amount of draws",
                                "format": "int32"
                            },
                            "numberOfBoards": {
                                "type": "integer",
                                "description": "Amount of boards",
                                "format": "int32"
                            },
                            "stake": {
                                "type": "integer",
                                "description": "Stake",
                                "format": "int32"
                            },
                            "multiplier": {
                                "type": "boolean",
                                "description": "Multiplier"
                            },
                            "value": {
                                "type": "integer",
                                "description": "value",
                                "format": "int64"
                            },
                            "wagerDTO": {
                                "$ref": "#/components/schemas/interactiveWagerDTO"
                            }
                        }
                    }
                ],
                "description": "Voucher Free Play details"
            },
            "VoucherDetailGiftDTO": {
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/VoucherDetailDTO"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "message": {
                                "type": "string",
                                "description": "Voucher gift message"
                            },
                            "value": {
                                "type": "integer",
                                "description": "Voucher value amount",
                                "format": "int64"
                            },
                            "valueType": {
                                "enum": [
                                    "MONEY",
                                    "LOYALTY",
                                    "AMOUNT"
                                ],
                                "type": "string",
                                "description": "Voucher value types"
                            },
                            "creatorName": {
                                "type": "string",
                                "description": "Creator Name"
                            },
                            "receiverName": {
                                "type": "string",
                                "description": "Receiver Name"
                            },
                            "receiverEmail": {
                                "type": "string",
                                "description": "Receiver Email "
                            },
                            "receiverMobile": {
                                "type": "string",
                                "description": "Receiver Mobile phone number"
                            },
                            "receiverPushClientId": {
                                "type": "string",
                                "description": "Receiver PushClient Id"
                            },
                            "receiverPreferredCommunication": {
                                "type": "string",
                                "description": "Receiver Preferred Communication channel"
                            }
                        }
                    }
                ],
                "description": "Voucher Gift details"
            },
            "VoucherDetailLoginDTO": {
                "required": [
                    "retailerId",
                    "txstoreUUID"
                ],
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/VoucherDetailDTO"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "txstoreUUID": {
                                "type": "string",
                                "description": "TxStore TransactionId"
                            },
                            "retailerId": {
                                "type": "integer",
                                "description": "Retailer Id",
                                "format": "int32"
                            },
                            "terminalId": {
                                "type": "integer",
                                "description": "Terminal Id",
                                "format": "int32"
                            },
                            "username": {
                                "type": "string",
                                "description": "Username"
                            },
                            "cdc": {
                                "type": "integer",
                                "description": "CDC",
                                "format": "int32"
                            },
                            "secretRequestToken": {
                                "type": "string",
                                "description": "Token generated by the party that creates voucher, can be used to make sure voucher was not altered."
                            },
                            "secretSecurityToken": {
                                "type": "string",
                                "description": "Security token generated by the party that creates voucher, used to sign voucher or voucher metadata like request token, to avoid mitm attack on voucher data"
                            }
                        }
                    }
                ],
                "description": "Voucher Login details"
            },
            "VoucherDetailMerchandiseDTO": {
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/VoucherDetailDTO"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "merchandiseId": {
                                "type": "string",
                                "description": "Merchandise Id"
                            },
                            "redemptionCdc": {
                                "type": "integer",
                                "description": "Redemption CDC",
                                "format": "int32"
                            },
                            "terminalId": {
                                "type": "integer",
                                "description": "Terminal Id",
                                "format": "int32"
                            },
                            "retailerId": {
                                "type": "integer",
                                "description": "Retailer Id",
                                "format": "int32"
                            }
                        }
                    }
                ],
                "description": "Voucher Merchandise details"
            },
            "VoucherErrorDTO": {
                "type": "object",
                "properties": {
                    "errorCode": {
                        "type": "integer",
                        "description": "Error Code",
                        "format": "int32"
                    },
                    "errorMessage": {
                        "type": "string",
                        "description": "Error Message"
                    }
                },
                "description": "Represents Voucher Error"
            },
            "VoucherExternalIdDTO": {
                "type": "object",
                "properties": {
                    "voucherId": {
                        "type": "integer",
                        "description": "Voucher Id",
                        "format": "int64"
                    },
                    "externalIdType": {
                        "type": "string",
                        "description": "External Id Type"
                    },
                    "externalId": {
                        "type": "string",
                        "description": "External Id"
                    }
                },
                "description": "Represents External Voucher Id"
            },
            "PackageDTO": {
                "required": [
                    "cartId",
                    "description",
                    "endDate",
                    "packagePrice"
                ],
                "type": "object",
                "properties": {
                    "packageId": {
                        "type": "string",
                        "description": "Package id"
                    },
                    "description": {
                        "type": "string",
                        "description": "Package description",
                        "example": "Mega-Power"
                    },
                    "endDate": {
                        "type": "integer",
                        "description": "Until when the package is available",
                        "format": "int64",
                        "example": 1614470400000
                    },
                    "cartId": {
                        "type": "string",
                        "description": "Id of cart",
                        "example": "packagePlay-3"
                    },
                    "status": {
                        "enum": [
                            "CREATED",
                            "ACTIVE",
                            "CLOSED"
                        ],
                        "type": "string",
                        "description": "Status of the package",
                        "example": "ACTIVE"
                    },
                    "packagePrice": {
                        "type": "integer",
                        "description": "Price of the package",
                        "format": "int64"
                    }
                },
                "description": "Object representing package for Package Play"
            },
            "PackagePageDTO": {
                "required": [
                    "packages"
                ],
                "type": "object",
                "properties": {
                    "nextPageUrl": {
                        "type": "string",
                        "description": "URL indicating where the next page can be found"
                    },
                    "previousPageUrl": {
                        "type": "string",
                        "description": "URL indicating where the previous page can be found"
                    },
                    "pageUrls": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string",
                            "description": "Map of pages URLs accessed by the page number (to jump to selected page)"
                        },
                        "description": "Map of pages URLs accessed by the page number (to jump to selected page)"
                    },
                    "nextItems": {
                        "type": "integer",
                        "description": "Amount of items in the next pages",
                        "format": "int32"
                    },
                    "previousItems": {
                        "type": "integer",
                        "description": "Amount of items in the previous pages",
                        "format": "int32"
                    },
                    "packages": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PackageDTO"
                        },
                        "description": "List of packages"
                    }
                },
                "description": "Object representing pagination for PackageDTO"
            },
            "PromotionCodesDTO": {
                "type": "object",
                "properties": {
                    "appliedPromoCodes": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "description": "List of codes that has been applied successfully"
                        },
                        "description": "List of codes that has been applied successfully"
                    },
                    "invalidPromoCodes": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "description": "List of codes that has been rejected"
                        },
                        "description": "List of codes that has been rejected"
                    },
                    "overflowPromoCodes": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "description": "List of codes that were already applied"
                        },
                        "description": "List of codes that were already applied"
                    }
                },
                "description": "Object represents output of applying list of promo-codes operation"
            },
            "GeneratedGamesDTO": {
                "required": [
                    "price",
                    "wagerTemplates"
                ],
                "type": "object",
                "properties": {
                    "price": {
                        "minimum": 0,
                        "exclusiveMinimum": true,
                        "type": "integer",
                        "description": "Price of all wagers in the set (in cents). Note: it might differ from requested price as sometimes it is not possible to match requested price.",
                        "format": "int64",
                        "example": 1000
                    },
                    "wagerTemplates": {
                        "minimum": 1,
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/WagerTemplateDTO"
                        },
                        "description": "Wager templates"
                    }
                },
                "description": "List of generated wager templates with price"
            },
            "WagerTemplateDTO": {
                "minimum": 1,
                "required": [
                    "gameName",
                    "numberOfBoards"
                ],
                "type": "object",
                "properties": {
                    "gameName": {
                        "type": "string",
                        "description": "Game name",
                        "example": "Lotto"
                    },
                    "betType": {
                        "type": "string",
                        "description": "Type of the bet, could be null for some games",
                        "example": "Bck2"
                    },
                    "drawName": {
                        "type": "string",
                        "description": "Draw name, could be null for some games",
                        "example": "EVENING"
                    },
                    "multiplier": {
                        "type": "boolean",
                        "description": "If the board will be played with multiplier, null means false",
                        "example": false
                    },
                    "numberOfBoards": {
                        "minimum": 1,
                        "type": "integer",
                        "description": "Number of boards",
                        "format": "int32",
                        "example": 3
                    },
                    "addonWagerTemplates": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/WagerTemplateDTO"
                        },
                        "description": "Addon wagers, if any"
                    }
                },
                "description": "Wager template"
            },
            "GamesGenerationRequestDTO": {
                "required": [
                    "maxNumberOfWagers",
                    "price"
                ],
                "type": "object",
                "properties": {
                    "price": {
                        "minimum": 0,
                        "exclusiveMinimum": true,
                        "type": "integer",
                        "description": "Requested wagers set price (in cents)",
                        "format": "int64",
                        "example": 1000
                    },
                    "maxNumberOfWagers": {
                        "minimum": 1,
                        "type": "integer",
                        "description": "Specifies how many wagers should be generated",
                        "format": "int32",
                        "example": 10
                    }
                },
                "description": "Games generation request"
            },
            "DrawGamesWinnersDTO": {
                "required": [
                    "wagerPurchaseChannel"
                ],
                "type": "object",
                "properties": {
                    "gameName": {
                        "type": "string",
                        "description": "Game name",
                        "example": "Lotto"
                    },
                    "drawInfo": {
                        "$ref": "#/components/schemas/DrawInfoDTO"
                    },
                    "winInfo": {
                        "$ref": "#/components/schemas/WinInfoDTO"
                    },
                    "wagerPurchaseChannel": {
                        "enum": [
                            "INTERACTIVE",
                            "RETAILER",
                            "INTERACTIVE_MOBILE",
                            "INTERACTIVE_PORTAL"
                        ],
                        "type": "string",
                        "description": "Supported baseline purchase channels",
                        "example": "INTERACTIVE"
                    },
                    "playerInformation": {
                        "type": "string",
                        "description": "Player information that will be publicly displayed, if available",
                        "example": "Zaphod B."
                    },
                    "purchaseLocation": {
                        "type": "string",
                        "description": "Wager purchase location, if available",
                        "example": "ATLANTA"
                    }
                },
                "description": "Winner information"
            },
            "DrawGamesWinnersPageDTO": {
                "type": "object",
                "properties": {
                    "totalCount": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "pageSize": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "pageNumber": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "winners": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DrawGamesWinnersDTO"
                        }
                    }
                },
                "description": "Paged list of winners"
            },
            "DrawInfoDTO": {
                "required": [
                    "drawDate",
                    "drawId"
                ],
                "type": "object",
                "properties": {
                    "drawId": {
                        "type": "integer",
                        "description": "Draw number",
                        "format": "int64",
                        "example": 25
                    },
                    "drawDate": {
                        "type": "integer",
                        "description": "Draw date as UTC timestamp",
                        "format": "int64",
                        "example": 1599575602000
                    }
                },
                "description": "Needed draw information"
            },
            "WinInfoDTO": {
                "required": [
                    "winAmount",
                    "winTier",
                    "winType"
                ],
                "type": "object",
                "properties": {
                    "winType": {
                        "enum": [
                            "CASH",
                            "FREEPLAY",
                            "MERCHANDISE"
                        ],
                        "type": "string",
                        "description": "Possible wager prize types",
                        "example": "CASH"
                    },
                    "winTier": {
                        "enum": [
                            "HIGH_TIER",
                            "LOW_TIER",
                            "MID_TIER"
                        ],
                        "type": "string",
                        "description": "Possible prize tiers",
                        "example": "LOW_TIER"
                    },
                    "winAmount": {
                        "type": "integer",
                        "description": "Won amount in cents",
                        "format": "int64",
                        "example": 20000
                    },
                    "winAmountCurrency": {
                        "type": "string",
                        "description": "Won amount currency ISO 4217 Code",
                        "example": "USD"
                    }
                },
                "description": "Information about won prize"
            },
            "WinningRaffleDTO": {
                "required": [
                    "code",
                    "divisionLevel",
                    "drawDate",
                    "drawNumber",
                    "prize",
                    "shares"
                ],
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "Winning raffle code",
                        "example": "BBBB00026"
                    },
                    "divisionLevel": {
                        "type": "integer",
                        "description": "Division in which this raffle code has won",
                        "format": "int32",
                        "example": 2
                    },
                    "shares": {
                        "type": "integer",
                        "description": "Share count for winning raffle",
                        "format": "int32",
                        "example": 2
                    },
                    "prize": {
                        "type": "integer",
                        "description": "Win prize in cents",
                        "format": "int64",
                        "example": 20000
                    },
                    "drawNumber": {
                        "type": "string",
                        "description": "Draw number in which this raffle was participating",
                        "example": "11"
                    },
                    "drawDate": {
                        "type": "integer",
                        "description": "Draw date as UTC timestamp",
                        "format": "int64",
                        "example": 1599575602000
                    }
                },
                "description": "Winning raffle data"
            },
            "CheckWinningRaffleRequestDTO": {
                "required": [
                    "exactRaffleCode",
                    "gameName"
                ],
                "type": "object",
                "properties": {
                    "exactRaffleCode": {
                        "type": "string",
                        "description": "Raffle code",
                        "example": "BBBB00026"
                    },
                    "externalCode": {
                        "type": "string",
                        "description": "Leading String part of raffle code",
                        "example": "BBBB"
                    },
                    "startNumber": {
                        "type": "integer",
                        "description": "Start range for checking multiple raffles. Refers to numeric part after leading String part of raffle code",
                        "format": "int32",
                        "example": 26
                    },
                    "lastNumber": {
                        "type": "integer",
                        "description": "End range for checking multiple raffles. Refers to numeric part after leading String part of raffle code",
                        "format": "int32",
                        "example": 41
                    },
                    "drawId": {
                        "type": "integer",
                        "description": "Draw number in which this raffle was participating",
                        "format": "int32",
                        "example": 176
                    },
                    "gameName": {
                        "type": "string",
                        "description": "Game name for checked raffle",
                        "example": "Euro Millions"
                    },
                    "maxDaysFromTodayOffset": {
                        "type": "integer",
                        "description": "Used for checking raffles list withing particular range when player does not know exact draw in which his raffle was participating",
                        "format": "int32",
                        "example": 10
                    }
                },
                "description": "Request object to check whether raffle has won"
            },
            "ClientDTO": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "Client Identifier",
                        "format": "int64",
                        "example": 10
                    },
                    "name": {
                        "type": "string",
                        "description": "Client name",
                        "example": "Portal"
                    }
                },
                "description": "Represents a client"
            },
            "ClientServerResponseDTO": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "boolean",
                        "description": "Response status",
                        "example": true
                    },
                    "responseCode": {
                        "type": "string",
                        "description": "Response code",
                        "example": "0000"
                    },
                    "messages": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/MessageDTO"
                        }
                    },
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ClientDTO"
                        },
                        "description": "List of clients found"
                    }
                },
                "description": "Represents response wrapper"
            },
            "MessageDTO": {
                "type": "object",
                "properties": {
                    "text": {
                        "type": "string",
                        "description": "Message text"
                    },
                    "severity": {
                        "enum": [
                            "success",
                            "info",
                            "warning",
                            "error",
                            "debug"
                        ],
                        "type": "string",
                        "description": "Message severity"
                    }
                },
                "description": "Represents response messages"
            },
            "ErrorServerResponseDTO": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "boolean",
                        "description": "Response status",
                        "example": false
                    },
                    "responseCode": {
                        "type": "string",
                        "description": "Response code",
                        "example": "1003"
                    },
                    "messages": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/MessageDTO"
                        }
                    }
                },
                "description": "Represents response wrapper"
            },
            "CategoryDTO": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "Category Identifier",
                        "format": "int64",
                        "example": 10
                    },
                    "name": {
                        "type": "string",
                        "description": "Category name",
                        "example": "DRAW_GAME_CODE"
                    }
                },
                "description": "Represents game category"
            },
            "interactiveGameDTO": {
                "type": "object",
                "properties": {
                    "operators": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/OperatorDTO"
                        },
                        "description": "List of brand and partner couples the game belongs to"
                    },
                    "gameCode": {
                        "type": "string",
                        "description": "Game code identifier",
                        "example": "INS-tbe"
                    },
                    "id": {
                        "type": "integer",
                        "description": "Game Identifier",
                        "format": "int64",
                        "example": 10
                    },
                    "name": {
                        "type": "string",
                        "description": "Game Name",
                        "example": "Blackjack"
                    },
                    "description": {
                        "type": "string",
                        "description": "Game Description",
                        "example": "A blackjack game"
                    },
                    "provider": {
                        "$ref": "#/components/schemas/ProviderDTO"
                    },
                    "status": {
                        "type": "string",
                        "description": "Game Status",
                        "example": "enabled"
                    },
                    "category": {
                        "$ref": "#/components/schemas/CategoryDTO"
                    },
                    "platform": {
                        "$ref": "#/components/schemas/PlatformDTO"
                    },
                    "costToCover": {
                        "type": "number",
                        "description": "Game Cost To Cover For A FreeSpin",
                        "format": "double",
                        "example": 50
                    },
                    "iconUrl": {
                        "type": "string",
                        "description": "Game icon"
                    }
                },
                "description": "Represents a game"
            },
            "GameServerResponseDTO": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "boolean",
                        "description": "Response status",
                        "example": true
                    },
                    "responseCode": {
                        "type": "string",
                        "description": "Response code",
                        "example": "0000"
                    },
                    "messages": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/MessageDTO"
                        }
                    },
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/interactiveGameDTO"
                        },
                        "description": "List of games found"
                    }
                },
                "description": "Represents response wrapper"
            },
            "OperatorDTO": {
                "type": "object",
                "properties": {
                    "brandId": {
                        "type": "integer",
                        "description": "Site Identifier",
                        "format": "int64",
                        "example": 25
                    },
                    "partnerId": {
                        "type": "integer",
                        "description": "Partner Identifier",
                        "format": "int64",
                        "example": 1
                    }
                },
                "description": "Represents a couple of site and partner"
            },
            "PlatformDTO": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "Platform Identifier",
                        "format": "int64",
                        "example": 10
                    },
                    "code": {
                        "type": "integer",
                        "description": "Platform External Identifier",
                        "format": "int64",
                        "example": 62
                    },
                    "name": {
                        "type": "string",
                        "description": "Platform name",
                        "example": "IGT_CASINO"
                    },
                    "description": {
                        "type": "string",
                        "description": "Platform description",
                        "example": "IGT_CASINO"
                    }
                },
                "description": "Represents game platform"
            },
            "ProviderDTO": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Provider name",
                        "example": "10"
                    }
                },
                "description": "Represents game provider"
            },
            "GameGroupDTO": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "Group Identifier",
                        "format": "int64",
                        "example": 10
                    },
                    "name": {
                        "type": "string",
                        "description": "Group name",
                        "example": "SLOTS"
                    },
                    "description": {
                        "type": "string",
                        "description": "Group description",
                        "example": "Group containing SLOTS games"
                    }
                },
                "description": "Represents a group"
            },
            "GroupServerResponseDTO": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "boolean",
                        "description": "Response status",
                        "example": true
                    },
                    "responseCode": {
                        "type": "string",
                        "description": "Response code",
                        "example": "0000"
                    },
                    "messages": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/MessageDTO"
                        }
                    },
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/GameGroupDTO"
                        },
                        "description": "List of groups found"
                    }
                },
                "description": "Represents response wrapper"
            },
            "GameReplayDTO": {
                "type": "object",
                "properties": {
                    "content": {
                        "type": "string",
                        "description": "Game replay content"
                    },
                    "type": {
                        "type": "string",
                        "description": "Game replay type choosing among 'url' and 'html' ",
                        "example": "url"
                    }
                },
                "description": "Represents game replay response"
            },
            "ClaimPaymentDTO": {
                "type": "object",
                "properties": {
                    "paymentClaimId": {
                        "type": "string",
                        "description": "Unique identifier for the claim payment"
                    },
                    "deductAmount": {
                        "type": "integer",
                        "description": "The total amount deducted by the backoffice operator",
                        "format": "int64"
                    },
                    "claimDate": {
                        "type": "integer",
                        "description": "The date when the prize was claimed by the player or by the operator",
                        "format": "int64"
                    },
                    "winDate": {
                        "type": "integer",
                        "description": "The date when the prize was won",
                        "format": "int64"
                    },
                    "paymentTransactionId": {
                        "type": "string",
                        "description": "The payment transaction identifier relatd to the prize on hold"
                    },
                    "netAmount": {
                        "type": "integer",
                        "description": "The net prize amount",
                        "format": "int64"
                    },
                    "grossAmount": {
                        "type": "integer",
                        "description": "The gross prize amount",
                        "format": "int64"
                    },
                    "taxAmount": {
                        "type": "integer",
                        "description": "The tax amount applied to the prize",
                        "format": "int64"
                    },
                    "currency": {
                        "type": "string",
                        "description": "The currency related to the amounts"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status about the held payment"
                    }
                }
            },
            "ClaimPaymentPageDTO": {
                "type": "object",
                "properties": {
                    "totalItems": {
                        "type": "integer",
                        "description": "The total count of the elements",
                        "format": "int64"
                    },
                    "pageSize": {
                        "type": "integer",
                        "description": "The amount of items per page",
                        "format": "int32"
                    },
                    "page": {
                        "type": "integer",
                        "description": "The page number",
                        "format": "int32"
                    },
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ClaimPaymentDTO"
                        },
                        "description": "The payment items"
                    }
                }
            },
            "ClaimPaymentHistoryDTO": {
                "type": "object",
                "properties": {
                    "operationDate": {
                        "type": "integer",
                        "description": "Operation's execution date",
                        "format": "int64"
                    },
                    "operationType": {
                        "enum": [
                            "CREATION",
                            "ACCOUNT_UPGRADE_NEEDED",
                            "CLAIM_PROCESS_NEEDED",
                            "HIGH_WIN_PROCESS_NEEDED",
                            "APPROVAL",
                            "VOIDING",
                            "MANUALLY_PAYMENT",
                            "DEDUCT_AMOUNT",
                            "TAKEN_IN_CHARGE",
                            "RELEASE_CHARGE",
                            "CLAIM_REQUESTED",
                            "ACCOUNT_UPGRADED",
                            "CLAIMING_SENT_TO_CAP",
                            "CAP_SUCCESS_RESPONSE_PROCESSED",
                            "CLAIMING_PRIZE_PAID",
                            "CAP_ERROR_RESPONSE_PROCESSED"
                        ],
                        "type": "string",
                        "description": "Operation Type"
                    },
                    "operationOwnerType": {
                        "enum": [
                            "PLAYER",
                            "GAME_PLATFORM",
                            "SYSTEM",
                            "BO_OPERATOR"
                        ],
                        "type": "string",
                        "description": "Operation owner Type"
                    },
                    "operationAmount": {
                        "type": "integer",
                        "description": "Operation amount. It is set only for some operationType. E.g. DEDUCT_AMOUNT",
                        "format": "int64"
                    },
                    "operationOwner": {
                        "type": "string",
                        "description": "The owner that executed the operation"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Comment or reason for the operation"
                    }
                },
                "description": "The history items"
            },
            "ClaimPaymentHistoryPageDTO": {
                "type": "object",
                "properties": {
                    "totalItems": {
                        "type": "integer",
                        "description": "The total count of the elements",
                        "format": "int64"
                    },
                    "pageSize": {
                        "type": "integer",
                        "description": "The amount of items per page",
                        "format": "int32"
                    },
                    "page": {
                        "type": "integer",
                        "description": "The page number",
                        "format": "int32"
                    },
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ClaimPaymentHistoryDTO"
                        },
                        "description": "The history items"
                    }
                }
            },
            "RoundDTO": {
                "type": "object",
                "properties": {
                    "roundId": {
                        "type": "string",
                        "description": "Round identifier"
                    },
                    "startDate": {
                        "type": "integer",
                        "description": "Date of first transaction of the round, milliseconds from 01-01-1970",
                        "format": "int64"
                    },
                    "purchaseAmount": {
                        "type": "integer",
                        "description": "Total spent amount of the round",
                        "format": "int64"
                    },
                    "purchaseLoyaltyPoint": {
                        "type": "integer",
                        "description": "Total spent loyalty points of the round",
                        "format": "int64"
                    },
                    "winAmount": {
                        "type": "integer",
                        "description": "Total win amount of the round",
                        "format": "int64"
                    },
                    "earnedLoyaltyPoint": {
                        "type": "integer",
                        "description": "Total earned loyalty points of the round",
                        "format": "int64"
                    },
                    "refundedAmount": {
                        "type": "integer",
                        "description": "Total refunded amount of the round",
                        "format": "int64"
                    },
                    "refundedLoyaltyPoint": {
                        "type": "integer",
                        "description": "Total refunded loyalty points of the round",
                        "format": "int64"
                    },
                    "claimingPrize": {
                        "type": "integer",
                        "description": "Total claiming prize amount",
                        "format": "int64"
                    },
                    "subscriptionId": {
                        "type": "string",
                        "description": "The subscription identifier if the wager is referring to a subscription"
                    },
                    "currency": {
                        "type": "string",
                        "description": "Currency related to the amount"
                    },
                    "platformId": {
                        "type": "integer",
                        "description": "Game platform identifier",
                        "format": "int64"
                    },
                    "platformName": {
                        "type": "string",
                        "description": "Game platform description"
                    },
                    "gameId": {
                        "type": "string",
                        "description": "Game Admin unique identifier for the game"
                    },
                    "gameCode": {
                        "type": "string",
                        "description": "Game provider's game identifier"
                    },
                    "gameName": {
                        "type": "string",
                        "description": "Game description"
                    },
                    "gameSessionId": {
                        "type": "string",
                        "description": "Game session identifier"
                    }
                }
            },
            "RoundPageDTO": {
                "type": "object",
                "properties": {
                    "totalItems": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "pageSize": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "page": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "rounds": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RoundDTO"
                        }
                    }
                }
            },
            "RealityCheckDTO": {
                "type": "object",
                "properties": {
                    "totalSpentAmount": {
                        "type": "integer",
                        "description": "Total spent amount related to the session",
                        "format": "int64"
                    },
                    "totalPaymentAmount": {
                        "type": "integer",
                        "description": "Total payment amount related to the session",
                        "format": "int64"
                    },
                    "duration": {
                        "type": "integer",
                        "description": "Duration of the session in milliseconds",
                        "format": "int64"
                    }
                }
            },
            "GameStatisticDTO": {
                "type": "object",
                "properties": {
                    "currency": {
                        "type": "string",
                        "description": "Currency of the statistics value"
                    },
                    "lastPlayedDate": {
                        "type": "integer",
                        "description": "Date of the last played hand",
                        "format": "int64"
                    },
                    "lastMonetaryPlayedDate": {
                        "type": "integer",
                        "description": "Date of the last monetary played hand, spending wallet money",
                        "format": "int64"
                    },
                    "totalPlayedGames": {
                        "type": "integer",
                        "description": "Total number of different played games",
                        "format": "int64"
                    },
                    "totalAmountWon": {
                        "type": "integer",
                        "description": "Total amount won including all the type of amount",
                        "format": "int64"
                    },
                    "totalEarnedLoyaltyPoint": {
                        "type": "integer",
                        "description": "Total earned loyalty points",
                        "format": "int64"
                    },
                    "totalBonusBagAmountWon": {
                        "type": "integer",
                        "description": "Total Bonus Bag amount won",
                        "format": "int64"
                    },
                    "totalRealMoneyAmountWon": {
                        "type": "integer",
                        "description": "Total withdrawable amount won",
                        "format": "int64"
                    },
                    "totalNetRealMoneyAmountWon": {
                        "type": "integer",
                        "description": "Total withdrawable net amount won. Tax deducted",
                        "format": "int64"
                    },
                    "totalTournamentTicketAmountWon": {
                        "type": "integer",
                        "description": "Total tournament ticket amount won",
                        "format": "int64"
                    },
                    "totalAmountSpent": {
                        "type": "integer",
                        "description": "Total amount spent including all the type of amount",
                        "format": "int64"
                    },
                    "totalBonusBagAmountSpent": {
                        "type": "integer",
                        "description": "Total Bonus Bag amount spent",
                        "format": "int64"
                    },
                    "totalBonusCashAmountSpent": {
                        "type": "integer",
                        "description": "Total Bonus Cash amount spent",
                        "format": "int64"
                    },
                    "totalSpentLoyaltyPoint": {
                        "type": "integer",
                        "description": "Total Loyalty points spent",
                        "format": "int64"
                    },
                    "totalTournamentTicketSpent": {
                        "type": "integer",
                        "description": "Total tournament ticket amount spent",
                        "format": "int64"
                    },
                    "totalRealMoneyAmountSpent": {
                        "type": "integer",
                        "description": "Total withdrawable amount won",
                        "format": "int64"
                    },
                    "grossGamingAmount": {
                        "type": "integer",
                        "description": "Total generated gross gaming amount. Calculated on withdrawable money only.",
                        "format": "int64"
                    },
                    "grossRevenueAmount": {
                        "type": "integer",
                        "description": "Total generated gross gaming revenue amount. Calculated on withdrawable money only.",
                        "format": "int64"
                    },
                    "totalShadowBalance": {
                        "type": "integer",
                        "description": "Total shadow balance",
                        "format": "int64"
                    },
                    "platformId": {
                        "type": "integer",
                        "description": "Platform identifier",
                        "format": "int64"
                    },
                    "platformName": {
                        "type": "string",
                        "description": "Platform name"
                    },
                    "platformDescription": {
                        "type": "string",
                        "description": "Platform description"
                    }
                }
            },
            "GameSessionDTO": {
                "type": "object",
                "properties": {
                    "gameSessionId": {
                        "type": "string",
                        "description": "Game session identifier"
                    },
                    "platformId": {
                        "type": "integer",
                        "description": "Game platform identifier",
                        "format": "int64"
                    },
                    "platformName": {
                        "type": "string",
                        "description": "Game platform description"
                    },
                    "gameId": {
                        "type": "string",
                        "description": "Game Admin unique identifier for the game"
                    },
                    "gameName": {
                        "type": "string",
                        "description": "Game description"
                    },
                    "totalPurchaseAmount": {
                        "type": "integer",
                        "description": "Total wagered amount into the game session. It includes all the possible currency (Bonus cash, bnous bag, real money, etc...)",
                        "format": "int64"
                    },
                    "totalPurchaseLoyaltyPoint": {
                        "type": "integer",
                        "description": "Total spent loyalty points into the game session",
                        "format": "int64"
                    },
                    "totalWinningAmount": {
                        "type": "integer",
                        "description": "Total winning gross amount into the game session. It includes all the possible currency (Bonus cash, bnous bag, real money, etc...)",
                        "format": "int64"
                    },
                    "totalRefundAmount": {
                        "type": "integer",
                        "description": "Total refund amount into the game session. It includes all the possible currency (Bonus cash, bnous bag, real money, etc...)",
                        "format": "int64"
                    },
                    "totalEarnedLoyaltyPoint": {
                        "type": "integer",
                        "description": "Total earned loyalty points into the game session. It includes the loyalty points sent by the game platform",
                        "format": "int64"
                    },
                    "gameSessionStartDate": {
                        "type": "integer",
                        "description": "Game session start date, milliseconds from 01-01-1970",
                        "format": "int64"
                    },
                    "gameSessionEndDate": {
                        "type": "integer",
                        "description": "Game session end date, milliseconds from 01-01-1970",
                        "format": "int64"
                    },
                    "currency": {
                        "type": "string",
                        "description": "Currency related to the amount"
                    },
                    "subscriptionId": {
                        "type": "string",
                        "description": "The subscription identifier if the wager is referring to a subscription"
                    },
                    "lastWagerDate": {
                        "type": "integer",
                        "description": "Identifies the last wager date executed in the game session",
                        "format": "int64"
                    },
                    "lastWinningDate": {
                        "type": "integer",
                        "description": "Identifies the last winning date executed in the game session",
                        "format": "int64"
                    },
                    "totalClaimingPrize": {
                        "type": "integer",
                        "description": "Total claiming prize amount",
                        "format": "int64"
                    },
                    "gameCode": {
                        "type": "string",
                        "description": "Game provider's game identifier"
                    }
                },
                "description": "Contains the game session detail"
            },
            "GameSessionRoundDetailPageDTO": {
                "type": "object",
                "properties": {
                    "totalItems": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "pageSize": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "page": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "rounds": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RoundDetailDTO"
                        }
                    },
                    "gameSessionDto": {
                        "$ref": "#/components/schemas/GameSessionDTO"
                    }
                }
            },
            "PaymentDetailDTO": {
                "type": "object",
                "properties": {
                    "amountType": {
                        "enum": [
                            "REAL_MONEY",
                            "CREDITS",
                            "OFFLINE_PRIZE",
                            "FPP",
                            "FREE_TICKET",
                            "BONUS_BAG",
                            "LOYALTY_POINT",
                            "WALLET_BONUS",
                            "EXTERNAL_FREE_TICKET",
                            "VOUCHER"
                        ],
                        "type": "string",
                        "description": "Amount Type"
                    },
                    "refund": {
                        "type": "boolean",
                        "description": "Identifies if was managed as refund amount or not"
                    },
                    "externalTransactionId": {
                        "type": "string",
                        "description": "External game platform transaction id"
                    },
                    "grossAmount": {
                        "type": "integer",
                        "description": "Payment gross amount",
                        "format": "int64"
                    },
                    "jackpotAmount": {
                        "type": "integer",
                        "description": "Jackpot amount",
                        "format": "int64"
                    },
                    "netAmount": {
                        "type": "integer",
                        "description": "Payment net amount",
                        "format": "int64"
                    },
                    "walletReserveId": {
                        "type": "string",
                        "description": "Identifier provided by the wallet into the reserve payment response"
                    },
                    "walletConfirmId": {
                        "type": "string",
                        "description": "Identifier provided by the wallet into the confirm payment response"
                    },
                    "reserveDate": {
                        "type": "integer",
                        "description": "Date of payment reservation, milliseconds from 01-01-1970",
                        "format": "int64"
                    },
                    "confirmDate": {
                        "type": "integer",
                        "description": "Date of payment confirmation, milliseconds from 01-01-1970",
                        "format": "int64"
                    },
                    "paymentStatus": {
                        "type": "string",
                        "description": "Payment status"
                    },
                    "taxAmount": {
                        "type": "integer",
                        "description": "Tax amount applied to the gross amount",
                        "format": "int64"
                    },
                    "taxableAmount": {
                        "type": "integer",
                        "description": "Part of the gross amount which the taxes are applied",
                        "format": "int64"
                    },
                    "onHoldId": {
                        "type": "integer",
                        "description": "On hold identier for managing the pament on hold. It is set only if the paymentStatus is ON_HOLD",
                        "format": "int64"
                    }
                },
                "description": "Payment details. It is populated only if type=PAYMENT . Null otherwise"
            },
            "PurchaseDetailDTO": {
                "type": "object",
                "properties": {
                    "amountType": {
                        "enum": [
                            "REAL_MONEY",
                            "CREDITS",
                            "OFFLINE_PRIZE",
                            "FPP",
                            "FREE_TICKET",
                            "BONUS_BAG",
                            "LOYALTY_POINT",
                            "WALLET_BONUS",
                            "EXTERNAL_FREE_TICKET",
                            "VOUCHER"
                        ],
                        "type": "string",
                        "description": "Amount Type"
                    },
                    "externalTransactionId": {
                        "type": "string",
                        "description": "External game platform transaction id"
                    },
                    "amount": {
                        "type": "integer",
                        "description": "Purchase amount",
                        "format": "int64"
                    },
                    "bonusAmount": {
                        "type": "integer",
                        "description": "Purchase bonus amount. It courd be greater than zero only for amountType REAL_MONEY",
                        "format": "int64"
                    },
                    "walletReserveId": {
                        "type": "string",
                        "description": "Identifier provided by the wallet into the reserve payment response"
                    },
                    "walletConfirmId": {
                        "type": "string",
                        "description": "Identifier provided by the wallet into the confirm payment response"
                    },
                    "reserveDate": {
                        "type": "integer",
                        "description": "Date of payment reservation, milliseconds from 01-01-1970",
                        "format": "int64"
                    },
                    "confirmDate": {
                        "type": "integer",
                        "description": "Date of payment confirmation, milliseconds from 01-01-1970",
                        "format": "int64"
                    },
                    "purchaseStatus": {
                        "type": "string",
                        "description": "Purchase status"
                    }
                },
                "description": "Purchase details. It is populated only if type=PURCHASE . Null otherwise"
            },
            "RoundDetailDTO": {
                "type": "object",
                "properties": {
                    "transactions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TransactionDetailDTO"
                        },
                        "description": "List of tranasactions executed into the round ordered by executionDate asc"
                    },
                    "roundId": {
                        "type": "string",
                        "description": "Round identifier"
                    },
                    "startDate": {
                        "type": "integer",
                        "description": "Date of first transaction of the round, milliseconds from 01-01-1970",
                        "format": "int64"
                    },
                    "purchaseAmount": {
                        "type": "integer",
                        "description": "Total spent amount of the round",
                        "format": "int64"
                    },
                    "purchaseLoyPoint": {
                        "type": "integer",
                        "description": "Total spent loyalty points of the round",
                        "format": "int64"
                    },
                    "paymentGrossAmount": {
                        "type": "integer",
                        "description": "Total win gross amount of the round",
                        "format": "int64"
                    },
                    "paymentNetAmount": {
                        "type": "integer",
                        "description": "Total win net amount of the round",
                        "format": "int64"
                    },
                    "refundedAmount": {
                        "type": "integer",
                        "description": "Total refunded amount of the round",
                        "format": "int64"
                    },
                    "earnedLoyPoint": {
                        "type": "integer",
                        "description": "Total earned loyalty points of the round",
                        "format": "int64"
                    },
                    "refundedLoyPoint": {
                        "type": "integer",
                        "description": "Total refunded loyalty points of the round",
                        "format": "int64"
                    },
                    "jackpotAmount": {
                        "type": "integer",
                        "description": "Total jackpot amount of the round",
                        "format": "int64"
                    },
                    "taxableAmount": {
                        "type": "integer",
                        "description": "Total taxable amount of the round",
                        "format": "int64"
                    },
                    "taxAmount": {
                        "type": "integer",
                        "description": "Total tax amount of the round",
                        "format": "int64"
                    },
                    "status": {
                        "type": "string",
                        "description": "Round status"
                    }
                }
            },
            "TransactionDetailDTO": {
                "type": "object",
                "properties": {
                    "type": {
                        "enum": [
                            "PAYMENT",
                            "PURCHASE"
                        ],
                        "type": "string",
                        "description": "PAYMENT if the transaction is related to payment transaction. PURCHASE if the transaction is related to purchase transaction"
                    },
                    "purchaseDetail": {
                        "$ref": "#/components/schemas/PurchaseDetailDTO"
                    },
                    "paymentDetail": {
                        "$ref": "#/components/schemas/PaymentDetailDTO"
                    },
                    "executionDate": {
                        "type": "integer",
                        "description": "Execution date generated by IGT Command at the time the request is processed",
                        "format": "int64"
                    }
                },
                "description": "List of tranasactions executed into the round ordered by executionDate asc"
            },
            "GameSessionPageDTO": {
                "type": "object",
                "properties": {
                    "totalItems": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "pageSize": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "page": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "gameSessions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/GameSessionDTO"
                        }
                    }
                }
            },
            "GameSessionRoundDetailDTO": {
                "type": "object",
                "properties": {
                    "roundDetail": {
                        "$ref": "#/components/schemas/RoundDetailDTO"
                    },
                    "gameSessionDto": {
                        "$ref": "#/components/schemas/GameSessionDTO"
                    }
                }
            },
            "RecentWinnersDTO": {
                "type": "object",
                "properties": {
                    "platformId": {
                        "type": "integer",
                        "description": "Game platform identifier",
                        "format": "int64"
                    },
                    "platformName": {
                        "type": "string",
                        "description": "Game platform description"
                    },
                    "gameId": {
                        "type": "integer",
                        "description": "Game identifier",
                        "format": "int64"
                    },
                    "gameCode": {
                        "type": "string",
                        "description": "Game code"
                    },
                    "gameName": {
                        "type": "string",
                        "description": "Game description"
                    },
                    "winningAmount": {
                        "type": "integer",
                        "description": "The amount (in cents) of the winning",
                        "format": "int64"
                    },
                    "winningDate": {
                        "type": "integer",
                        "description": "Date of the winning transaction",
                        "format": "int64"
                    },
                    "currency": {
                        "type": "string",
                        "description": "Currency related to the amount"
                    },
                    "nickName": {
                        "type": "string",
                        "description": "Nickname of player who won"
                    }
                }
            },
            "RecentWinnersPageDTO": {
                "type": "object",
                "properties": {
                    "totalCount": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "pageSize": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "pageNumber": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "winners": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RecentWinnersDTO"
                        }
                    }
                }
            },
            "InvitationDTO": {
                "required": [
                    "emailAddresses",
                    "groupId"
                ],
                "type": "object",
                "properties": {
                    "groupId": {
                        "type": "string",
                        "description": "Unique ID for the group",
                        "example": "9740-1"
                    },
                    "invitationMessage": {
                        "$ref": "#/components/schemas/InvitationMessageDTO"
                    },
                    "emailAddresses": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "description": "Email addresses of group invitees"
                        },
                        "description": "Email addresses of group invitees"
                    }
                },
                "description": "Group invitation object"
            },
            "InvitationMessageDTO": {
                "type": "object",
                "properties": {
                    "messageText": {
                        "type": "string",
                        "description": "Invitation Message Text",
                        "example": "Group leader has invited you to play Powerball."
                    }
                },
                "description": "Group invitation message object"
            },
            "GroupMemberDTO": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Unique ID for the player assigned by the system",
                        "example": "7083"
                    },
                    "name": {
                        "type": "string",
                        "description": "Member nickname assigned at group acceptance",
                        "example": "My group nickname"
                    },
                    "hasAccepted": {
                        "type": "boolean",
                        "description": "Accepted group membership"
                    },
                    "hasDeclined": {
                        "type": "boolean",
                        "description": "Declined group membership"
                    },
                    "termsAndConditionsId": {
                        "type": "string",
                        "description": "Terms and conditions associated with acceptance",
                        "example": "2"
                    },
                    "acceptedTermsAndConditionsDate": {
                        "type": "integer",
                        "description": "Date player accepted terms and conditions in milliseconds since epoch",
                        "format": "int64",
                        "example": 1583579856511
                    },
                    "avatarId": {
                        "type": "string",
                        "description": "Member photo Id (canned list)",
                        "example": "/images/groupplay/covers/my-avatar-007.jpg"
                    },
                    "invited": {
                        "type": "boolean",
                        "description": "Member was invited to the group"
                    }
                },
                "description": "Group member object"
            },
            "GroupDTO": {
                "required": [
                    "deadlineToJoin",
                    "maxMembers",
                    "minMembers",
                    "name",
                    "type"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Unique ID for the group assigned by the system",
                        "example": "321"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the group",
                        "example": "My group"
                    },
                    "leaderId": {
                        "type": "string",
                        "description": "Group Member id of group leader assigned by the system",
                        "example": "2"
                    },
                    "activity": {
                        "type": "string",
                        "description": "Group activity of group leader",
                        "example": "Powerball"
                    },
                    "type": {
                        "enum": [
                            "PUBLIC",
                            "PRIVATE",
                            "MULTI_LEVEL"
                        ],
                        "type": "string",
                        "description": "Group classifier"
                    },
                    "available": {
                        "type": "boolean",
                        "description": "Group accepting new members"
                    },
                    "drawSyndicate": {
                        "$ref": "#/components/schemas/interactiveSyndicateDTO"
                    },
                    "creationDate": {
                        "type": "integer",
                        "description": "Groups creation date",
                        "format": "int64",
                        "example": 1582589462505
                    },
                    "deadlineToJoin": {
                        "type": "integer",
                        "description": "The date group becomes unavailable to new members constraint",
                        "format": "int64",
                        "example": 1584230399000
                    },
                    "minMembers": {
                        "type": "integer",
                        "description": "The minimum number of members constraint",
                        "format": "int32",
                        "example": 2
                    },
                    "maxMembers": {
                        "type": "integer",
                        "description": "The maximum number of members constraint",
                        "format": "int32",
                        "example": 10
                    },
                    "members": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/GroupMemberDTO"
                        },
                        "description": " Group members"
                    },
                    "location": {
                        "$ref": "#/components/schemas/GroupLocationDTO"
                    },
                    "avatarId": {
                        "type": "string",
                        "description": "Group Image(canned list)",
                        "example": "/images/groupplay/avatars/group-avatar-23.jpg"
                    },
                    "coverPhotoId": {
                        "type": "string",
                        "description": "Group cover photo (canned list)",
                        "example": "/images/groupplay/covers/group-cover-25.jpg"
                    }
                },
                "description": "Group object"
            },
            "GroupLocationDTO": {
                "type": "object",
                "properties": {
                    "zipCode": {
                        "type": "string",
                        "description": "Zip code of group assigned by the system from leaders address",
                        "example": "85284"
                    },
                    "city": {
                        "type": "string",
                        "description": "City of group assigned by the system from leaders address",
                        "example": "Warsaw"
                    }
                },
                "description": "Group location object - based on configuration either ZIP code or city is stored"
            },
            "interactiveSyndicateDTO": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "type": {
                        "enum": [
                            "TRADITIONAL",
                            "GROUP_PLAY"
                        ],
                        "type": "string"
                    },
                    "instanceId": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "averageLifeTime": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "unsoldParts": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "totalParts": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "partsPerWager": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "wager": {
                        "$ref": "#/components/schemas/interactiveWagerDTO"
                    },
                    "groupWagers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/interactiveWagerDTO"
                        }
                    },
                    "totalWins": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "totalWinningAmount": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "totalPartsAllowed": {
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                }
            },
            "GroupPageDTO": {
                "required": [
                    "nextItems",
                    "nextPageUrl",
                    "pageUrls",
                    "previousItems",
                    "previousPageUrl"
                ],
                "type": "object",
                "properties": {
                    "nextPageUrl": {
                        "type": "string",
                        "description": "URL indicating where the next page can be found"
                    },
                    "previousPageUrl": {
                        "type": "string",
                        "description": "URL indicating where the previous page can be found"
                    },
                    "pageUrls": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string",
                            "description": "Map of pages URLs accessed by the page number (to jump to selected page)"
                        },
                        "description": "Map of pages URLs accessed by the page number (to jump to selected page)"
                    },
                    "nextItems": {
                        "type": "integer",
                        "description": "Amount of items in the next pages",
                        "format": "int32"
                    },
                    "previousItems": {
                        "type": "integer",
                        "description": "Amount of items in the previous pages",
                        "format": "int32"
                    },
                    "groups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/GroupDTO"
                        },
                        "description": "List of groups"
                    }
                },
                "description": "Pageable group list"
            },
            "AccountDTO": {
                "required": [
                    "type"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Account Identifier",
                        "example": "468"
                    },
                    "status": {
                        "enum": [
                            "PRE_ACTIVE",
                            "ACTIVE",
                            "SUSPENDED",
                            "CLOSED"
                        ],
                        "type": "string",
                        "description": "Account status"
                    },
                    "balances": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/components/schemas/BalanceDTO"
                        },
                        "description": "Map of player's balances, might represent both real and bonus money plus loyalty points"
                    },
                    "type": {
                        "enum": [
                            "FINANCIAL",
                            "NON_FINANCIAL"
                        ],
                        "type": "string",
                        "description": "User's account type"
                    }
                },
                "description": "Player's account object"
            },
            "BalanceDTO": {
                "type": "object",
                "properties": {
                    "type": {
                        "enum": [
                            "WALLET",
                            "POINT",
                            "WINNING_POCKET",
                            "GAMING_POCKET",
                            "BONUS_POCKET"
                        ],
                        "type": "string",
                        "description": "Type of the balance element"
                    },
                    "balance": {
                        "type": "integer",
                        "description": "Amount residing on the balance, might represent different values like cents in terms of real money (in cents)or points",
                        "format": "int64",
                        "example": 100
                    },
                    "frozenBalance": {
                        "type": "integer",
                        "description": "Amount of the balance that is reserved for pending operations (in cents)",
                        "format": "int64",
                        "example": 50
                    },
                    "currency": {
                        "type": "string",
                        "description": "Currency of the balance",
                        "example": "USD"
                    }
                },
                "description": "Balance object"
            },
            "FinancialTransactionDTO": {
                "required": [
                    "amount",
                    "externalId",
                    "parentId",
                    "transactionDate",
                    "type"
                ],
                "type": "object",
                "properties": {
                    "parentId": {
                        "type": "string",
                        "description": "The id of the parent transaction this transaction is a member of.",
                        "example": "60acdb89-cb01-4341-aa10-fe58c62ecb74"
                    },
                    "externalId": {
                        "type": "string",
                        "description": "Unique transaction identifier that is a reference to other systems",
                        "example": "c749b490-5e82-4333-899c-84f0eebc8120"
                    },
                    "amount": {
                        "type": "integer",
                        "description": "Transaction amount (in cents or points), in case of debits it's negative",
                        "format": "int64",
                        "example": -600
                    },
                    "type": {
                        "type": "string",
                        "description": "Transaction type",
                        "example": "Interactive draw games debit confirmation"
                    },
                    "currency": {
                        "type": "string",
                        "description": "Currency of the transaction in case of money type",
                        "example": "USD"
                    },
                    "transactionDate": {
                        "type": "integer",
                        "description": "Transaction date",
                        "format": "int64",
                        "example": 1582589462505
                    },
                    "comment": {
                        "type": "string",
                        "description": "Comment for the transaction, additional information",
                        "example": "Wager purchase, transaction id: 78acfe0e-8d9f-4623-923f-a93a258b103f"
                    }
                },
                "description": "Financial transaction object"
            },
            "FinancialTransactionPageDTO": {
                "required": [
                    "nextItems",
                    "nextPageUrl",
                    "pageUrls",
                    "previousItems",
                    "previousPageUrl"
                ],
                "type": "object",
                "properties": {
                    "nextPageUrl": {
                        "type": "string",
                        "description": "URL indicating where the next page can be found"
                    },
                    "previousPageUrl": {
                        "type": "string",
                        "description": "URL indicating where the previous page can be found"
                    },
                    "pageUrls": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string",
                            "description": "Map of pages URLs accessed by the page number (to jump to selected page)"
                        },
                        "description": "Map of pages URLs accessed by the page number (to jump to selected page)"
                    },
                    "nextItems": {
                        "type": "integer",
                        "description": "Amount of items in the next pages",
                        "format": "int32"
                    },
                    "previousItems": {
                        "type": "integer",
                        "description": "Amount of items in the previous pages",
                        "format": "int32"
                    },
                    "transactions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FinancialTransactionDTO"
                        },
                        "description": "List of transactions"
                    }
                },
                "description": "Pageable financial transaction list"
            },
            "BankAccountDTO": {
                "type": "object",
                "properties": {
                    "accountNumber": {
                        "type": "string",
                        "description": "Bank account number",
                        "example": "BE47179396981187"
                    },
                    "bankSwiftCode": {
                        "type": "string",
                        "description": "Bank SWIFT code",
                        "example": "COBABEBX"
                    },
                    "defaultForDeposit": {
                        "type": "boolean",
                        "description": "Flag whether this bank account is default for player's deposits"
                    },
                    "defaultForWithdrawal": {
                        "type": "boolean",
                        "description": "Flag whether this bank account is default for player's withdrawals"
                    },
                    "dateCreated": {
                        "type": "integer",
                        "description": "Creation date in milliseconds since epoch",
                        "format": "int64",
                        "example": 1583579856511
                    },
                    "methodId": {
                        "type": "string",
                        "description": "Method id correlated with this bank account",
                        "example": "IBAN"
                    },
                    "currencyId": {
                        "type": "string",
                        "description": "Currency of this bank account",
                        "example": "EUR"
                    }
                },
                "description": "Object representing player's bank account."
            },
            "BankAccountTransactionDTO": {
                "required": [
                    "id",
                    "state"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Id of transaction on bank account",
                        "example": "BE47179396981187"
                    },
                    "state": {
                        "enum": [
                            "WAITING_FOR_CUSTOMERS_CONFIRMATION",
                            "THRASHED_UNALLOCATED",
                            "WAITING_FOR_WALLETS_AUTHORISATION",
                            "WAITING_FOR_AUTHORISATION",
                            "READY_TO_GO",
                            "CANCELLED",
                            "SENT_TO_EXECUTION",
                            "EXECUTED_SUCCESSFULLY",
                            "FAILED",
                            "IN_DOUBT",
                            "REFERRAL_B",
                            "EXECUTED_MANUALLY",
                            "REFERRAL_CONFIRMED_BY_THE_OPERATOR",
                            "REFERRAL_REJECTED_BY_THE_OPERATOR",
                            "FAILED_AFTER_IN_DOUBT_OR_REFERRAL",
                            "WAITING_FOR_THE_2_ND_AUTHORISATION",
                            "READY_FOR_REDIRECTION",
                            "IN_REDIRECTION",
                            "VERIFYING",
                            "REVERSED",
                            "FAILED_AFTER_TIMEOUT",
                            "SUCCESSFUL_PENDING_1_ST_CHECK",
                            "SUCCESSFUL_PENDING_2_ND_CHECK",
                            "SUCCESSFUL_PENDING_REVERSAL"
                        ],
                        "type": "string",
                        "description": "Transaction state",
                        "example": "EXECUTED_SUCCESSFULLY"
                    }
                },
                "description": "Object representing transaction on player's bank account."
            },
            "BankAccountStructuredReferenceDTO": {
                "type": "object",
                "properties": {
                    "structuredReference": {
                        "type": "string",
                        "description": "Structured reference",
                        "example": "+++004/8237/48665+++"
                    }
                },
                "description": "Structured creditor reference for identifying payments from particular player by bank."
            },
            "BiometricDeviceDTO": {
                "required": [
                    "name"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Technical identifier of this device - assigned by backend"
                    },
                    "uid": {
                        "type": "string",
                        "description": "Unique identifier generated on the device"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the device for display purposes"
                    },
                    "authenticationEnabled": {
                        "type": "boolean",
                        "description": "Flag indicating whether this device is authorized for biometric authentication"
                    },
                    "lastPasswordLogin": {
                        "type": "integer",
                        "description": "UTC of last password login attempt",
                        "format": "int64"
                    },
                    "lastFingerPrintLogin": {
                        "type": "integer",
                        "description": "UTC of last finger print login attempt",
                        "format": "int64"
                    },
                    "dateCreated": {
                        "type": "integer",
                        "description": "Creation UTC",
                        "format": "int64"
                    },
                    "dateUpdated": {
                        "type": "integer",
                        "description": "UTC of last updated",
                        "format": "int64"
                    }
                },
                "description": "Object representing biometric device"
            },
            "BiometricDeviceConfigurationDTO": {
                "type": "object",
                "properties": {
                    "maximumDevices": {
                        "type": "integer",
                        "description": "Maximum allowed number of biometric devices",
                        "format": "int32"
                    },
                    "reauthenticationInterval": {
                        "type": "integer",
                        "description": "Interval in days , for when players must authenticate their username and password",
                        "format": "int32"
                    },
                    "systemWideAuthenticationEnabled": {
                        "type": "boolean",
                        "description": "Flag indicating whether biometric authentication is enabled system-wide"
                    }
                },
                "description": "Object representing biometric device configuration"
            },
            "CardDTO": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Lottery card id (It is an internal id not the lottery card number)",
                        "example": "1454432004511"
                    },
                    "status": {
                        "enum": [
                            "2 - default"
                        ],
                        "type": "string",
                        "description": "Lottery card status",
                        "example": "2"
                    },
                    "number": {
                        "type": "string",
                        "description": "Lottery card number which is printed on a physical card",
                        "example": "44414544320045110259"
                    },
                    "level": {
                        "enum": [
                            "1 - anonymous level",
                            "3 - full player level"
                        ],
                        "type": "string",
                        "description": "Player card level",
                        "example": "1"
                    },
                    "preferredCurrency": {
                        "type": "string",
                        "description": "Preferred currency of the lottery card",
                        "example": "USD"
                    },
                    "requestedPhysicalCard": {
                        "type": "boolean",
                        "description": "Indicated player requested a card"
                    },
                    "type": {
                        "enum": [
                            "444 - Lottery club card",
                            "333 - Loyalty club card (only points operations)"
                        ],
                        "type": "string",
                        "description": "Lottery card type",
                        "example": "444"
                    },
                    "requestedWhen": {
                        "type": "integer",
                        "description": "Indicated when card was requested",
                        "format": "int64"
                    }
                },
                "description": "Player's lottery card object"
            },
            "CardReplaceResponseDTO": {
                "type": "object",
                "properties": {
                    "newCardProxyId": {
                        "type": "string",
                        "description": "Player regenerate card"
                    },
                    "newCardBarcode": {
                        "type": "string",
                        "description": "player card bar code"
                    }
                }
            },
            "ReasonDTO": {
                "required": [
                    "reason"
                ],
                "type": "object",
                "properties": {
                    "reason": {
                        "type": "string",
                        "description": "Reason for regeneration card",
                        "example": "theft \\ lost \\ other"
                    },
                    "userAction": {
                        "type": "string"
                    }
                }
            },
            "ClubCardPrintRequestFieldDTO": {
                "type": "object",
                "properties": {
                    "key": {
                        "type": "string",
                        "description": "Field for print request."
                    },
                    "value": {
                        "type": "string",
                        "description": "Value linked to the field."
                    }
                },
                "description": "Keys and values for the print request fields. Keys can take these values: [\"NAME\", \"SURNAME\", \"GENDER\", \"STREET\", \"HOUSE_NUMBER\", \"BOX_NUMBER\", \"CITY\", \"ZIP_CODE\", \"CARD_ID\"]"
            },
            "RequestPhysicalCardResponseDTO": {
                "required": [
                    "status"
                ],
                "type": "object",
                "properties": {
                    "status": {
                        "enum": [
                            "REQUESTED",
                            "SENT",
                            "ERROR",
                            "SUCCESS"
                        ],
                        "type": "string",
                        "description": "Request card status",
                        "example": "REQUESTED"
                    },
                    "reason": {
                        "type": "string",
                        "description": "Reason for request physical card."
                    },
                    "userAction": {
                        "type": "string",
                        "description": "Action User identifier."
                    },
                    "fields": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ClubCardPrintRequestFieldDTO"
                        },
                        "description": "List of fields for print."
                    },
                    "contractId": {
                        "type": "string",
                        "description": "Player identifier."
                    },
                    "id": {
                        "type": "integer",
                        "description": "Physical card identifier.",
                        "format": "int64"
                    },
                    "requestDate": {
                        "type": "integer",
                        "description": "Physical card creation date.",
                        "format": "int64"
                    }
                }
            },
            "RequestPhysicalCardByPlayerDTO": {
                "type": "object",
                "properties": {
                    "userAction": {
                        "type": "string",
                        "description": "Action User identifier."
                    },
                    "reason": {
                        "type": "string"
                    }
                }
            },
            "RequestPhysicalCardDTO": {
                "required": [
                    "status"
                ],
                "type": "object",
                "properties": {
                    "status": {
                        "enum": [
                            "REQUESTED",
                            "SENT",
                            "ERROR",
                            "SUCCESS"
                        ],
                        "type": "string",
                        "description": "Request card status",
                        "example": "REQUESTED"
                    },
                    "reason": {
                        "type": "string",
                        "description": "Reason for request physical card."
                    },
                    "userAction": {
                        "type": "string",
                        "description": "Action User identifier."
                    },
                    "fields": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ClubCardPrintRequestFieldDTO"
                        },
                        "description": "List of fields for print."
                    }
                }
            },
            "ClaimTransactionDTO": {
                "required": [
                    "claimAmount",
                    "claimDate",
                    "claimId",
                    "claimSource",
                    "claimStatus",
                    "forFun",
                    "insertTimestamp",
                    "jurisdiction",
                    "type",
                    "uuid"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Database level Id of transaction"
                    },
                    "uuid": {
                        "type": "string",
                        "description": "Unique transaction identifier, Masked on Player public API",
                        "example": "I6-**********-12"
                    },
                    "insertTimestamp": {
                        "type": "integer",
                        "description": "Timestamp of transaction insert to tx store",
                        "format": "int64"
                    },
                    "type": {
                        "type": "string",
                        "description": "Transaction type",
                        "example": "application/lotteryTransaction-v1"
                    },
                    "body": {
                        "type": "string",
                        "description": "Original transaction XML",
                        "example": "<balanceTransaction> ... </balanceTransaction>"
                    },
                    "forFun": {
                        "type": "boolean",
                        "description": "Flag indicates that it's fake transaction"
                    },
                    "jurisdiction": {
                        "type": "integer",
                        "description": "Claim jurisdiction/site Id",
                        "format": "int32"
                    },
                    "claimId": {
                        "type": "string",
                        "description": "Id of claim transaction"
                    },
                    "claimDate": {
                        "type": "integer",
                        "description": "Claim date",
                        "format": "int64"
                    },
                    "claimAmount": {
                        "type": "number",
                        "description": "Claim amount"
                    },
                    "claimNetAmount": {
                        "type": "number",
                        "description": "Claim net amount"
                    },
                    "claimStatus": {
                        "type": "string",
                        "description": "Claim status"
                    },
                    "claimSource": {
                        "type": "string",
                        "description": "Claim source"
                    }
                },
                "description": "Represents player's claim transaction"
            },
            "ClaimTransactionsPageDTO": {
                "required": [
                    "nextItems",
                    "nextPageUrl",
                    "pageUrls",
                    "previousItems",
                    "previousPageUrl",
                    "transactions"
                ],
                "type": "object",
                "properties": {
                    "nextPageUrl": {
                        "type": "string",
                        "description": "URL indicating where the next page can be found"
                    },
                    "previousPageUrl": {
                        "type": "string",
                        "description": "URL indicating where the previous page can be found"
                    },
                    "pageUrls": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string",
                            "description": "Map of pages URLs accessed by the page number (to jump to selected page)"
                        },
                        "description": "Map of pages URLs accessed by the page number (to jump to selected page)"
                    },
                    "nextItems": {
                        "type": "integer",
                        "description": "Amount of items in the next pages",
                        "format": "int64"
                    },
                    "previousItems": {
                        "type": "integer",
                        "description": " Amount of items in the previous pages",
                        "format": "int64"
                    },
                    "transactions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ClaimTransactionDTO"
                        },
                        "description": "List of transactions"
                    }
                },
                "description": "Container for claim transactions api response, including paging data"
            },
            "ClientDeviceDTO": {
                "required": [
                    "applicationId",
                    "deviceType"
                ],
                "type": "object",
                "properties": {
                    "deviceType": {
                        "type": "string",
                        "description": "Device type (e.g. IOS, ANDROID, DESKTOP-CHROME etc.)",
                        "example": "IOS"
                    },
                    "applicationId": {
                        "type": "string",
                        "description": "Application (push) id",
                        "example": "19d9d9a93381b2a57db218b02f1069ca36bfd37fbddd6cc6427f53c156f8c"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether this device is enabled or not",
                        "example": true
                    }
                },
                "description": "Object representing client device"
            },
            "ClosePlayerAccountRequestDTO": {
                "type": "object",
                "properties": {
                    "removeData": {
                        "type": "boolean",
                        "description": "Flag indicating that player's data should also be removed along with his account being closed"
                    },
                    "reason": {
                        "type": "string",
                        "description": "Player's close request reason field"
                    }
                },
                "description": "Close player account request object"
            },
            "ClubCardPrintRequestDTO": {
                "type": "object",
                "properties": {
                    "reason": {
                        "type": "string",
                        "description": "The Reason for sending the print request."
                    },
                    "printRequestId": {
                        "type": "integer",
                        "description": "The print request identifier.",
                        "format": "int64"
                    },
                    "requestDate": {
                        "type": "integer",
                        "description": "The date in which print request has been sent.",
                        "format": "int64"
                    },
                    "lastUpdateDate": {
                        "type": "integer",
                        "description": "The date of print request last update.",
                        "format": "int64"
                    },
                    "brandId": {
                        "type": "integer",
                        "description": "The brand identifier.",
                        "format": "int64"
                    },
                    "partnerId": {
                        "type": "integer",
                        "description": "The partner identifier.",
                        "format": "int64"
                    },
                    "userAction": {
                        "type": "string",
                        "description": "The user who performed action of print request. The user can be represented as a contract identity."
                    },
                    "printRequestStatus": {
                        "enum": [
                            "REQUESTED",
                            "SENT",
                            "ERROR",
                            "SUCCESS"
                        ],
                        "type": "string",
                        "description": "The status of the print request."
                    },
                    "printRequestFields": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ClubCardPrintRequestFieldDTO"
                        },
                        "description": "Keys and values for the print request fields. Keys can take these values: [\"NAME\", \"SURNAME\", \"GENDER\", \"STREET\", \"HOUSE_NUMBER\", \"BOX_NUMBER\", \"CITY\", \"ZIP_CODE\", \"CARD_ID\"]"
                    }
                }
            },
            "ClubCardPrintRequestInfoDTO": {
                "type": "object",
                "properties": {
                    "reason": {
                        "type": "string",
                        "description": "The Reason for sending the print request."
                    }
                }
            },
            "ChannelBlackoutTimeDTO": {
                "required": [
                    "enabled",
                    "endTime",
                    "startTime"
                ],
                "type": "object",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Is blackout enabled",
                        "default": false
                    },
                    "startTime": {
                        "type": "string",
                        "description": "Blackout start time in the HH:mm format",
                        "default": "00:00"
                    },
                    "endTime": {
                        "type": "string",
                        "description": "Blackout end time in the HH:mm format",
                        "default": "00:00"
                    }
                },
                "description": "Communication channel blackout"
            },
            "CommunicationPreferencesDTO": {
                "required": [
                    "email",
                    "preferredChannel",
                    "pushClients",
                    "sms"
                ],
                "type": "object",
                "properties": {
                    "preferredChannel": {
                        "enum": [
                            "PUSH_CLIENT",
                            "SMS",
                            "EMAIL",
                            "PLAYER_PORTAL",
                            "PAPER_CHANNEL"
                        ],
                        "type": "string",
                        "description": "Channel preferred by player to be communicated",
                        "example": "EMAIL_CHANNEL"
                    },
                    "pushClients": {
                        "type": "object",
                        "properties": {
                            "MAINTENANCE": {
                                "type": "boolean",
                                "description": "MAINTENANCE notification type"
                            },
                            "ALERT": {
                                "type": "boolean",
                                "description": "ALERT notification type"
                            },
                            "ALARM": {
                                "type": "boolean",
                                "description": "ALARM notification type"
                            },
                            "PROMOTION": {
                                "type": "boolean",
                                "description": "PROMOTION notification type"
                            }
                        },
                        "description": "Represents map of supported notification types"
                    },
                    "sms": {
                        "type": "object",
                        "properties": {
                            "MAINTENANCE": {
                                "type": "boolean",
                                "description": "MAINTENANCE notification type"
                            },
                            "ALERT": {
                                "type": "boolean",
                                "description": "ALERT notification type"
                            },
                            "ALARM": {
                                "type": "boolean",
                                "description": "ALARM notification type"
                            },
                            "PROMOTION": {
                                "type": "boolean",
                                "description": "PROMOTION notification type"
                            }
                        },
                        "description": "Represents map of supported notification types"
                    },
                    "email": {
                        "type": "object",
                        "properties": {
                            "MAINTENANCE": {
                                "type": "boolean",
                                "description": "MAINTENANCE notification type"
                            },
                            "ALERT": {
                                "type": "boolean",
                                "description": "ALERT notification type"
                            },
                            "ALARM": {
                                "type": "boolean",
                                "description": "ALARM notification type"
                            },
                            "PROMOTION": {
                                "type": "boolean",
                                "description": "PROMOTION notification type"
                            }
                        },
                        "description": "Represents map of supported notification types"
                    },
                    "smsPersonalBlackoutTime": {
                        "$ref": "#/components/schemas/ChannelBlackoutTimeDTO"
                    },
                    "smsGlobalBlackoutTime": {
                        "$ref": "#/components/schemas/ChannelBlackoutTimeDTO"
                    },
                    "emailFormat": {
                        "enum": [
                            "HTML",
                            "TEXT"
                        ],
                        "type": "string",
                        "description": "User's email content type",
                        "default": "HTML"
                    },
                    "pushClientPersonalBlackoutTime": {
                        "$ref": "#/components/schemas/ChannelBlackoutTimeDTO"
                    },
                    "pushClientGlobalBlackoutTime": {
                        "$ref": "#/components/schemas/ChannelBlackoutTimeDTO"
                    }
                },
                "description": "User's communication preferences"
            },
            "NotificationTypeMap": {
                "type": "object",
                "properties": {
                    "MAINTENANCE": {
                        "type": "boolean",
                        "description": "MAINTENANCE notification type"
                    },
                    "ALERT": {
                        "type": "boolean",
                        "description": "ALERT notification type"
                    },
                    "ALARM": {
                        "type": "boolean",
                        "description": "ALARM notification type"
                    },
                    "PROMOTION": {
                        "type": "boolean",
                        "description": "PROMOTION notification type"
                    }
                },
                "description": "Represents map of supported notification types"
            },
            "KycConfigurationDTO": {
                "type": "object",
                "properties": {
                    "registrationLevelId": {
                        "type": "integer",
                        "description": "The unique ID of the registration level for the given configuration",
                        "format": "int32"
                    },
                    "maxPlayerAttempts": {
                        "type": "integer",
                        "description": "The maximum number of attempts the player can do",
                        "format": "int32"
                    },
                    "checkAfterLogin": {
                        "type": "boolean",
                        "description": "Used to verify if the KYC check will be performed at login time"
                    }
                },
                "description": "KYC configuration"
            },
            "CallerSystemDTO": {
                "required": [
                    "description",
                    "systemId"
                ],
                "type": "object",
                "properties": {
                    "systemId": {
                        "type": "integer",
                        "description": "Identifier of the caller system",
                        "format": "int32",
                        "example": 2
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the caller system",
                        "example": "Mobile"
                    }
                },
                "description": "Object representing system caller",
                "example": {
                    "callerSystem": "2",
                    "description": "Mobile"
                }
            },
            "PlayerConsentDTO": {
                "required": [
                    "enabled",
                    "id",
                    "language",
                    "updateDate",
                    "userType",
                    "version"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Identifier of the consent",
                        "example": "1"
                    },
                    "userType": {
                        "$ref": "#/components/schemas/UserTypeDTO"
                    },
                    "callerSystem": {
                        "$ref": "#/components/schemas/CallerSystemDTO"
                    },
                    "version": {
                        "type": "string",
                        "description": "Current version of the consent",
                        "example": "2"
                    },
                    "nextVersion": {
                        "type": "string",
                        "description": "Future version of the consent",
                        "example": "3"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Flag indicating whether consent is accepted by the player"
                    },
                    "requiresConsent": {
                        "type": "boolean",
                        "description": "Flag indicating that user has to review the consent and decline or accept"
                    },
                    "updateDate": {
                        "type": "integer",
                        "description": "Date representing last update of this consent",
                        "format": "int64",
                        "example": 1583147293493
                    },
                    "language": {
                        "type": "string",
                        "description": "Language associated to the consent",
                        "example": "en_US"
                    }
                },
                "description": "Object representing player consent"
            },
            "UserTypeDTO": {
                "required": [
                    "userTypeId"
                ],
                "type": "object",
                "properties": {
                    "userTypeId": {
                        "type": "integer",
                        "description": "Identifier of the player registration level",
                        "format": "int64",
                        "example": 2
                    },
                    "userTypeDescription": {
                        "type": "string",
                        "description": "Description of the player registration level",
                        "example": "FULL"
                    }
                },
                "description": "Object representing user registration level",
                "example": {
                    "userTypeId": "2",
                    "brandId": "25",
                    "partnerId": "1",
                    "userTypeDescription": "full"
                }
            },
            "ConsentDTO": {
                "required": [
                    "creationDate",
                    "enabled",
                    "id",
                    "isMandatoryConsentTrue",
                    "lastUpdateTime",
                    "mandatory",
                    "name",
                    "personalInformation"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the consent"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the consent"
                    },
                    "userType": {
                        "$ref": "#/components/schemas/UserTypeDTO"
                    },
                    "descriptions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ConsentDescriptionDTO"
                        },
                        "description": "Description of the consent"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Status of the consent."
                    },
                    "mandatory": {
                        "type": "boolean",
                        "description": "This field must be used to understand if this consent is mandatory (The removal of a mandatory consent will cause)"
                    },
                    "isMandatoryConsentTrue": {
                        "type": "boolean",
                        "description": "This field must be used to understand if the value of this consent must be TRUE"
                    },
                    "creationDate": {
                        "type": "integer",
                        "description": "The date when the consent has been created.",
                        "format": "int64",
                        "example": 1560847217525
                    },
                    "lastUpdateTime": {
                        "type": "integer",
                        "description": "The date when the consent has been updated the last time.",
                        "format": "int64",
                        "example": 1560847217525
                    },
                    "personalInformation": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ConsentPersonalInformationDTO"
                        },
                        "description": "List of personal information associated to the consent."
                    },
                    "processes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ConsentProcessDTO"
                        }
                    }
                },
                "description": "Object representing configured consent"
            },
            "ConsentDescriptionDTO": {
                "required": [
                    "body",
                    "coolOffDate",
                    "language",
                    "version"
                ],
                "type": "object",
                "properties": {
                    "body": {
                        "type": "string",
                        "description": "Description of the consent"
                    },
                    "shortDescription": {
                        "type": "string",
                        "description": "Short description of the consent"
                    },
                    "language": {
                        "type": "string",
                        "description": "Language associated to the consent",
                        "example": "en_US"
                    },
                    "version": {
                        "type": "string",
                        "description": "Version of the consent body",
                        "example": "1"
                    },
                    "coolOffDate": {
                        "type": "integer",
                        "description": "The date when this consent version will become live and will replace the existing one",
                        "format": "int64",
                        "example": 1560847217525
                    }
                },
                "description": "Object representing configured consent"
            },
            "ConsentPersonalInformationDTO": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    }
                },
                "description": "Object representing consent personal information"
            },
            "ConsentProcessDTO": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    }
                }
            },
            "DataExportRequestDTO": {
                "required": [
                    "id",
                    "requestDate",
                    "status",
                    "transactionId"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the data portability request"
                    },
                    "transactionId": {
                        "type": "string",
                        "description": "Unique identifier of the transaction associated to the data portability request"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of the data portability request"
                    },
                    "requestDate": {
                        "type": "integer",
                        "description": "The UTC date when the request has been done",
                        "format": "int64"
                    },
                    "completionDate": {
                        "type": "integer",
                        "description": "The UTC date when the data export request has been successfully completed and data export file has been\n     * made available",
                        "format": "int64"
                    }
                },
                "description": "Object representing data export request"
            },
            "EticketDTO": {
                "type": "object",
                "properties": {
                    "serialNumber": {
                        "type": "string",
                        "description": "Eticket serial number",
                        "example": "10496-042977536-30"
                    },
                    "pin": {
                        "type": "string",
                        "description": "Eticket pin",
                        "example": "NJEX-VKPI-HYLP-UKYV"
                    },
                    "amount": {
                        "type": "integer",
                        "description": "Amount of eticket, in cents",
                        "format": "int64",
                        "example": 100
                    }
                },
                "description": "Player's eticket"
            },
            "InboundCommunicationDTO": {
                "required": [
                    "destination",
                    "message"
                ],
                "type": "object",
                "properties": {
                    "destination": {
                        "type": "string",
                        "description": "Destination such as CUSTOMER_SUPPORT",
                        "example": "CUSTOMER_SUPPORT"
                    },
                    "subject": {
                        "type": "string",
                        "description": "The message subject, not obligatory as SMS, push notifications does not have subjects"
                    },
                    "category": {
                        "type": "string",
                        "description": "The message category, not obligatory",
                        "example": "Report A Technical Problem"
                    },
                    "message": {
                        "minLength": 1,
                        "type": "string",
                        "description": "Message from the player"
                    }
                },
                "description": "Represents message sent by the player"
            },
            "AnonymousInboundCommunicationDTO": {
                "required": [
                    "destination",
                    "message"
                ],
                "type": "object",
                "properties": {
                    "destination": {
                        "type": "string",
                        "description": "Destination such as CUSTOMER_SUPPORT",
                        "example": "CUSTOMER_SUPPORT"
                    },
                    "subject": {
                        "type": "string",
                        "description": "The message subject, not obligatory as SMS, push notifications does not have subjects"
                    },
                    "category": {
                        "type": "string",
                        "description": "The message category, not obligatory",
                        "example": "Report A Technical Problem"
                    },
                    "message": {
                        "minLength": 1,
                        "type": "string",
                        "description": "Message from the player"
                    },
                    "senderAddress": {
                        "type": "string",
                        "description": "Sender address"
                    },
                    "senderFirstName": {
                        "type": "string",
                        "description": "First name"
                    },
                    "senderLastName": {
                        "type": "string",
                        "description": "Last name"
                    }
                },
                "description": "Represents message sent by the player"
            },
            "IntegrationTokenDTO": {
                "required": [
                    "checkCount",
                    "id",
                    "token",
                    "validated"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Token id"
                    },
                    "token": {
                        "type": "string",
                        "description": "Token value"
                    },
                    "checkCount": {
                        "type": "integer",
                        "description": "Number of times token has been checked",
                        "format": "int64"
                    },
                    "validated": {
                        "type": "boolean",
                        "description": "True if token is valid"
                    }
                },
                "description": "Represents integration token"
            },
            "FriendInvitationDTO": {
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "The invitation type such as campaign id"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name or nick-name of the player's friend"
                    },
                    "email": {
                        "type": "string",
                        "description": "The email address of the player's friend"
                    },
                    "phoneNumber": {
                        "type": "string",
                        "description": "The phone number of the player's friend"
                    },
                    "status": {
                        "enum": [
                            "NOT_EXISTS",
                            "USED",
                            "VALID",
                            "ERROR"
                        ],
                        "type": "string",
                        "description": "Invitation status",
                        "example": "VALID"
                    },
                    "invitationDate": {
                        "type": "integer",
                        "description": "Invitation creation datetime as UTC timestamp in milliseconds",
                        "format": "int64",
                        "example": 1583412960000
                    },
                    "completionDate": {
                        "type": "integer",
                        "description": "Invitation usage datetime as UTC timestamp in milliseconds",
                        "format": "int64",
                        "example": 1583412960000
                    }
                },
                "description": "Invited friend details"
            },
            "InvitationStatusDTO": {
                "required": [
                    "invitations"
                ],
                "type": "object",
                "properties": {
                    "playerStatus": {
                        "type": "string",
                        "description": "Player's status such as active, blacklisted, or exceed limit, not set in baseline",
                        "example": "active"
                    },
                    "invitationRemaining": {
                        "type": "integer",
                        "description": "If there is an invitation limit, the number of invitations that may be sent",
                        "format": "int32",
                        "nullable": true,
                        "example": 15
                    },
                    "invitations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FriendInvitationDTO"
                        },
                        "description": "List of invitations"
                    }
                },
                "description": "Status of an invitation"
            },
            "InvitationTypeDTO": {
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Invitation type"
                    },
                    "name": {
                        "type": "string",
                        "description": "Invitation type name"
                    },
                    "status": {
                        "enum": [
                            "ACTIVE",
                            "INACTIVE",
                            "SUSPENDED",
                            "TERMINATED"
                        ],
                        "type": "string",
                        "description": "Invitation type status",
                        "example": "ACTIVE"
                    }
                },
                "description": "Invitation type"
            },
            "LimitDTO": {
                "required": [
                    "status",
                    "type",
                    "value",
                    "valueLeft"
                ],
                "type": "object",
                "properties": {
                    "value": {
                        "type": "integer",
                        "description": "Value of limit e.g. amount of money to spend, number of transactions to play",
                        "format": "int64"
                    },
                    "valueLeft": {
                        "type": "integer",
                        "description": "Value of limit still left e.g. amount of money still available to spend, number of transactions still possible to play",
                        "format": "int64"
                    },
                    "type": {
                        "type": "string",
                        "description": "Limit type",
                        "example": "DAILY_AMOUNT"
                    },
                    "status": {
                        "enum": [
                            "ACTIVE",
                            "FROZEN",
                            "INACTIVE"
                        ],
                        "type": "string",
                        "description": "Limit status"
                    },
                    "beginTime": {
                        "type": "integer",
                        "description": "Time a limit has been setup at",
                        "format": "int64",
                        "example": 1563109380119
                    },
                    "freezeEndTime": {
                        "type": "integer",
                        "description": "After setting up limit you can not change it until freeze time ends",
                        "format": "int64",
                        "example": 1563107380219
                    },
                    "endTime": {
                        "type": "integer",
                        "description": "Time a limit will stop applying e.g. DAILY_AMOUNT limit to last for 2 weeks",
                        "format": "int64",
                        "example": 1563107380219
                    },
                    "currentPeriodBeginTime": {
                        "type": "integer",
                        "description": "Begin time for current limit period",
                        "format": "int64",
                        "example": 1563107380219
                    },
                    "currentPeriodEndTime": {
                        "type": "integer",
                        "description": "End time for current limit period",
                        "format": "int64",
                        "example": 1563107380219
                    }
                },
                "description": "Represents user's wagering limits"
            },
            "LoginHistoryDTO": {
                "type": "object",
                "properties": {
                    "loginDate": {
                        "type": "string",
                        "description": "Time when user logged in",
                        "format": "date-time"
                    },
                    "logoutDate": {
                        "type": "string",
                        "description": "Time when user logged out",
                        "format": "date-time"
                    },
                    "loginId": {
                        "type": "integer",
                        "description": "Login ID",
                        "format": "int64",
                        "example": 53480
                    },
                    "externalSystemId": {
                        "type": "integer",
                        "description": "External system ID",
                        "format": "int64",
                        "example": 5001
                    },
                    "ipAddress": {
                        "type": "string",
                        "description": "IP Address",
                        "example": "127.0.0.1"
                    }
                },
                "description": "Object representing information about login history"
            },
            "LotteryTransactionDTO": {
                "required": [
                    "cdc",
                    "endDrawNumber",
                    "forFun",
                    "freeTicket",
                    "insertTimestamp",
                    "jurisdiction",
                    "lotteryTransactionType",
                    "product",
                    "serial",
                    "startDrawNumber",
                    "transactionAmount",
                    "transactionTimeLocal",
                    "transactionTimeUTC",
                    "type",
                    "uuid"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Database level Id of transaction"
                    },
                    "uuid": {
                        "type": "string",
                        "description": "Unique transaction identifier, Masked on Player public API",
                        "example": "I6-**********-12"
                    },
                    "insertTimestamp": {
                        "type": "integer",
                        "description": "Timestamp of transaction insert to tx store",
                        "format": "int64"
                    },
                    "type": {
                        "type": "string",
                        "description": "Transaction type",
                        "example": "application/lotteryTransaction-v1"
                    },
                    "body": {
                        "type": "string",
                        "description": "Original transaction XML",
                        "example": "<balanceTransaction> ... </balanceTransaction>"
                    },
                    "forFun": {
                        "type": "boolean",
                        "description": "Flag indicates that it's fake transaction"
                    },
                    "cdc": {
                        "type": "integer",
                        "description": "CDC of transaction",
                        "format": "int32"
                    },
                    "serial": {
                        "type": "string",
                        "description": "Serial number of the transaction"
                    },
                    "product": {
                        "type": "integer",
                        "description": "Product Id related with transaction",
                        "format": "int32"
                    },
                    "jurisdiction": {
                        "type": "integer",
                        "description": "Jurisdiction",
                        "format": "int32"
                    },
                    "journalAddress": {
                        "type": "integer",
                        "description": "Journal Address",
                        "format": "int64"
                    },
                    "transactionTimeLocal": {
                        "type": "integer",
                        "description": "Transaction timestamp in local timezone",
                        "format": "int64"
                    },
                    "transactionTimeUTC": {
                        "type": "integer",
                        "description": "Transaction timestamp in UTC",
                        "format": "int64"
                    },
                    "transactionAmount": {
                        "type": "number",
                        "description": "Transaction amount"
                    },
                    "subscriptionId": {
                        "type": "integer",
                        "description": "Subscription id if transaction is related with any subscription",
                        "format": "int64"
                    },
                    "lotteryTransactionType": {
                        "type": "string",
                        "description": "Transaction type "
                    },
                    "startDrawNumber": {
                        "type": "integer",
                        "description": "Start draw number ",
                        "format": "int32"
                    },
                    "endDrawNumber": {
                        "type": "integer",
                        "description": "Start draw number ",
                        "format": "int32"
                    },
                    "globalTransId": {
                        "type": "string",
                        "description": "Parent transaction UUID"
                    },
                    "groupId": {
                        "type": "string",
                        "description": "Group Id"
                    },
                    "transactionDiscountAmount": {
                        "type": "number",
                        "description": "transactionDiscountAmount"
                    },
                    "freeTicket": {
                        "type": "boolean",
                        "description": "Flag indicates if ticket related with a transaction is free",
                        "default": false
                    },
                    "transactionPointAmount": {
                        "type": "number",
                        "description": "Amount of loyalty points related with the transaction"
                    },
                    "currency": {
                        "type": "string",
                        "description": "Transaction currency"
                    },
                    "triggerType": {
                        "type": "string",
                        "description": "Trigger type if transaction is related with player purchased trigger"
                    },
                    "transactionVirtualAmount": {
                        "type": "number",
                        "description": "Amount of loyalty points related with the transaction"
                    },
                    "trxLoyaltyPoints": {
                        "type": "number",
                        "description": "Amount of loyalty points related with the transaction"
                    },
                    "betTypeId": {
                        "type": "string",
                        "description": "Transaction BetType "
                    }
                },
                "description": "Represents lottery transaction"
            },
            "LotteryTransactionsPageDTO": {
                "required": [
                    "nextItems",
                    "nextPageUrl",
                    "pageUrls",
                    "previousItems",
                    "previousPageUrl",
                    "transactions"
                ],
                "type": "object",
                "properties": {
                    "nextPageUrl": {
                        "type": "string",
                        "description": "URL indicating where the next page can be found"
                    },
                    "previousPageUrl": {
                        "type": "string",
                        "description": "URL indicating where the previous page can be found"
                    },
                    "pageUrls": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string",
                            "description": "Map of pages URLs accessed by the page number (to jump to selected page)"
                        },
                        "description": "Map of pages URLs accessed by the page number (to jump to selected page)"
                    },
                    "nextItems": {
                        "type": "integer",
                        "description": "Amount of items in the next pages",
                        "format": "int64"
                    },
                    "previousItems": {
                        "type": "integer",
                        "description": "Amount of items in the previous pages",
                        "format": "int64"
                    },
                    "transactions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/LotteryTransactionDTO"
                        },
                        "description": "List of transactions"
                    }
                },
                "description": "Container for lottery transactions api response, including paging data"
            },
            "LoyaltyProfileDTO": {
                "required": [
                    "level",
                    "status"
                ],
                "type": "object",
                "properties": {
                    "status": {
                        "enum": [
                            "ENABLED",
                            "DISABLED",
                            "NOT_REGISTERED"
                        ],
                        "type": "string",
                        "description": "Supported loyalty profile statuses"
                    },
                    "points": {
                        "type": "integer",
                        "description": "Current points balance.",
                        "format": "int64"
                    },
                    "allTimePoints": {
                        "type": "integer",
                        "description": "Cumulative points (collected since joining the program.)",
                        "format": "int64"
                    },
                    "pointsToChangeLevel": {
                        "type": "integer",
                        "description": "Number of points user has to collect before level will be upgraded.",
                        "format": "int64"
                    },
                    "idLevel": {
                        "type": "integer",
                        "description": "Id of the current level.",
                        "format": "int32"
                    },
                    "level": {
                        "type": "string",
                        "description": "Name of current level.",
                        "example": "SILVER"
                    },
                    "idNextLevel": {
                        "type": "integer",
                        "description": "Id of the next level user can reach.",
                        "format": "int32"
                    },
                    "nextLevel": {
                        "type": "string",
                        "description": "Name of the next level.",
                        "example": "GOLD"
                    }
                },
                "description": "Represents player's loyalty program profile"
            },
            "NonpublicPersonalInfoDTO": {
                "type": "object",
                "properties": {
                    "dateOfBirth": {
                        "type": "integer",
                        "description": "Player's date of birth in milliseconds since epoch",
                        "format": "int64"
                    },
                    "feinNumber": {
                        "type": "string",
                        "description": "Federal Employee Identification Number or Federal Tax Identification Number",
                        "example": "<feinNumber>"
                    },
                    "identificationNumber": {
                        "type": "string",
                        "description": "Player's identification number",
                        "example": "<identificationNumber>"
                    },
                    "identificationIssuer": {
                        "type": "string",
                        "description": "Issuer of player's identification number",
                        "example": "<identificationIssuer>"
                    },
                    "socialSecurityNumber": {
                        "type": "string",
                        "description": "Player's social security number",
                        "example": "<socialSecurityNumber>"
                    }
                },
                "description": "Object representing non-public personal information"
            },
            "ChannelDTO": {
                "required": [
                    "contactIDs",
                    "enabled",
                    "preferred"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "enum": [
                            "PUSH_CLIENT",
                            "SMS",
                            "EMAIL",
                            "PLAYER_PORTAL",
                            "PAPER_CHANNEL"
                        ],
                        "type": "string",
                        "description": "Type of channel"
                    },
                    "contactIDs": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "description": "List of contactIDs"
                        },
                        "description": "List of contactIDs"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Is channel active"
                    },
                    "preferred": {
                        "type": "boolean",
                        "description": "Is channel default/preferred"
                    }
                },
                "description": "Represents channel preferences"
            },
            "ChannelsMap": {
                "type": "object",
                "properties": {
                    "PUSH_CLIENT": {
                        "$ref": "#/components/schemas/ChannelDTO"
                    },
                    "SMS": {
                        "$ref": "#/components/schemas/ChannelDTO"
                    },
                    "EMAIL": {
                        "$ref": "#/components/schemas/ChannelDTO"
                    },
                    "PLAYER_PORTAL": {
                        "$ref": "#/components/schemas/ChannelDTO"
                    }
                },
                "description": "Represents map of player's channels preferences"
            },
            "EventPreferenceDTO": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Parameter name"
                    },
                    "value": {
                        "type": "string",
                        "description": "Parameter value for a player"
                    },
                    "valueType": {
                        "enum": [
                            "DATE",
                            "BOOLEAN",
                            "MONEY",
                            "INTEGER",
                            "STRING"
                        ],
                        "type": "string",
                        "description": "Parameter value data type"
                    },
                    "availableValues": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "description": "A closed list of available parameter values.If this field is set, a 'value' field must have a value which is contained in 'availableValues'Empty 'availableValues' List indicates that parameter is free-form (respecting the 'valueType')"
                        },
                        "description": "A closed list of available parameter values.If this field is set, a 'value' field must have a value which is contained in 'availableValues'Empty 'availableValues' List indicates that parameter is free-form (respecting the 'valueType')"
                    }
                },
                "description": "Represents event preferences"
            },
            "NotificationPreferencesDTO": {
                "required": [
                    "channels",
                    "eventType"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "unique id"
                    },
                    "eventType": {
                        "type": "string",
                        "description": "Event type - consistent through the system"
                    },
                    "channels": {
                        "type": "object",
                        "properties": {
                            "PUSH_CLIENT": {
                                "$ref": "#/components/schemas/ChannelDTO"
                            },
                            "SMS": {
                                "$ref": "#/components/schemas/ChannelDTO"
                            },
                            "EMAIL": {
                                "$ref": "#/components/schemas/ChannelDTO"
                            },
                            "PLAYER_PORTAL": {
                                "$ref": "#/components/schemas/ChannelDTO"
                            }
                        },
                        "description": "Represents map of player's channels preferences"
                    },
                    "eventPreferences": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/components/schemas/EventPreferenceDTO"
                        },
                        "description": "User preferences specific to notification like jackpot threshold"
                    },
                    "notificationType": {
                        "enum": [
                            "MAINTENANCE",
                            "ALARM",
                            "ALERT",
                            "PROMOTION"
                        ],
                        "type": "string",
                        "description": "Supported notification types"
                    },
                    "required": {
                        "type": "boolean",
                        "description": "If true, notification is required"
                    }
                },
                "description": "Represents notification - specific parameters and channel configuration"
            },
            "NotificationPreferencesPageDTO": {
                "type": "object",
                "properties": {
                    "nextPageUrl": {
                        "type": "string"
                    },
                    "previousPageUrl": {
                        "type": "string"
                    },
                    "pageUrls": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "nextItems": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "previousItems": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "notificationPreferences": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/NotificationPreferencesDTO"
                        }
                    }
                }
            },
            "NotificationDTO": {
                "required": [
                    "channel",
                    "deviceKey",
                    "externalId",
                    "id",
                    "status"
                ],
                "type": "object",
                "properties": {
                    "status": {
                        "enum": [
                            "Attempting",
                            "Notification_Async",
                            "Sent",
                            "Delivered",
                            "Error",
                            "Suspended",
                            "Stopped",
                            "In_blackout"
                        ],
                        "type": "string",
                        "description": "Notification status",
                        "example": "Delivered"
                    },
                    "channel": {
                        "enum": [
                            "PUSH_CLIENT",
                            "SMS",
                            "EMAIL",
                            "PLAYER_PORTAL",
                            "PAPER_CHANNEL"
                        ],
                        "type": "string",
                        "description": "Notification channel",
                        "example": "EMAIL_CHANNEL"
                    },
                    "parameters": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string",
                            "description": "Additional notification parameters",
                            "nullable": true
                        },
                        "description": "Additional notification parameters",
                        "nullable": true
                    },
                    "id": {
                        "type": "string",
                        "description": "Unique notification identifier",
                        "example": "EventDetectorResultsEuro JackpotD3:::EMAIL_CHANNEL:::1"
                    },
                    "type": {
                        "type": "string",
                        "description": "Event (notification) type like PasswordForgotten, ActivationMail, etc.",
                        "example": "ContactActivationMail"
                    },
                    "date": {
                        "type": "integer",
                        "description": "Notification sending date as UTC timestamp in milliseconds",
                        "format": "int64",
                        "example": 1583412960000
                    },
                    "destinationAddress": {
                        "type": "string",
                        "description": "The address to which the notification was sent to."
                    },
                    "subject": {
                        "type": "string",
                        "description": "Subject of the message, for some message types, like SMS-es it can be empty or have some default value",
                        "nullable": true
                    },
                    "body": {
                        "type": "string",
                        "description": "Body of the message, when list of notifications is returned it is empty for performance reasons"
                    },
                    "from": {
                        "type": "string",
                        "description": "Sender of the message",
                        "nullable": true
                    },
                    "priority": {
                        "type": "string",
                        "description": "Message priority from 0 to 10, 0 is the lowest priority",
                        "default": "0",
                        "example": "0"
                    },
                    "read": {
                        "type": "boolean",
                        "description": "Indicates if message was read",
                        "default": false
                    },
                    "deviceKey": {
                        "type": "string",
                        "description": "Device identifier for which notification was sent, makes sense mostly for push notifications, however in baseline push notification is sentonly to a single device anyway",
                        "default": "1"
                    },
                    "externalId": {
                        "type": "string",
                        "description": "Notification identifier in the (potentially external) notifications storage",
                        "example": "EventDetectorResultsEuro JackpotD3"
                    }
                },
                "description": "Represents player notification"
            },
            "NotificationPageDTO": {
                "required": [
                    "nextItems",
                    "nextPageUrl",
                    "notifications",
                    "pageUrls",
                    "previousItems",
                    "previousPageUrl"
                ],
                "type": "object",
                "properties": {
                    "nextPageUrl": {
                        "type": "string",
                        "description": "URL indicating where the next page can be found"
                    },
                    "previousPageUrl": {
                        "type": "string",
                        "description": "URL indicating where the previous page can be found"
                    },
                    "pageUrls": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string",
                            "description": "Map of pages URLs accessed by the page number (to jump to selected page)"
                        },
                        "description": "Map of pages URLs accessed by the page number (to jump to selected page)"
                    },
                    "nextItems": {
                        "type": "integer",
                        "description": "Amount of items in the next pages",
                        "format": "int32"
                    },
                    "previousItems": {
                        "type": "integer",
                        "description": " Amount of items in the previous pages",
                        "format": "int32"
                    },
                    "notifications": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/NotificationDTO"
                        },
                        "description": "List of notifications"
                    }
                },
                "description": "List of player notifications with paging"
            },
            "OrderPageDTO": {
                "type": "object",
                "properties": {
                    "nextPageUrl": {
                        "type": "string",
                        "description": "URL indicating where the next page can be found"
                    },
                    "previousPageUrl": {
                        "type": "string",
                        "description": "URL indicating where the previous page can be found"
                    },
                    "pageUrls": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string",
                            "description": "Map of pages URLs accessed by the page number (to jump to selected page)"
                        },
                        "description": "Map of pages URLs accessed by the page number (to jump to selected page)"
                    },
                    "nextItems": {
                        "type": "integer",
                        "description": "Amount of items in the next pages",
                        "format": "int32"
                    },
                    "previousItems": {
                        "type": "integer",
                        "description": "Amount of items in the previous pages",
                        "format": "int32"
                    },
                    "orders": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/OrderDTO"
                        },
                        "description": "List of orders"
                    }
                },
                "description": "Representation of single page containing orders"
            },
            "PasswordForgottenDTO": {
                "type": "object",
                "properties": {
                    "emailAddress": {
                        "type": "string",
                        "description": "Email address of the requesting player. Must be present if firstName and lastName are not provided"
                    },
                    "securityAnswer": {
                        "$ref": "#/components/schemas/SecurityAnswerDTO"
                    },
                    "firstName": {
                        "type": "string",
                        "description": "Player's first name. Must be present if emailAddress is not provided"
                    },
                    "lastName": {
                        "type": "string",
                        "description": "Player's surname. Must be present if emailAddress is not provided"
                    },
                    "forgottenCredentialType": {
                        "enum": [
                            "USERID",
                            "PASSWORD"
                        ],
                        "type": "string",
                        "description": "Credential which has been forgotten"
                    }
                },
                "description": "Object representing the user's password hints like email address and answer to security question."
            },
            "SecurityAnswerDTO": {
                "required": [
                    "answer",
                    "id"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Security question id"
                    },
                    "answer": {
                        "type": "string",
                        "description": "Security question answer"
                    }
                },
                "description": "Security answer"
            },
            "PasswordDTO": {
                "required": [
                    "newPassword",
                    "oldPassword"
                ],
                "type": "object",
                "properties": {
                    "oldPassword": {
                        "type": "string",
                        "description": "Old or current player password"
                    },
                    "newPassword": {
                        "type": "string",
                        "description": "New player password"
                    }
                },
                "description": "Object representing the user's password."
            },
            "PasswordResetDTO": {
                "required": [
                    "newPassword",
                    "oneTimeToken"
                ],
                "type": "object",
                "properties": {
                    "oneTimeToken": {
                        "type": "string",
                        "description": "One time token for validation purposes"
                    },
                    "newPassword": {
                        "type": "string",
                        "description": "New password to be set"
                    }
                },
                "description": "New password with one time token to validate the request."
            },
            "AddressesMap": {
                "type": "object",
                "properties": {
                    "HOME": {
                        "$ref": "#/components/schemas/interactiveAddressDTO"
                    },
                    "BUSINESS": {
                        "$ref": "#/components/schemas/interactiveAddressDTO"
                    },
                    "CONTACT": {
                        "$ref": "#/components/schemas/interactiveAddressDTO"
                    },
                    "BILLING": {
                        "$ref": "#/components/schemas/interactiveAddressDTO"
                    },
                    "MAILING": {
                        "$ref": "#/components/schemas/interactiveAddressDTO"
                    }
                },
                "description": "Represents map of player's addresses"
            },
            "EmailDTO": {
                "required": [
                    "address",
                    "type",
                    "verified"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "enum": [
                            "PERSONAL",
                            "BUSINESS"
                        ],
                        "type": "string",
                        "description": "User's email type"
                    },
                    "address": {
                        "type": "string",
                        "description": "User's email address"
                    },
                    "verified": {
                        "type": "boolean",
                        "description": "Player's email address verification status"
                    }
                },
                "description": "Represents User's email"
            },
            "EmailsMap": {
                "type": "object",
                "properties": {
                    "PERSONAL": {
                        "$ref": "#/components/schemas/EmailDTO"
                    },
                    "BUSINESS": {
                        "$ref": "#/components/schemas/EmailDTO"
                    }
                },
                "description": "Represents map of player's email contacts"
            },
            "KycDTO": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "attemptsLeft": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "description": "Additional information about user's KYC"
            },
            "PersonalInfoDTO": {
                "required": [
                    "addresses",
                    "citizenship",
                    "dateOfBirth",
                    "emails",
                    "firstName",
                    "gender",
                    "lastName",
                    "passwordHints",
                    "phones",
                    "prefix",
                    "pushClients",
                    "suffix"
                ],
                "type": "object",
                "properties": {
                    "firstName": {
                        "type": "string",
                        "description": "User's first name"
                    },
                    "middleName": {
                        "type": "string",
                        "description": "User's middle name"
                    },
                    "lastName": {
                        "type": "string",
                        "description": "User's surname"
                    },
                    "prefix": {
                        "type": "string",
                        "description": "User's title or prefix"
                    },
                    "suffix": {
                        "type": "string",
                        "description": "User's name suffix"
                    },
                    "gender": {
                        "enum": [
                            "MALE",
                            "FEMALE",
                            "UNSPECIFIED"
                        ],
                        "type": "string",
                        "description": "User's gender"
                    },
                    "salutation": {
                        "type": "string",
                        "description": "User's salutation text",
                        "example": "Welcome"
                    },
                    "kyc": {
                        "$ref": "#/components/schemas/KycDTO"
                    },
                    "addresses": {
                        "type": "object",
                        "properties": {
                            "HOME": {
                                "$ref": "#/components/schemas/interactiveAddressDTO"
                            },
                            "BUSINESS": {
                                "$ref": "#/components/schemas/interactiveAddressDTO"
                            },
                            "CONTACT": {
                                "$ref": "#/components/schemas/interactiveAddressDTO"
                            },
                            "BILLING": {
                                "$ref": "#/components/schemas/interactiveAddressDTO"
                            },
                            "MAILING": {
                                "$ref": "#/components/schemas/interactiveAddressDTO"
                            }
                        },
                        "description": "Represents map of player's addresses"
                    },
                    "phones": {
                        "type": "object",
                        "properties": {
                            "HOME": {
                                "$ref": "#/components/schemas/interactivePhoneDTO"
                            },
                            "BUSINESS": {
                                "$ref": "#/components/schemas/interactivePhoneDTO"
                            },
                            "MOBILE": {
                                "$ref": "#/components/schemas/interactivePhoneDTO"
                            },
                            "LANDLINE": {
                                "$ref": "#/components/schemas/interactivePhoneDTO"
                            }
                        },
                        "description": "Represents map of player's phone contacts"
                    },
                    "emails": {
                        "type": "object",
                        "properties": {
                            "PERSONAL": {
                                "$ref": "#/components/schemas/EmailDTO"
                            },
                            "BUSINESS": {
                                "$ref": "#/components/schemas/EmailDTO"
                            }
                        },
                        "description": "Represents map of player's email contacts"
                    },
                    "pushClients": {
                        "type": "object",
                        "properties": {
                            "PUSH_CLIENT_1": {
                                "$ref": "#/components/schemas/PushClientDTO"
                            },
                            "PUSH_CLIENT_2": {
                                "$ref": "#/components/schemas/PushClientDTO"
                            },
                            "PUSH_CLIENT_3": {
                                "$ref": "#/components/schemas/PushClientDTO"
                            },
                            "PUSH_CLIENT_4": {
                                "$ref": "#/components/schemas/PushClientDTO"
                            },
                            "PUSH_CLIENT_5": {
                                "$ref": "#/components/schemas/PushClientDTO"
                            },
                            "PUSH_CLIENT_6": {
                                "$ref": "#/components/schemas/PushClientDTO"
                            },
                            "PUSH_CLIENT_7": {
                                "$ref": "#/components/schemas/PushClientDTO"
                            },
                            "PUSH_CLIENT_8": {
                                "$ref": "#/components/schemas/PushClientDTO"
                            },
                            "PUSH_CLIENT_9": {
                                "$ref": "#/components/schemas/PushClientDTO"
                            },
                            "PUSH_CLIENT_10": {
                                "$ref": "#/components/schemas/PushClientDTO"
                            }
                        },
                        "description": "Represents map of push clients settings"
                    },
                    "citizenship": {
                        "type": "string",
                        "description": "User's ISO country code of citizenship"
                    },
                    "passwordHints": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/SecurityHintDTO"
                        },
                        "description": "Map of password hints"
                    },
                    "dateOfBirth": {
                        "type": "integer",
                        "description": "Player's date of birth in milliseconds since epoch",
                        "format": "int64"
                    }
                },
                "description": "Represents player's personal information settings"
            },
            "interactivePhoneDTO": {
                "required": [
                    "extension",
                    "number",
                    "provider",
                    "type"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "enum": [
                            "HOME",
                            "BUSINESS",
                            "MOBILE",
                            "LANDLINE"
                        ],
                        "type": "string",
                        "description": "User's phone type"
                    },
                    "number": {
                        "type": "string",
                        "description": "User's phone number"
                    },
                    "extension": {
                        "type": "string",
                        "description": "User's phone extension"
                    },
                    "provider": {
                        "type": "string",
                        "description": "Player's phone provider"
                    }
                },
                "description": "Represents one of the user's phone"
            },
            "PhonesMap": {
                "type": "object",
                "properties": {
                    "HOME": {
                        "$ref": "#/components/schemas/interactivePhoneDTO"
                    },
                    "BUSINESS": {
                        "$ref": "#/components/schemas/interactivePhoneDTO"
                    },
                    "MOBILE": {
                        "$ref": "#/components/schemas/interactivePhoneDTO"
                    },
                    "LANDLINE": {
                        "$ref": "#/components/schemas/interactivePhoneDTO"
                    }
                },
                "description": "Represents map of player's phone contacts"
            },
            "PushClientDTO": {
                "required": [
                    "externalClientId",
                    "id",
                    "name",
                    "type"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Id of a push client within system"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of device",
                        "example": "ANDROID"
                    },
                    "externalClientId": {
                        "type": "string",
                        "description": "External client id"
                    },
                    "name": {
                        "type": "string",
                        "description": "User friendly name of device"
                    }
                },
                "description": "Represents player's push client"
            },
            "PushClientsMap": {
                "type": "object",
                "properties": {
                    "PUSH_CLIENT_1": {
                        "$ref": "#/components/schemas/PushClientDTO"
                    },
                    "PUSH_CLIENT_2": {
                        "$ref": "#/components/schemas/PushClientDTO"
                    },
                    "PUSH_CLIENT_3": {
                        "$ref": "#/components/schemas/PushClientDTO"
                    },
                    "PUSH_CLIENT_4": {
                        "$ref": "#/components/schemas/PushClientDTO"
                    },
                    "PUSH_CLIENT_5": {
                        "$ref": "#/components/schemas/PushClientDTO"
                    },
                    "PUSH_CLIENT_6": {
                        "$ref": "#/components/schemas/PushClientDTO"
                    },
                    "PUSH_CLIENT_7": {
                        "$ref": "#/components/schemas/PushClientDTO"
                    },
                    "PUSH_CLIENT_8": {
                        "$ref": "#/components/schemas/PushClientDTO"
                    },
                    "PUSH_CLIENT_9": {
                        "$ref": "#/components/schemas/PushClientDTO"
                    },
                    "PUSH_CLIENT_10": {
                        "$ref": "#/components/schemas/PushClientDTO"
                    }
                },
                "description": "Represents map of push clients settings"
            },
            "SecurityHintDTO": {
                "required": [
                    "securityAnswer",
                    "securityQuestion"
                ],
                "type": "object",
                "properties": {
                    "securityQuestion": {
                        "$ref": "#/components/schemas/SecurityQuestionDTO"
                    },
                    "securityAnswer": {
                        "$ref": "#/components/schemas/SecurityAnswerDTO"
                    }
                },
                "description": "Represents both security question and security answer"
            },
            "SecurityQuestionDTO": {
                "required": [
                    "id",
                    "question"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Security question id"
                    },
                    "question": {
                        "type": "string",
                        "description": "Security question"
                    }
                },
                "description": "Represents both security question and security answer"
            },
            "BanTypologyDTO": {
                "type": "object",
                "properties": {
                    "gameCode": {
                        "type": "string",
                        "description": "Identifies the game code for which the player will be ban"
                    },
                    "gameDomain": {
                        "type": "string",
                        "description": "Identifies the game domain code for which the player will be ban"
                    },
                    "gameCategory": {
                        "type": "string",
                        "description": "Identifies the game category code for which the player will be ban"
                    }
                },
                "description": "Defines a combination of gameCategory, gameDomain and gameCode for the game ban"
            },
            "PlayerBanDTO": {
                "type": "object",
                "properties": {
                    "banTypology": {
                        "$ref": "#/components/schemas/BanTypologyDTO"
                    },
                    "banExpirationDate": {
                        "type": "integer",
                        "description": "Defines the expiration date for the game ban",
                        "format": "int64"
                    },
                    "reason": {
                        "type": "string",
                        "description": "Identifies the reason for which the player will be ban"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Identifies the comment for which the player will be ban"
                    },
                    "requestedScope": {
                        "enum": [
                            "LOGIN",
                            "SUBSCRIPTION",
                            "ALL",
                            "ANY"
                        ],
                        "type": "string",
                        "description": "Identifies the scope of the ban"
                    },
                    "gameSelfExclusionId": {
                        "type": "integer",
                        "description": "Defines the self exclusions identifier",
                        "format": "int64"
                    },
                    "bannedByBO": {
                        "type": "boolean"
                    }
                }
            },
            "PlayerBanInfoDTO": {
                "type": "object",
                "properties": {
                    "banTypology": {
                        "$ref": "#/components/schemas/BanTypologyDTO"
                    },
                    "banExpirationDate": {
                        "type": "integer",
                        "description": "Defines the expiration date for the game ban",
                        "format": "int64"
                    },
                    "reason": {
                        "type": "string",
                        "description": "Identifies the reason for which the player will be ban"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Identifies the comment for which the player will be ban"
                    },
                    "requestedScope": {
                        "enum": [
                            "LOGIN",
                            "SUBSCRIPTION",
                            "ALL",
                            "ANY"
                        ],
                        "type": "string",
                        "description": "Identifies the scope of the ban"
                    },
                    "bannedByBO": {
                        "type": "boolean"
                    }
                },
                "description": "Object representing a player's self exclusion info"
            },
            "DataAccuracyStatusDTO": {
                "type": "object",
                "properties": {
                    "accuracyConfirmationNeeded": {
                        "type": "boolean",
                        "description": "Specifies if player should confirm data accuracy",
                        "example": true
                    },
                    "lastDataAccuracyCheckTime": {
                        "type": "integer",
                        "description": "Last data accuracy check",
                        "format": "int64"
                    }
                },
                "description": "Represents data accuracy status information"
            },
            "DataAccuracyStatusChangeDTO": {
                "type": "object",
                "properties": {
                    "newDataAccuracyStatus": {
                        "enum": [
                            "ACCURATE",
                            "NOT_ACCURATE"
                        ],
                        "type": "string",
                        "description": "New data accuracy status"
                    }
                },
                "description": "Represents request to update accuracy status"
            },
            "PlayerDetailsDTO": {
                "type": "object",
                "properties": {
                    "personalInfo": {
                        "$ref": "#/components/schemas/PersonalInfoDTO"
                    },
                    "nonpublicPersonalInfo": {
                        "$ref": "#/components/schemas/NonpublicPersonalInfoDTO"
                    }
                },
                "description": "Player details"
            },
            "PlayerFavoriteDTO": {
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Favourite typology",
                        "example": "Game, Location"
                    },
                    "code": {
                        "type": "integer",
                        "description": "Favorite identifier. It could be gameId or locationId",
                        "format": "int64"
                    },
                    "name": {
                        "type": "string",
                        "description": "Favourite name"
                    },
                    "category": {
                        "type": "string",
                        "description": "Favourite category"
                    },
                    "categoryName": {
                        "type": "string",
                        "description": "Favourite category name"
                    },
                    "favoriteId": {
                        "type": "string",
                        "description": "Favourite identifier"
                    }
                },
                "description": "Object representing a player's favourite"
            },
            "PlayerFavoriteInfoDTO": {
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Favourite typology",
                        "example": "Game, Location"
                    },
                    "code": {
                        "type": "integer",
                        "description": "Favorite identifier. It could be gameId or locationId",
                        "format": "int64"
                    },
                    "name": {
                        "type": "string",
                        "description": "Favourite name"
                    },
                    "category": {
                        "type": "string",
                        "description": "Favourite category"
                    },
                    "categoryName": {
                        "type": "string",
                        "description": "Favourite category name"
                    }
                },
                "description": "Object representing a player's favourite"
            },
            "ProfileDTO": {
                "required": [
                    "language",
                    "nickName",
                    "preferredCurrency",
                    "registrationLevel",
                    "userName"
                ],
                "type": "object",
                "properties": {
                    "acceptsPromotionalEmail": {
                        "type": "boolean",
                        "description": "Indicates whether the user accepts promotional emails or not"
                    },
                    "language": {
                        "type": "string",
                        "description": "Language selected by the user"
                    },
                    "nickName": {
                        "type": "string",
                        "description": "User's nick name"
                    },
                    "registrationDate": {
                        "type": "integer",
                        "description": "User's registration date",
                        "format": "int64"
                    },
                    "acceptsRewards": {
                        "type": "boolean",
                        "description": "Indicates whether the user accepts rewards or not"
                    },
                    "preferredCurrency": {
                        "type": "string",
                        "description": "Player selected preferred currency"
                    },
                    "registrationLevel": {
                        "enum": [
                            null,
                            null,
                            null
                        ],
                        "type": "integer",
                        "description": "Player's registration level",
                        "format": "int64"
                    },
                    "userName": {
                        "type": "string",
                        "description": "Player's user name"
                    },
                    "playerHash": {
                        "type": "string",
                        "description": "Player's hash"
                    },
                    "preferredCommunicationChannel": {
                        "type": "string",
                        "description": "User's preferred communication channel"
                    },
                    "communicationPreferences": {
                        "$ref": "#/components/schemas/CommunicationPreferencesDTO"
                    },
                    "notificationPreferences": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/NotificationPreferencesDTO"
                        },
                        "description": "Player's notification preferences/subscriptions and parameters"
                    },
                    "affiliateId": {
                        "type": "string",
                        "description": "Id of the partner"
                    },
                    "geteInstantGamesEnabled": {
                        "type": "boolean",
                        "description": "Flag indicating if player is allowed to play EI games"
                    }
                },
                "description": "Represents one of the player's profile information"
            },
            "ParameterAvailabilityDTO": {
                "required": [
                    "available",
                    "type",
                    "value"
                ],
                "type": "object",
                "properties": {
                    "available": {
                        "type": "boolean",
                        "description": "availability of the required parameter"
                    },
                    "type": {
                        "type": "string",
                        "description": "type of the value to be checked",
                        "example": "EMAIL"
                    },
                    "value": {
                        "type": "string",
                        "description": "value of the parameter to be checked",
                        "example": "newemail@igt.com"
                    }
                },
                "description": "DTO to be used for input and output of the checkAvailability API"
            },
            "RegistrationDTO": {
                "required": [
                    "consents",
                    "nonpublicPersonalInfo",
                    "password",
                    "personalInfo",
                    "profile"
                ],
                "type": "object",
                "properties": {
                    "password": {
                        "type": "string",
                        "description": "Password",
                        "example": "***"
                    },
                    "personalInfo": {
                        "$ref": "#/components/schemas/PersonalInfoDTO"
                    },
                    "profile": {
                        "$ref": "#/components/schemas/ProfileDTO"
                    },
                    "nonpublicPersonalInfo": {
                        "$ref": "#/components/schemas/NonpublicPersonalInfoDTO"
                    },
                    "optIntoGeoCompliance": {
                        "type": "boolean",
                        "description": "Indicates if the user wants to opt into geo-compliance"
                    },
                    "promotions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/interactivePromotionDTO"
                        },
                        "description": "List of promotions to apply to registration"
                    },
                    "consents": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PlayerConsentDTO"
                        },
                        "description": "List containing the optional consents accepted/declined by the player while registering."
                    },
                    "verifications": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/VerificationDTO"
                        },
                        "description": "List of verifications that are applicable to player's account (kyc, email) i.e. registration was successful but KYC process might still be ongoing"
                    }
                },
                "description": "Player's registration object"
            },
            "VerificationDTO": {
                "required": [
                    "name",
                    "verificationStatuses"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Unique name of the player property",
                        "example": "kyc"
                    },
                    "verificationStatuses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/VerificationStatusDTO"
                        },
                        "description": "Player property verification results"
                    }
                },
                "description": "Represents verification results of a player parameter of name 'name'"
            },
            "VerificationStatusDTO": {
                "required": [
                    "status"
                ],
                "type": "object",
                "properties": {
                    "verificationProvider": {
                        "type": "string",
                        "description": "Verification provider name",
                        "example": "IDology"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status value, depends on verification provider and verified property",
                        "example": "VERIFIED"
                    },
                    "verificationMessages": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "description": "List of verification messages"
                        },
                        "description": "List of verification messages"
                    }
                },
                "description": "Represents verification status for a given verification provider"
            },
            "SelfExclusionRequestDTO": {
                "type": "object",
                "properties": {
                    "selfExclusionTime": {
                        "type": "integer",
                        "description": "A moment of time from which the user will be self-excluded",
                        "format": "int64",
                        "example": 1597449599000
                    },
                    "reason": {
                        "type": "string",
                        "description": "A reason for which the user is self-excluded",
                        "example": "Some reason"
                    }
                },
                "description": "An object representing request for performing self-exclusion operation"
            },
            "SelfExclusionResponseDTO": {
                "type": "object",
                "properties": {
                    "playerIsSelfExcluded": {
                        "type": "boolean",
                        "description": "A flag indicating if player is self-excluded",
                        "example": true
                    },
                    "selfExclusionTime": {
                        "type": "integer",
                        "description": "A moment of time until which the player is self excluded",
                        "format": "int64",
                        "example": 1597449599000
                    },
                    "reason": {
                        "type": "string",
                        "description": "A reason for which the player will be self-exluded ",
                        "example": "Some reason"
                    }
                }
            },
            "SessionLimitsDTO": {
                "type": "object",
                "properties": {
                    "singleSessionLimit": {
                        "type": "integer",
                        "description": "Single session limit",
                        "format": "int64"
                    },
                    "dailyLimit": {
                        "type": "integer",
                        "description": "Daily spend limit",
                        "format": "int64"
                    },
                    "weeklyLimit": {
                        "type": "integer",
                        "description": "Weekly spend limit",
                        "format": "int64"
                    },
                    "monthlyLimit": {
                        "type": "integer",
                        "description": "Monthly spend limit",
                        "format": "int64"
                    },
                    "maxSingleSessionLimit": {
                        "type": "integer",
                        "description": "Maximum value for single session limit",
                        "format": "int64"
                    },
                    "maxDailyLimit": {
                        "type": "integer",
                        "description": "Maximum value for daily limit",
                        "format": "int64"
                    },
                    "maxWeeklyLimit": {
                        "type": "integer",
                        "description": "Maximum value for weekly limit",
                        "format": "int64"
                    },
                    "maxMonthlyLimit": {
                        "type": "integer",
                        "description": "Maximum value for monthly limit",
                        "format": "int64"
                    }
                },
                "description": "Represents players spend limits settings"
            },
            "VerificationPageDTO": {
                "required": [
                    "nextItems",
                    "nextPageUrl",
                    "pageUrls",
                    "previousItems",
                    "previousPageUrl",
                    "verifications"
                ],
                "type": "object",
                "properties": {
                    "nextPageUrl": {
                        "type": "string",
                        "description": "URL indicating where the next page can be found"
                    },
                    "previousPageUrl": {
                        "type": "string",
                        "description": "URL indicating where the previous page can be found"
                    },
                    "pageUrls": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string",
                            "description": "Map of pages URLs accessed by the page number (to jump to selected page)"
                        },
                        "description": "Map of pages URLs accessed by the page number (to jump to selected page)"
                    },
                    "nextItems": {
                        "type": "integer",
                        "description": "Amount of items in the next pages",
                        "format": "int32"
                    },
                    "previousItems": {
                        "type": "integer",
                        "description": " Amount of items in the previous pages",
                        "format": "int32"
                    },
                    "verifications": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/VerificationDTO"
                        },
                        "description": "List of player verification statuses"
                    }
                },
                "description": "List of player notifications with paging"
            },
            "WalletTransactionDTO": {
                "type": "object",
                "properties": {
                    "actionTypeId": {
                        "enum": [
                            null
                        ],
                        "type": "integer",
                        "description": "ID used to understand if the transaction was a credit or debit",
                        "format": "int64",
                        "example": 2
                    },
                    "amount": {
                        "type": "integer",
                        "description": "Amount of money in the transaction based on the currency",
                        "format": "int64",
                        "example": 101100000
                    },
                    "channelId": {
                        "type": "integer",
                        "description": "The ID for identifying the channel used by the client",
                        "format": "int64",
                        "example": 1
                    },
                    "currency": {
                        "type": "string",
                        "description": "The currency of the transaction",
                        "example": "USD"
                    },
                    "date": {
                        "type": "integer",
                        "description": "The transaction UTC date in millis",
                        "format": "int64",
                        "example": 1589893792133
                    },
                    "externalPlatformId": {
                        "type": "string",
                        "description": "The ID used for identifying the transaction in the external platform",
                        "example": "0bddf718-4ecd-4487-8e3a-1aaa4b48ce7e"
                    },
                    "externalTransactionId": {
                        "type": "string",
                        "description": "The ID used for identifying the external transaction",
                        "example": "0bddf718-4ecd-4487-8e3a-1aaa4b48ce7e"
                    },
                    "note": {
                        "type": "string",
                        "description": "Comment for the transaction, additional information",
                        "example": "Purchase on Game"
                    },
                    "operationId": {
                        "type": "integer",
                        "description": "The operation ID used by this transaction",
                        "format": "int64",
                        "example": 402
                    },
                    "operationTypeId": {
                        "enum": [
                            null
                        ],
                        "type": "integer",
                        "description": "The ID used to identify the category of the transaction",
                        "format": "int64",
                        "example": 3
                    },
                    "description": {
                        "type": "string",
                        "description": "Human readable description associated to the transaction",
                        "example": "Generic game debit reservation"
                    },
                    "phaseId": {
                        "enum": [
                            null
                        ],
                        "type": "integer",
                        "description": "The phase of the transaction",
                        "format": "int64",
                        "example": 1
                    }
                },
                "description": "Object representing a Wallet transaction"
            },
            "WalletTransactionPageDTO": {
                "type": "object",
                "properties": {
                    "totalCount": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "pageNumber": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "pageSize": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "walletTransactionList": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/WalletTransactionDTO"
                        }
                    }
                }
            },
            "RegisterDTO": {
                "required": [
                    "pushId",
                    "pushIdType",
                    "status"
                ],
                "type": "object",
                "properties": {
                    "status": {
                        "enum": [
                            "ACCEPTED",
                            "REJECTED"
                        ],
                        "type": "string",
                        "description": "The result of the request"
                    },
                    "rejectReason": {
                        "type": "string",
                        "description": "Reason request was rejected"
                    },
                    "pushId": {
                        "type": "string",
                        "description": "Apple or Google push id",
                        "example": "b3851356-fa20-4a1f-a14f-2ba8d9dcc761"
                    },
                    "pushIdType": {
                        "type": "string",
                        "description": "Push id type such as Apple or Google",
                        "example": "ANDROID"
                    }
                },
                "description": "Represents push id registered in notifications system"
            },
            "PushPromotionDTO": {
                "required": [
                    "promoId",
                    "status"
                ],
                "type": "object",
                "properties": {
                    "status": {
                        "enum": [
                            "ACCEPTED",
                            "REJECTED"
                        ],
                        "type": "string",
                        "description": "The result of the request"
                    },
                    "rejectReason": {
                        "type": "string",
                        "description": "Reason request was rejected"
                    },
                    "promoId": {
                        "type": "string",
                        "description": "Promotion location identifier"
                    }
                },
                "description": "Represents push for specific promotion"
            },
            "PushLocationDTO": {
                "required": [
                    "origin",
                    "status"
                ],
                "type": "object",
                "properties": {
                    "status": {
                        "enum": [
                            "ACCEPTED",
                            "REJECTED"
                        ],
                        "type": "string",
                        "description": "The result of the request"
                    },
                    "rejectReason": {
                        "type": "string",
                        "description": "Reason request was rejected"
                    },
                    "origin": {
                        "type": "string",
                        "description": "Comma separated latitude and longitude in decimal degrees",
                        "example": "40.712800,-74.005900"
                    }
                },
                "description": "Represents push for all promotions that are active at specific location"
            },
            "PromotionLocationDTO": {
                "type": "object",
                "properties": {
                    "origin": {
                        "type": "string"
                    },
                    "locationId": {
                        "type": "string"
                    },
                    "promoName": {
                        "type": "string"
                    },
                    "promoText": {
                        "type": "string"
                    },
                    "pushEligible": {
                        "type": "boolean"
                    }
                },
                "description": "List of promotions"
            },
            "PromotionLocationPageDTO": {
                "required": [
                    "nextItems",
                    "nextPageUrl",
                    "pageUrls",
                    "previousItems",
                    "previousPageUrl",
                    "promotions"
                ],
                "type": "object",
                "properties": {
                    "promotions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PromotionLocationDTO"
                        },
                        "description": "List of promotions"
                    },
                    "nextPageUrl": {
                        "type": "string",
                        "description": "URL indicating where the next page can be found"
                    },
                    "previousPageUrl": {
                        "type": "string",
                        "description": "URL indicating where the previous page can be found"
                    },
                    "pageUrls": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string",
                            "description": "Map of pages URLs accessed by the page number (to jump to selected page)"
                        },
                        "description": "Map of pages URLs accessed by the page number (to jump to selected page)"
                    },
                    "nextItems": {
                        "type": "integer",
                        "description": "Amount of items in the next pages",
                        "format": "int32"
                    },
                    "previousItems": {
                        "type": "integer",
                        "description": " Amount of items in the previous pages",
                        "format": "int32"
                    }
                },
                "description": "Container for push id notifications api response, including paging data"
            },
            "BonusBagDTO": {
                "type": "object",
                "properties": {
                    "bagId": {
                        "type": "integer",
                        "description": "The unique bag identifier",
                        "format": "int64"
                    },
                    "name": {
                        "type": "string",
                        "description": "The bag name"
                    },
                    "description": {
                        "type": "string",
                        "description": "The bag description"
                    },
                    "currencyCode": {
                        "type": "string",
                        "description": "The currency code for the amount"
                    },
                    "amount": {
                        "type": "integer",
                        "description": "The original amount assigned for the bag",
                        "format": "int64"
                    },
                    "reaminingAmount": {
                        "type": "integer",
                        "description": "The remaining amount for the bag",
                        "format": "int64"
                    },
                    "winningAmount": {
                        "type": "integer",
                        "description": "The amount available in the winning pocket for the bag",
                        "format": "int64"
                    },
                    "wageringRequirementType": {
                        "type": "string",
                        "description": "The wagering requirement type"
                    },
                    "originalWageringRequirementAmount": {
                        "type": "integer",
                        "description": "The requested amount to fulfil in order to reach the wagering qualifying requirement when the bag was assigned",
                        "format": "int64"
                    },
                    "wageringRequirementAmount": {
                        "type": "integer",
                        "description": "The remaining amount to fulfil in order to reach the wagering qualifying requirement",
                        "format": "int64"
                    },
                    "conversionRequirementType": {
                        "type": "string",
                        "description": "The conversion requirement type"
                    },
                    "originalConversionRequirementAmount": {
                        "type": "integer",
                        "description": "The requested amount to fulfil in order to reach the conversion qualifying requirement when the bag was assigned",
                        "format": "int64"
                    },
                    "conversionRequirementAmount": {
                        "type": "integer",
                        "description": "The remaining amount to fulfil in order to reach the conversion qualifying requirement",
                        "format": "int64"
                    },
                    "optInRequired": {
                        "type": "boolean",
                        "description": "Indentifies if the bag requires the explicit acceptance by opt-in action"
                    },
                    "usableForGamePlay": {
                        "type": "boolean",
                        "description": "Identifies if the bag is usable for playing games"
                    },
                    "expirationDateType": {
                        "type": "string",
                        "description": "The expiration date type"
                    },
                    "expirationDate": {
                        "type": "integer",
                        "description": "The bag expiration date, milliseconds from 01-01-1970 00:00:00.000. ",
                        "format": "int64"
                    },
                    "dinamycDuration": {
                        "type": "integer",
                        "description": "The number of days the bag is valid",
                        "format": "int64"
                    },
                    "convertedAmount": {
                        "type": "integer",
                        "description": "The amount converted",
                        "format": "int64"
                    },
                    "conversionDate": {
                        "type": "integer",
                        "description": "The date when the last amount conversion happened",
                        "format": "int64"
                    },
                    "acceptanceDate": {
                        "type": "integer",
                        "description": "The date when the bag was accepted if the bag required the player's opt-in",
                        "format": "int64"
                    },
                    "statusDescription": {
                        "type": "string",
                        "description": "The bag status description"
                    },
                    "statusID": {
                        "type": "integer",
                        "description": "The bag status Identify",
                        "format": "int32"
                    }
                }
            },
            "BonusBagDetailDTO": {
                "type": "object",
                "properties": {
                    "bagId": {
                        "type": "integer",
                        "description": "The unique bag identifier",
                        "format": "int64"
                    },
                    "name": {
                        "type": "string",
                        "description": "The bag name"
                    },
                    "description": {
                        "type": "string",
                        "description": "The bag description"
                    },
                    "currencyCode": {
                        "type": "string",
                        "description": "The currency code for the amount"
                    },
                    "amount": {
                        "type": "integer",
                        "description": "The original amount assigned for the bag",
                        "format": "int64"
                    },
                    "reaminingAmount": {
                        "type": "integer",
                        "description": "The remaining amount for the bag",
                        "format": "int64"
                    },
                    "winningAmount": {
                        "type": "integer",
                        "description": "The amount available in the winning pocket for the bag",
                        "format": "int64"
                    },
                    "wageringRequirementType": {
                        "type": "string",
                        "description": "The wagering requirement type"
                    },
                    "originalWageringRequirementAmount": {
                        "type": "integer",
                        "description": "The requested amount to fulfil in order to reach the wagering qualifying requirement when the bag was assigned",
                        "format": "int64"
                    },
                    "wageringRequirementAmount": {
                        "type": "integer",
                        "description": "The remaining amount to fulfil in order to reach the wagering qualifying requirement",
                        "format": "int64"
                    },
                    "conversionRequirementType": {
                        "type": "string",
                        "description": "The conversion requirement type"
                    },
                    "originalConversionRequirementAmount": {
                        "type": "integer",
                        "description": "The requested amount to fulfil in order to reach the conversion qualifying requirement when the bag was assigned",
                        "format": "int64"
                    },
                    "conversionRequirementAmount": {
                        "type": "integer",
                        "description": "The remaining amount to fulfil in order to reach the conversion qualifying requirement",
                        "format": "int64"
                    },
                    "optInRequired": {
                        "type": "boolean",
                        "description": "Indentifies if the bag requires the explicit acceptance by opt-in action"
                    },
                    "usableForGamePlay": {
                        "type": "boolean",
                        "description": "Identifies if the bag is usable for playing games"
                    },
                    "expirationDateType": {
                        "type": "string",
                        "description": "The expiration date type"
                    },
                    "expirationDate": {
                        "type": "integer",
                        "description": "The bag expiration date, milliseconds from 01-01-1970 00:00:00.000. ",
                        "format": "int64"
                    },
                    "dinamycDuration": {
                        "type": "integer",
                        "description": "The number of days the bag is valid",
                        "format": "int64"
                    },
                    "convertedAmount": {
                        "type": "integer",
                        "description": "The amount converted",
                        "format": "int64"
                    },
                    "conversionDate": {
                        "type": "integer",
                        "description": "The date when the last amount conversion happened",
                        "format": "int64"
                    },
                    "acceptanceDate": {
                        "type": "integer",
                        "description": "The date when the bag was accepted if the bag required the player's opt-in",
                        "format": "int64"
                    },
                    "statusDescription": {
                        "type": "string",
                        "description": "The bag status description"
                    },
                    "statusID": {
                        "type": "integer",
                        "description": "The bag status Identify",
                        "format": "int32"
                    },
                    "priority": {
                        "type": "integer",
                        "description": "The bag priority",
                        "format": "int64"
                    },
                    "convertedAmountPocket": {
                        "type": "string",
                        "description": "The pocket type where the bag amount is converted once the conversion requirement is met"
                    },
                    "usableOnGamePlatforms": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "description": "The list of game platforms where the bag amount can be spent"
                        },
                        "description": "The list of game platforms where the bag amount can be spent"
                    },
                    "usableOnGameFamilies": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "description": "The list of game families where the bag amount can be spent"
                        },
                        "description": "The list of game families where the bag amount can be spent"
                    },
                    "usableOnGames": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "description": "The list of games where the bag amount can be spent"
                        },
                        "description": "The list of games where the bag amount can be spent"
                    },
                    "qualifyingGamePlatforms": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "description": "List of game platform useful for fulfilling the wagering and conversion requirement amount"
                        },
                        "description": "List of game platform useful for fulfilling the wagering and conversion requirement amount"
                    },
                    "qualifyingGameFamilies": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "description": "List of game families useful for fulfilling the wagering and conversion requirement amount"
                        },
                        "description": "List of game families useful for fulfilling the wagering and conversion requirement amount"
                    },
                    "qualifyingGames": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "description": "List of games useful for fulfilling the wagering and conversion requirement amount"
                        },
                        "description": "List of games useful for fulfilling the wagering and conversion requirement amount"
                    },
                    "forEachWageredAmount": {
                        "type": "integer",
                        "description": "Used for the conversion step amount.",
                        "format": "int64"
                    },
                    "forEachAmountConverted": {
                        "type": "integer",
                        "description": "the following amount is converted once the forEachWageredAmount is fulfilled",
                        "format": "int64"
                    },
                    "redeemable": {
                        "type": "boolean",
                        "description": "Identifier if the remainingAmount is converted once the converion requirement is met otherwise only the winningAmount is converted"
                    }
                }
            },
            "CmdPromotionDTO": {
                "type": "object",
                "properties": {
                    "promotionId": {
                        "type": "integer",
                        "description": "The unique promotion identifier",
                        "format": "int64"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the promotion"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the promotion"
                    },
                    "startDate": {
                        "type": "integer",
                        "description": "Date and time when the promotion start, milliseconds from 01-01-1970 00:00:00.000.",
                        "format": "int64"
                    },
                    "endDate": {
                        "type": "integer",
                        "description": "Date and time when the promotion ends, milliseconds from 01-01-1970 00:00:00.000. It can be empty if the promotion has not expiration date",
                        "format": "int64"
                    },
                    "optInType": {
                        "enum": [
                            "PROMO_CODE",
                            "CLICK",
                            "NONE"
                        ],
                        "type": "string",
                        "description": "The opt-in type for the promotion"
                    },
                    "percentageOfCompletion": {
                        "type": "number",
                        "description": "The reached percentage of completion useful for receiving the prize (0-100).",
                        "format": "float"
                    },
                    "depleted": {
                        "type": "boolean",
                        "description": "Indicates if the promotion is still available for the player"
                    },
                    "subscription": {
                        "$ref": "#/components/schemas/CmdPromotionSubscriptionDTO"
                    },
                    "receivedPrizes": {
                        "type": "integer",
                        "description": "Number of received prizes for the promotion",
                        "format": "int32"
                    }
                }
            },
            "CmdPromotionSubscriptionDTO": {
                "type": "object",
                "properties": {
                    "promotionId": {
                        "type": "integer",
                        "description": "Unique promotion identifier",
                        "format": "int64"
                    },
                    "promoCode": {
                        "type": "string",
                        "description": "Promo code identifier. It can be empty if promotion optInType is NONE or CLICK"
                    },
                    "subscriptionDate": {
                        "type": "integer",
                        "description": "Subscription date , milliseconds from 01-01-1970 00:00:00.000.",
                        "format": "int64"
                    },
                    "status": {
                        "enum": [
                            "RESERVED",
                            "CONFIRMED",
                            "VOIDED"
                        ],
                        "type": "string",
                        "description": "The subscription status"
                    }
                },
                "description": "Contains information about the campaign player's subscription. It is empty if the player is not subscribed or if the campaign does not require any subscription (optInType=NONE) "
            },
            "RewardDTO": {
                "type": "object",
                "properties": {
                    "rewardType": {
                        "type": "string",
                        "description": "The reward type"
                    },
                    "amount": {
                        "type": "integer",
                        "description": "The awarded amount",
                        "format": "int64"
                    },
                    "rewardDate": {
                        "type": "integer",
                        "description": "Date and time when the prize was awarded, milliseconds from 01-01-1970 00:00:00.000.",
                        "format": "int64"
                    },
                    "currencyPrecision": {
                        "type": "integer",
                        "description": "The currency precision. The amount should be divided by this value for obtaining the correct amount",
                        "format": "int64"
                    },
                    "currencyCode": {
                        "type": "string",
                        "description": "The currency code which the amount refer to"
                    }
                }
            },
            "ActionReasonDTO": {
                "type": "object",
                "properties": {
                    "actionId": {
                        "type": "string",
                        "description": "Action identifier"
                    },
                    "reasonId": {
                        "type": "string",
                        "description": "Reason identifier"
                    },
                    "reasonDescription": {
                        "type": "string",
                        "description": "Reason description"
                    }
                },
                "description": "Object representing a reason"
            },
            "SubmissionDTO": {
                "required": [
                    "webCode"
                ],
                "type": "object",
                "properties": {
                    "webCode": {
                        "type": "string",
                        "description": "Code submitted by a player",
                        "example": "3WKF-ZT%V%-SB46"
                    },
                    "type": {
                        "type": "string",
                        "description": "Submission type (draw games web code, instants web code, etc.)",
                        "example": "INSTANT"
                    },
                    "forwardingState": {
                        "enum": [
                            "ENTERED",
                            "PENDING",
                            "UNKNOWN",
                            "SUBMITTED",
                            "PARTIALLY_SUBMITTED"
                        ],
                        "type": "string",
                        "description": "Submission forwarding state, describes if a given code was passed/is being passed to target systems, check"
                    },
                    "submissionStatuses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/SubmissionStatusDTO"
                        },
                        "description": "Submission forwarding status in target systems"
                    },
                    "created": {
                        "type": "integer",
                        "description": "Created date, UTC timestamp",
                        "format": "int64",
                        "example": 1581526952747
                    },
                    "updated": {
                        "type": "integer",
                        "description": "Updated date, UTC timestamp",
                        "format": "int64",
                        "example": 1581526952747
                    }
                },
                "description": "Submission object"
            },
            "SubmissionPageDTO": {
                "type": "object",
                "properties": {
                    "totalCount": {
                        "type": "integer",
                        "description": "Total number of submissions",
                        "format": "int64"
                    },
                    "pageSize": {
                        "type": "integer",
                        "description": "Amount of items per page",
                        "format": "int32"
                    },
                    "pageNumber": {
                        "type": "integer",
                        "description": "Page number",
                        "format": "int32"
                    },
                    "submissions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/SubmissionDTO"
                        },
                        "description": "List of submissions"
                    }
                },
                "description": "Submissions list, including paging data"
            },
            "SubmissionStatusDTO": {
                "type": "object",
                "properties": {
                    "targetSystemName": {
                        "type": "string",
                        "description": "Name of target system",
                        "example": "LOYALTY"
                    },
                    "status": {
                        "enum": [
                            "SUBMITTED",
                            "VALID",
                            "DUPLICATE",
                            "INVALID"
                        ],
                        "type": "string",
                        "description": "Submission status in a given target system"
                    },
                    "submissionDate": {
                        "type": "integer",
                        "description": "Target system submission date (UTC timestamp)",
                        "format": "int64",
                        "example": 1581526952747
                    }
                },
                "description": "Submission status object"
            },
            "interactiveBetTypeDTO": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "groupId": {
                        "type": "string"
                    },
                    "primarySelectionsRules": {
                        "$ref": "#/components/schemas/interactiveBetTypeSelectionsRulesDTO"
                    },
                    "secondarySelectionsRules": {
                        "$ref": "#/components/schemas/interactiveBetTypeSelectionsRulesDTO"
                    },
                    "tertiarySelectionsRules": {
                        "$ref": "#/components/schemas/interactiveBetTypeSelectionsRulesDTO"
                    },
                    "combinations": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "boardsAllowed": {
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                }
            },
            "interactiveBetTypeSelectionsRulesDTO": {
                "type": "object",
                "properties": {
                    "numberOfSelections": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "numberOfUniqueSelections": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "maxSameSelections": {
                        "type": "integer",
                        "format": "int32"
                    }
                }
            },
            "interactiveDrawDTO": {
                "type": "object",
                "properties": {
                    "gameName": {
                        "type": "string"
                    },
                    "brandName": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "drawDay": {
                        "type": "array",
                        "items": {
                            "enum": [
                                "MONDAY",
                                "TUESDAY",
                                "WEDNESDAY",
                                "THURSDAY",
                                "FRIDAY",
                                "SATURDAY",
                                "SUNDAY"
                            ],
                            "type": "string"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "status": {
                        "enum": [
                            "OPEN",
                            "CLOSED",
                            "RESULTS_AVAILABLE",
                            "PAYABLE",
                            "FUTURE",
                            "CANCELLED",
                            "NO_MORE_DRAWS",
                            "INVALID"
                        ],
                        "type": "string"
                    },
                    "drawCdc": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "openTime": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "closeTime": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "drawTime": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "wagerAvailable": {
                        "type": "boolean"
                    },
                    "wagerCloseTime": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "cancelAvailable": {
                        "type": "boolean"
                    },
                    "cancelCloseTime": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "breakEndTime": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "protestPeriodEndTime": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "resultsAvailableTime": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "totalSales": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "totalWagersSold": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "additionalPrizeTierTotalSales": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "gameRuleSet": {
                        "$ref": "#/components/schemas/interactiveGameRuleSetDTO"
                    },
                    "predefinedGameRuleSets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/interactiveGameRuleSetDTO"
                        }
                    },
                    "addonDraws": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/interactiveDrawDTO"
                        }
                    },
                    "estimatedJackpot": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "jackpotDescription": {
                        "type": "string"
                    },
                    "rollover": {
                        "type": "boolean"
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/interactiveResultDTO"
                        }
                    },
                    "prizeTiers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/interactivePrizeTierDTO"
                        }
                    },
                    "resultStatistics": {
                        "$ref": "#/components/schemas/interactiveResultStatisticsDTO"
                    },
                    "statistics": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/interactiveResultStatisticsDTO"
                        }
                    },
                    "subscriptionAvailable": {
                        "type": "boolean"
                    },
                    "jackpots": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/interactiveJackpotDTO"
                        }
                    },
                    "popularBoards": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/interactivePopularBoardDTO"
                        }
                    },
                    "lastRaffleSold": {
                        "type": "string"
                    }
                },
                "description": "List of draws, ticket is placed for"
            },
            "interactiveGameRuleSetDTO": {
                "type": "object",
                "properties": {
                    "status": {
                        "enum": [
                            "ACCEPTED",
                            "REJECTED"
                        ],
                        "type": "string"
                    },
                    "rejectReason": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "basePrice": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "minPrice": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "maxPrice": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "minBoards": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "maxBoards": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "defaultBoards": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "additionalPrizeTierAvailable": {
                        "type": "boolean"
                    },
                    "additionalPrizeTierPrice": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "minPrimarySelections": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "minSecondarySelections": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "minTertiarySelections": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "maxPrimarySelections": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "maxSecondarySelections": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "maxTertiarySelections": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "defaultNumberOfSelections": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "quickPickAvailable": {
                        "type": "boolean"
                    },
                    "partialQuickPickAvailable": {
                        "type": "boolean"
                    },
                    "multiplierAvailable": {
                        "type": "boolean"
                    },
                    "multiplierPrice": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "multipliers": {
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    "stakes": {
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    "stakeInterval": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "minStake": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "maxStake": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "defaultStake": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "durations": {
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    "maxDuration": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "defaultDuration": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "minSystemLevel": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "maxSystemLevel": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "systemLevels": {
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    "primarySelectionsLowNumber": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "primarySelectionsHighNumber": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "primarySelectionsAllowed": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "secondarySelectionsLowNumber": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "secondarySelectionsHighNumber": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "secondarySelectionsAllowed": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "tertiarySelectionsLowNumber": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "tertiarySelectionsHighNumber": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "tertiarySelectionsAllowed": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "prizeTierDescriptions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/interactivePrizeTierDescriptionDTO"
                        }
                    },
                    "gameId": {
                        "type": "string"
                    },
                    "subscriptionRules": {
                        "$ref": "#/components/schemas/interactiveSubscriptionRuleSetDTO"
                    },
                    "promotions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/interactivePromotionDTO"
                        }
                    },
                    "revision": {
                        "type": "string"
                    },
                    "ticketMessage": {
                        "type": "string"
                    },
                    "basePointsPrice": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "betTypes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/interactiveBetTypeDTO"
                        }
                    },
                    "systemBetTypes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/interactiveSystemBetTypeDTO"
                        }
                    },
                    "defaultBetType": {
                        "type": "string"
                    },
                    "drawNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "selectionDescriptions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/interactiveSelectionDescriptionDTO"
                        }
                    },
                    "addonAvailable": {
                        "type": "boolean"
                    },
                    "grids": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/interactiveGridDTO"
                        }
                    },
                    "syndicates": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/interactiveSyndicateDTO"
                        }
                    },
                    "addonGames": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/interactiveGameRuleSetDTO"
                        }
                    },
                    "maxMultiPlay": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "defaultMultiPlay": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "fractions": {
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    "fractionMaxPrice": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "fractionMinPrice": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "confirmDurationThreshold": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "confirmWagerThreshold": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "reenterGame": {
                        "type": "boolean"
                    },
                    "perBoardsWagered": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/interactivePerBoardsWageredDTO"
                        }
                    },
                    "fractionFullSystemBetAllowed": {
                        "type": "boolean"
                    },
                    "fractionReducedSystemBetAllowed": {
                        "type": "boolean"
                    },
                    "fractionSimpleBetAllowed": {
                        "type": "boolean"
                    },
                    "fractionQuickPickAllowed": {
                        "type": "boolean"
                    },
                    "fractionManualEntryAllowed": {
                        "type": "boolean"
                    },
                    "fractionDurationsAllowed": {
                        "type": "boolean"
                    },
                    "delaysAllowed": {
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    "ticketCommissionRules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TicketCommissionRuleDTO"
                        }
                    },
                    "doublePlayAvailable": {
                        "type": "boolean"
                    },
                    "doublePlayPrice": {
                        "type": "integer",
                        "format": "int64"
                    }
                }
            },
            "interactiveGridDTO": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "stake": {
                        "type": "integer",
                        "format": "int64"
                    }
                }
            },
            "interactiveJackpotDTO": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "amount": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "cashAmount": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "description": {
                        "type": "string"
                    },
                    "drawId": {
                        "type": "string"
                    },
                    "drawTime": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "jackpotGuaranteed": {
                        "type": "boolean"
                    },
                    "legalMentionNeeded": {
                        "type": "boolean"
                    }
                }
            },
            "interactiveLocationDTO": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    }
                }
            },
            "interactivePayoutDTO": {
                "type": "object",
                "properties": {
                    "stake": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "payout": {
                        "type": "integer",
                        "format": "int64"
                    }
                }
            },
            "interactivePerBoardsWageredDTO": {
                "type": "object",
                "properties": {
                    "numberOfBoards": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "price": {
                        "type": "integer",
                        "format": "int64"
                    }
                }
            },
            "interactivePopularBoardDTO": {
                "type": "object",
                "properties": {
                    "primarySelections": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "secondarySelections": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "stake": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "expectedPayout": {
                        "type": "integer",
                        "format": "int64"
                    }
                }
            },
            "interactivePrizeTierDTO": {
                "type": "object",
                "properties": {
                    "shareCount": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "shareAmount": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "totalAmount": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "multiplierShareCount": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "multiplierShareAmount": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "multiplierTotalAmount": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "discountShareCount": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "discountShareAmount": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "discountTotalAmount": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "name": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "prizeType": {
                        "enum": [
                            "PARAMUTUEL",
                            "FIXED",
                            "FIXED_AND_PARAMUTUEL",
                            "FREE_TICKET",
                            "MERCHANDISE"
                        ],
                        "type": "string"
                    },
                    "additionalPrizeTier": {
                        "type": "boolean"
                    },
                    "multiplier": {
                        "type": "boolean"
                    },
                    "drawType": {
                        "type": "string"
                    },
                    "percentage": {
                        "type": "string"
                    },
                    "soldLocations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/interactiveLocationDTO"
                        }
                    },
                    "globalShareCount": {
                        "type": "integer",
                        "format": "int64"
                    }
                }
            },
            "interactivePrizeTierDescriptionDTO": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "numberOfSelections": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "numberOfMatchingSelections": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "multiplier": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "payouts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/interactivePayoutDTO"
                        }
                    },
                    "drawType": {
                        "type": "string"
                    },
                    "numberOfPrimarySelections": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "numberOfMatchingPrimarySelections": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "numberOfSecondarySelections": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "numberOfMatchingSecondarySelections": {
                        "type": "integer",
                        "format": "int32"
                    }
                }
            },
            "interactiveResultDTO": {
                "type": "object",
                "properties": {
                    "primary": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "secondary": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "tertiary": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "multiplier": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "primaryRevealOrder": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "secondaryRevealOrder": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "tertiaryRevealOrder": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "drawType": {
                        "type": "string"
                    },
                    "prizeTierId": {
                        "type": "string"
                    }
                }
            },
            "interactiveResultStatisticDTO": {
                "type": "object",
                "properties": {
                    "result": {
                        "type": "string"
                    },
                    "frequency": {
                        "type": "number",
                        "format": "double"
                    },
                    "lastWinningDrawId": {
                        "type": "string"
                    },
                    "lastWinningDrawDate": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "numberOfTimesDrawn": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "notDrawnSince": {
                        "type": "integer",
                        "format": "int32"
                    }
                }
            },
            "interactiveResultStatisticsDTO": {
                "type": "object",
                "properties": {
                    "gameName": {
                        "type": "string"
                    },
                    "period": {
                        "type": "string"
                    },
                    "periodStartTime": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "periodEndTime": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "mostDrawnResults": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "leastDrawnResults": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "statistics": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/interactiveResultStatisticDTO"
                        }
                    },
                    "drawCount": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "selectionType": {
                        "type": "string"
                    },
                    "topWinnings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/WinningDTO"
                        }
                    },
                    "topJackpots": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/interactiveJackpotDTO"
                        }
                    }
                }
            },
            "interactiveSelectionDescriptionDTO": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    }
                }
            },
            "interactiveSubscriptionRuleSetDTO": {
                "type": "object",
                "properties": {
                    "durations": {
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    "minDuration": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "maxDuration": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "durationUnit": {
                        "enum": [
                            "DAYS",
                            "WEEKS",
                            "DRAWS"
                        ],
                        "type": "string"
                    },
                    "minAdvancedDraw": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "maxAdvancedDraw": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "fee": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "discountAmount": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "discountType": {
                        "enum": [
                            "FIXED",
                            "PER_BOARD"
                        ],
                        "type": "string"
                    }
                }
            },
            "interactiveSystemBetTypeDTO": {
                "type": "object",
                "properties": {
                    "boardsAllowed": {
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    "combinations": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "picks": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "secondaryPicks": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "tertiaryPicks": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    }
                }
            },
            "TicketCommissionRuleDTO": {
                "type": "object",
                "properties": {
                    "betType": {
                        "type": "string"
                    },
                    "minDuration": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "maxDuration": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "minBoards": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "maxBoards": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "amount": {
                        "type": "integer",
                        "format": "int64"
                    }
                }
            },
            "TicketInfoDTO": {
                "type": "object",
                "properties": {
                    "ticketType": {
                        "enum": [
                            "PAPER",
                            "DIGITAL"
                        ],
                        "type": "string",
                        "description": "Type of the ticket"
                    },
                    "draws": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/interactiveDrawDTO"
                        },
                        "description": "List of draws, ticket is placed for"
                    },
                    "winnings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/WinningDTO"
                        },
                        "description": "List of all the winnings"
                    },
                    "wager": {
                        "$ref": "#/components/schemas/interactiveWagerDTO"
                    },
                    "sentToSecondChance": {
                        "type": "boolean",
                        "description": "Flag indicating whether the ticket is eligible for 2cd play"
                    },
                    "created": {
                        "type": "integer",
                        "description": "Created date, UTC timestamp",
                        "format": "int64",
                        "example": 1581526952747
                    }
                },
                "description": "Represents ticket"
            },
            "WinningDTO": {
                "type": "object",
                "properties": {
                    "gameName": {
                        "type": "string"
                    },
                    "drawId": {
                        "type": "string"
                    },
                    "drawTime": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "amount": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "drawType": {
                        "type": "string"
                    },
                    "status": {
                        "enum": [
                            "UNKNOWN",
                            "PROTEST_PERIOD",
                            "AFTER_PROTEST_PERIOD",
                            "PAYABLE"
                        ],
                        "type": "string"
                    },
                    "payableDate": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "bankAccount": {
                        "type": "string"
                    },
                    "paymentType": {
                        "type": "string"
                    },
                    "prizes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/interactivePrizeDTO"
                        }
                    },
                    "distance": {
                        "type": "integer",
                        "format": "int64"
                    }
                },
                "description": "List of all the winnings"
            },
            "TicketInfoPageDTO": {
                "type": "object",
                "properties": {
                    "nextPageUrl": {
                        "type": "string",
                        "description": "URL to get the next page of the paginated results"
                    },
                    "previousPageUrl": {
                        "type": "string",
                        "description": "URL to get the previous page of the paginated results"
                    },
                    "pageUrls": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string",
                            "description": "page number - page URL mapping to jump to selected page"
                        },
                        "description": "page number - page URL mapping to jump to selected page"
                    },
                    "nextItems": {
                        "type": "integer",
                        "description": "Total amount of items contained in the next pages",
                        "format": "int32"
                    },
                    "previousItems": {
                        "type": "integer",
                        "description": "Total amount of items contained in the previous pages",
                        "format": "int32"
                    },
                    "tickets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TicketInfoDTO"
                        },
                        "description": " List of ticket info"
                    }
                },
                "description": "Container for tickets, including paging data"
            },
            "ClaimsTransactionDetailsDTO": {
                "required": [
                    "claimAmount",
                    "claimDate",
                    "claimNetAmount",
                    "claimSource",
                    "claimStatus",
                    "drawNumber"
                ],
                "type": "object",
                "properties": {
                    "claimDate": {
                        "type": "integer",
                        "description": "UTC timestamp of of a claim",
                        "format": "int64"
                    },
                    "claimAmount": {
                        "type": "number",
                        "description": "Claim amount after taxes"
                    },
                    "claimNetAmount": {
                        "type": "number",
                        "description": "claimNetAmount before taxes"
                    },
                    "claimStatus": {
                        "enum": [
                            "PENDING",
                            "CREATED",
                            "PAID",
                            "ON_HOLD",
                            "CANCELLED",
                            "TRANSFERRED",
                            "SPLIT"
                        ],
                        "type": "string",
                        "description": "Possible claim summary transaction statuses"
                    },
                    "claimSource": {
                        "type": "string",
                        "description": "Source of a claim"
                    },
                    "drawNumber": {
                        "type": "integer",
                        "description": "NUmber of draw related with a claim",
                        "format": "int32"
                    }
                },
                "description": "Represents claim summary specific data",
                "nullable": true
            },
            "FreeTicketDTO": {
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string"
                    }
                },
                "description": "Indicates if ticket related with a transaction is free",
                "default": "null"
            },
            "GameTransactionDTO": {
                "required": [
                    "transactionTimeUTC"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Unique, internal identifier set by transaction provider"
                    },
                    "globalTransactionId": {
                        "type": "string",
                        "description": "Identifier that joins related items like wagers from cart, subscriptions or package, wagers and validations, wagers and claims, validations with bonus tickets, etc."
                    },
                    "correlationId": {
                        "type": "string",
                        "description": "Identifier used for linking transaction feature. Is same for WAGER and its VALIDATIONS, CANCELLATION etc."
                    },
                    "transactionTimeUTC": {
                        "type": "integer",
                        "description": "Transaction timestamp in UTC",
                        "format": "int64"
                    },
                    "type": {
                        "enum": [
                            "WAGER",
                            "CLAIM",
                            "VALIDATION"
                        ],
                        "type": "string",
                        "description": "Possible game transaction types"
                    },
                    "body": {
                        "type": "string",
                        "description": "Full transaction body (optional if list of transactions is returned)",
                        "nullable": true,
                        "example": "<balanceTransaction> ... </balanceTransaction>"
                    },
                    "linkedTransactions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/GameTransactionDTO"
                        },
                        "description": "Transaction related by correlationId"
                    },
                    "wagerTransactionDetails": {
                        "$ref": "#/components/schemas/WagerTransactionDetailsDTO"
                    },
                    "claimsTransactionDetails": {
                        "$ref": "#/components/schemas/ClaimsTransactionDetailsDTO"
                    },
                    "validationTransactionDetails": {
                        "$ref": "#/components/schemas/ValidationTransactionDetailsDTO"
                    }
                },
                "description": "Container for player game transactions"
            },
            "ValidationTransactionDetailsDTO": {
                "required": [
                    "drawNumber",
                    "prizeTier",
                    "prizeType",
                    "product",
                    "serial"
                ],
                "type": "object",
                "properties": {
                    "serial": {
                        "type": "string",
                        "description": "Serial number of the transaction"
                    },
                    "product": {
                        "type": "integer",
                        "description": "Product Id related with transaction",
                        "format": "int32"
                    },
                    "transactionAmount": {
                        "type": "number",
                        "description": "Money amount, null for points transactions",
                        "nullable": true
                    },
                    "transactionPointAmount": {
                        "type": "number",
                        "description": "Loyalty points amount, null for money transactions",
                        "nullable": true
                    },
                    "transactionVirtualAmount": {
                        "type": "number",
                        "description": "Virtual  amount",
                        "nullable": true
                    },
                    "currency": {
                        "type": "string",
                        "description": "Player selected currency, relevant for CASH win",
                        "nullable": true
                    },
                    "subscriptionId": {
                        "type": "integer",
                        "description": "Subscription Id if wager is purchased by a subscription feature",
                        "format": "int64"
                    },
                    "drawNumber": {
                        "type": "integer",
                        "description": "Start draw number ",
                        "format": "int32"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the won item, matters mostly for MERCHANDISE win type as we need to describe what was won",
                        "nullable": true
                    },
                    "prizeType": {
                        "enum": [
                            "CASH",
                            "FREEPLAY",
                            "MERCHANDISE"
                        ],
                        "type": "string",
                        "description": "Possible wager prize types"
                    },
                    "prizeTier": {
                        "enum": [
                            "HIGH_TIER",
                            "LOW_TIER",
                            "MID_TIER"
                        ],
                        "type": "string",
                        "description": "Possible prize tiers"
                    }
                },
                "description": "Represents validation transaction specific data",
                "nullable": true
            },
            "WagerTransactionDetailsDTO": {
                "required": [
                    "drawNumbers",
                    "endDrawNumber",
                    "product",
                    "serial",
                    "startDrawNumber"
                ],
                "type": "object",
                "properties": {
                    "serial": {
                        "type": "string",
                        "description": "Serial number of the transaction"
                    },
                    "product": {
                        "type": "integer",
                        "description": "Product Id related with transaction",
                        "format": "int32"
                    },
                    "transactionAmount": {
                        "type": "number",
                        "description": "Money amount, null for loyalty points transactions",
                        "nullable": true
                    },
                    "transactionDiscountAmount": {
                        "type": "number",
                        "description": "Money discount amount",
                        "nullable": true
                    },
                    "transactionPointsAmount": {
                        "type": "number",
                        "description": "Loyalty points amount, null for monetary transactions",
                        "nullable": true
                    },
                    "currency": {
                        "type": "string",
                        "description": "Player selected currency, null or POINTS for loyalty points transactions",
                        "nullable": true
                    },
                    "subscriptionId": {
                        "type": "integer",
                        "description": "Subscription Id if wager is purchased by a subscription feature",
                        "format": "int64"
                    },
                    "refCorrelationId": {
                        "type": "string",
                        "description": "Identifier, that will point to origin winning WAGER for VOUCHERS and BONUS_TICKETS "
                    },
                    "startDrawNumber": {
                        "type": "integer",
                        "description": "Start draw number ",
                        "format": "int32"
                    },
                    "endDrawNumber": {
                        "type": "integer",
                        "description": "End draw number ",
                        "format": "int32"
                    },
                    "drawNumbers": {
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "description": "List of draw numbers wager was placed for, in case of simple wager this will be a single value, in case of a multi-draw wager list will have more than one element",
                            "format": "int32"
                        },
                        "description": "List of draw numbers wager was placed for, in case of simple wager this will be a single value, in case of a multi-draw wager list will have more than one element"
                    },
                    "groupId": {
                        "type": "string",
                        "description": "Player's group Id of a wager"
                    },
                    "freeTicket": {
                        "$ref": "#/components/schemas/FreeTicketDTO"
                    },
                    "triggerType": {
                        "type": "string",
                        "description": "Trigger type if wager is purchased by a trigger feature",
                        "nullable": true,
                        "example": "jackpotTrigger"
                    },
                    "betTypeId": {
                        "type": "string",
                        "description": "Identifier of the bet type, null means simple wager, numbers denote particular system ID",
                        "default": "0 or null",
                        "nullable": true,
                        "example": "7"
                    },
                    "betSlipId": {
                        "type": "string",
                        "description": "Identifier related to type of the bet slip player used to place wager",
                        "example": "tripleDip"
                    }
                },
                "description": "Represents wager transaction specific data",
                "nullable": true
            },
            "GameTransactionsPageDTO": {
                "required": [
                    "exclude",
                    "filterBy",
                    "include",
                    "page",
                    "pageSize",
                    "sortBy",
                    "totalItems",
                    "transactions"
                ],
                "type": "object",
                "properties": {
                    "totalItems": {
                        "type": "integer",
                        "description": "Maximum amount of elements that may be returned according to applied filters",
                        "format": "int64"
                    },
                    "pageSize": {
                        "type": "integer",
                        "description": "Maximum amount of elements that may be return in single response",
                        "format": "int32",
                        "default": 30
                    },
                    "page": {
                        "type": "integer",
                        "description": "Current page number",
                        "format": "int32",
                        "default": 1
                    },
                    "sortBy": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "description": "List of field names to describe the sort order. If the field is sorted in ascending order, the field is be prefixed with \"+\". If the field is sorted in descending order, the field is be prefixed with \"-\"",
                            "default": "1",
                            "example": [
                                "+TIMESTAMP"
                            ]
                        },
                        "description": "List of field names to describe the sort order. If the field is sorted in ascending order, the field is be prefixed with \"+\". If the field is sorted in descending order, the field is be prefixed with \"-\"",
                        "default": "1",
                        "example": [
                            "+TIMESTAMP"
                        ]
                    },
                    "filterBy": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "description": "List of field names to describe the filtering status. ",
                            "example": {
                                "correlation-id": "cad759df-f18f-46ad-877e-dea65f76baa3"
                            }
                        },
                        "description": "List of field names to describe the filtering status. ",
                        "example": {
                            "correlation-id": "cad759df-f18f-46ad-877e-dea65f76baa3"
                        }
                    },
                    "include": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "description": "List of fields included in response status",
                            "example": [
                                "id",
                                "linked-transactions"
                            ]
                        },
                        "description": "List of fields included in response status",
                        "example": [
                            "id",
                            "linked-transactions"
                        ]
                    },
                    "exclude": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "description": "List of fields included in response status",
                            "example": [
                                "body",
                                "linked-transactions"
                            ]
                        },
                        "description": "List of fields included in response status",
                        "example": [
                            "body",
                            "linked-transactions"
                        ]
                    },
                    "transactions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/GameTransactionDTO"
                        },
                        "description": "List of transactions"
                    }
                },
                "description": "Wrapper for Game Transactions list "
            },
            "ClaimsSearchDTO": {
                "type": "object",
                "properties": {
                    "linkRelatedTransactions": {
                        "type": "boolean",
                        "description": "Indicates if response should include related transactions. 'true' indicates that transactions of different type but same correlation-id  should be fetched as well. Linked transactions are grouped and returned as a list  nested in transaction.If 'false' value is provided, related transactions will not be loaded.",
                        "default": false
                    },
                    "claimStatus": {
                        "enum": [
                            "PENDING",
                            "CREATED",
                            "PAID",
                            "ON_HOLD",
                            "CANCELLED",
                            "TRANSFERRED",
                            "SPLIT"
                        ],
                        "type": "string",
                        "description": "Possible claim summary transaction statuses"
                    },
                    "claimSource": {
                        "type": "string",
                        "description": "Filter claim by it's sourced"
                    },
                    "dateFrom": {
                        "type": "integer",
                        "description": "Filter claims by date after provided",
                        "format": "int64"
                    },
                    "dateTo": {
                        "type": "integer",
                        "description": "Filter claims by date before provided",
                        "format": "int64"
                    },
                    "drawNumber": {
                        "type": "integer",
                        "description": "Filter claim by drawNumber",
                        "format": "int32"
                    }
                },
                "description": "Container for CLAIM transaction specific search criteria",
                "nullable": true
            },
            "SearchCriteriaDTO": {
                "type": "object",
                "properties": {
                    "page": {
                        "type": "integer",
                        "description": "Number of page to be return.",
                        "format": "int32",
                        "default": 1
                    },
                    "size": {
                        "type": "integer",
                        "description": "Amount of records to be returned. Defines offset if 'page' greater than 1. ",
                        "format": "int32",
                        "default": 30
                    },
                    "dateFrom": {
                        "type": "integer",
                        "description": "Date in millis. 'date-to' -30d used if not provided  ",
                        "format": "int64"
                    },
                    "dateTo": {
                        "type": "integer",
                        "description": "Date in millis. LocalDate.now() used if not provided.",
                        "format": "int64"
                    },
                    "sortBy": {
                        "enum": [
                            "TIMESTAMP",
                            "DRAW_NUMBER",
                            "POINTS_AMOUNT",
                            "AMOUNT"
                        ],
                        "type": "string",
                        "description": "Property name that should be used to sort the results",
                        "default": "TIMESTAMP"
                    },
                    "sortAscending": {
                        "type": "boolean",
                        "description": "Indicates sort order.",
                        "default": false
                    },
                    "wagersSearch": {
                        "$ref": "#/components/schemas/WagerSearchDTO"
                    },
                    "validationSearch": {
                        "$ref": "#/components/schemas/ValidationSearchDTO"
                    },
                    "claimsSearch": {
                        "$ref": "#/components/schemas/ClaimsSearchDTO"
                    }
                },
                "description": "Container for complex search criteria"
            },
            "ValidationSearchDTO": {
                "type": "object",
                "properties": {
                    "linkRelatedTransactions": {
                        "type": "boolean",
                        "description": "Indicates if response should include related transactions. 'true' indicates that transactions of different type but same correlation-id  should be fetched as well. Linked transactions are grouped and returned as a list  nested in transaction.If 'false' value is provided, related transactions will not be loaded.",
                        "default": false
                    },
                    "serial": {
                        "type": "string",
                        "description": "Filter by serial number"
                    },
                    "product": {
                        "type": "integer",
                        "description": "Filter by product ID",
                        "format": "int32"
                    },
                    "transactionAmountMin": {
                        "type": "number",
                        "description": "Include transactions with at least money amount"
                    },
                    "transactionAmountMax": {
                        "type": "number",
                        "description": "Include transactions with at most money amount"
                    },
                    "transactionPointAmountMin": {
                        "type": "number",
                        "description": "Include transactions with at least points amount"
                    },
                    "transactionPointAmountMax": {
                        "type": "number",
                        "description": "Include transactions with at most points amount"
                    },
                    "currency": {
                        "type": "string",
                        "description": "Include transactions with specified currency",
                        "example": "USD"
                    },
                    "subscriptionId": {
                        "type": "integer",
                        "description": "Filter by exact subscription ID",
                        "format": "int64"
                    },
                    "prizeTier": {
                        "enum": [
                            "HIGH_TIER",
                            "LOW_TIER",
                            "MID_TIER"
                        ],
                        "type": "string",
                        "description": "Possible prize tiers"
                    },
                    "prizeType": {
                        "enum": [
                            "CASH",
                            "FREEPLAY",
                            "MERCHANDISE"
                        ],
                        "type": "string",
                        "description": "Possible wager prize types"
                    },
                    "description": {
                        "type": "string",
                        "description": "Keyword/phrase that prize description should contain."
                    },
                    "startDrawNumber": {
                        "type": "integer",
                        "description": "Fetch transaction related with provided Draw ID. If 'endDrawNumber' is provided as well, filter will act as a Draw ID's range definition ",
                        "format": "int32"
                    },
                    "endDrawNumber": {
                        "type": "integer",
                        "description": "Fetch transaction related with provided Draw ID. Together with 'startDrawNumber' provided value defines range of draw ID's for transaction filtering",
                        "format": "int32"
                    }
                },
                "description": "Container for VALIDATION transaction specific search criteria",
                "nullable": true
            },
            "WagerSearchDTO": {
                "type": "object",
                "properties": {
                    "linkRelatedTransactions": {
                        "type": "boolean",
                        "description": "Indicates if response should include related transactions. 'true' indicates that transactions of different type but same correlation-id  should be fetched as well. Linked transactions are grouped and returned as a list  nested in transaction.If 'false' value is provided, related transactions will not be loaded.",
                        "default": false
                    },
                    "serial": {
                        "type": "string",
                        "description": "Filter by serial number"
                    },
                    "product": {
                        "type": "integer",
                        "description": "Filter by product ID",
                        "format": "int32"
                    },
                    "subscriptionId": {
                        "type": "integer",
                        "description": "Filter by exact subscription ID",
                        "format": "int64"
                    },
                    "groupId": {
                        "type": "string",
                        "description": "Filter by exact group ID"
                    },
                    "correlationId": {
                        "type": "string",
                        "description": "Filter by exact correlation ID"
                    },
                    "betSlipId": {
                        "type": "string",
                        "description": "Filter by exact betSlip ID"
                    },
                    "betTypeId": {
                        "type": "string",
                        "description": "Filter by exact betType ID"
                    },
                    "triggerType": {
                        "type": "string",
                        "description": "Filter by trigger Type",
                        "example": "winningNumbersTrigger"
                    },
                    "startDrawNumber": {
                        "type": "integer",
                        "description": "Fetch transaction related with provided Draw ID. If 'endDrawNumber' is provided as well, filter will act as a Draw ID's range definition ",
                        "format": "int32"
                    },
                    "endDrawNumber": {
                        "type": "integer",
                        "description": "Fetch transaction related with provided Draw ID. Together with 'startDrawNumber' provided value defines range of draw ID's for transaction filtering",
                        "format": "int32"
                    },
                    "transactionAmountMin": {
                        "type": "number",
                        "description": "Include transactions with at least money amount"
                    },
                    "transactionAmountMax": {
                        "type": "number",
                        "description": "Include transactions with at most money amount"
                    },
                    "transactionPointAmountMin": {
                        "type": "number",
                        "description": "Include transactions with at least points amount"
                    },
                    "transactionPointAmountMax": {
                        "type": "number",
                        "description": "Include transactions with at most points amount"
                    },
                    "transactionVirtualAmountMin": {
                        "type": "number",
                        "description": "Include transactions with at least virtual amount"
                    },
                    "transactionVirtualAmountMax": {
                        "type": "number",
                        "description": "Include transactions with at most virtual amount"
                    },
                    "currency": {
                        "type": "string",
                        "description": "Include transactions with specified currency",
                        "example": "USD"
                    },
                    "freeTicket": {
                        "$ref": "#/components/schemas/FreeTicketDTO"
                    }
                },
                "description": "Container for complex search criteria against WAGER type transaction",
                "nullable": true
            },
            "AmountDTO": {
                "type": "object",
                "properties": {
                    "value": {
                        "type": "integer",
                        "description": "The value of pocket's amount.",
                        "format": "int64"
                    },
                    "currencyCode": {
                        "type": "string",
                        "description": "The currency of the amount"
                    }
                },
                "description": "The player's deposits balance."
            },
            "WalletBalanceDTO": {
                "type": "object",
                "properties": {
                    "availableBalance": {
                        "$ref": "#/components/schemas/AmountDTO"
                    },
                    "accountBalance": {
                        "$ref": "#/components/schemas/AmountDTO"
                    },
                    "withdrawableBalance": {
                        "$ref": "#/components/schemas/AmountDTO"
                    },
                    "winningsBalance": {
                        "$ref": "#/components/schemas/AmountDTO"
                    },
                    "depositsBalance": {
                        "$ref": "#/components/schemas/AmountDTO"
                    }
                }
            },
            "TriggerRetryDTO": {
                "required": [
                    "retryCode"
                ],
                "type": "object",
                "properties": {
                    "retryCode": {
                        "minLength": 1,
                        "type": "string",
                        "description": "Trigger retry code",
                        "example": "25"
                    }
                },
                "description": "Trigger retry request"
            },
            "TriggerActionDTO": {
                "required": [
                    "id",
                    "type"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "minLength": 1,
                        "type": "string",
                        "description": "Action identifier",
                        "example": "25"
                    },
                    "type": {
                        "minLength": 1,
                        "type": "string",
                        "description": "Trigger type, for instance JACKPOT_WAGER_TRIGGER, WIN_AGAIN_WAGER_TRIGGER, SUBSCRIPTION, BALANCE, etc.",
                        "example": "JACKPOT_WAGER_TRIGGER"
                    },
                    "wager": {
                        "$ref": "#/components/schemas/interactiveWagerDTO"
                    },
                    "einstantWager": {
                        "$ref": "#/components/schemas/interactiveWagerDTO"
                    },
                    "subscription": {
                        "$ref": "#/components/schemas/interactiveSubscriptionDTO"
                    }
                },
                "description": "Trigger action description (like placing a wager)"
            },
            "TriggerDTO": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Trigger identifier, will be assigned by backend",
                        "example": "25"
                    },
                    "state": {
                        "enum": [
                            "ENABLED",
                            "DISABLED",
                            "SUSPENDED"
                        ],
                        "type": "string",
                        "description": "Trigger state",
                        "example": "ENABLED"
                    },
                    "status": {
                        "enum": [
                            "NOT_RUN",
                            "SUCCESS",
                            "FAIL"
                        ],
                        "type": "string",
                        "description": "Trigger status, returned by backend",
                        "example": "SUCCESS"
                    },
                    "creationTime": {
                        "type": "integer",
                        "description": "Trigger creation time as UTC timestamp in milliseconds",
                        "format": "int64",
                        "example": 1583412960000
                    },
                    "lastUpdateTime": {
                        "type": "integer",
                        "description": "Trigger last update time as UTC timestamp in milliseconds",
                        "format": "int64",
                        "example": 1583412960000
                    },
                    "expirationTime": {
                        "type": "integer",
                        "description": "Trigger expiration time as UTC timestamp in milliseconds",
                        "format": "int64",
                        "example": 1583412960000
                    },
                    "rule": {
                        "$ref": "#/components/schemas/TriggerRuleDTO"
                    },
                    "actions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TriggerActionDTO"
                        },
                        "description": "List of actions activated by trigger"
                    }
                },
                "description": "Trigger request/response object"
            },
            "TriggerRuleDTO": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Trigger name",
                        "example": "Jackpot trigger"
                    },
                    "definition": {
                        "type": "string",
                        "description": "Trigger activation condition",
                        "example": "jackpot >= 10000000000"
                    }
                },
                "description": "Trigger activation rule description"
            },
            "TriggerPageDTO": {
                "required": [
                    "nextItems",
                    "nextPageUrl",
                    "pageUrls",
                    "previousItems",
                    "previousPageUrl",
                    "triggers"
                ],
                "type": "object",
                "properties": {
                    "nextPageUrl": {
                        "type": "string",
                        "description": "URL indicating where the next page can be found"
                    },
                    "previousPageUrl": {
                        "type": "string",
                        "description": "URL indicating where the previous page can be found"
                    },
                    "pageUrls": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string",
                            "description": "Map of pages URLs accessed by the page number (to jump to selected page)"
                        },
                        "description": "Map of pages URLs accessed by the page number (to jump to selected page)"
                    },
                    "nextItems": {
                        "type": "integer",
                        "description": "Amount of items in the next pages",
                        "format": "int32"
                    },
                    "previousItems": {
                        "type": "integer",
                        "description": " Amount of items in the previous pages",
                        "format": "int32"
                    },
                    "triggers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TriggerDTO"
                        },
                        "description": "List of triggers"
                    }
                }
            }
        },
        "securitySchemes": {
            "apiKeyHeader": {
                "type": "apiKey",
                "name": "Ocp-Apim-Subscription-Key",
                "in": "header"
            },
            "apiKeyQuery": {
                "type": "apiKey",
                "name": "subscription-key",
                "in": "query"
            }
        }
    },
    "security": [
        {
            "apiKeyHeader": []
        },
        {
            "apiKeyQuery": []
        }
    ]
}