parameters:
  # Pipeline-related parameters
  poolName: '$(poolName)'
  vmImage: '$(vmImage)'
  defaultJobTimeoutInMinutes: 120
  # Logic-related parameters
  openApiFilePath: '$(openApiFullPath)'
  rulesetPath: '$(spectralRulesPath)'
  lintResult: '$(lintResult)'
  # warn, error
  failSeverity: 'error'
  serviceConnection: '$(serviceConnection)'

##---------------------------------------------##
## TEMPLATE LOGIC                              ##
##---------------------------------------------##
jobs:
  - job:
    displayName: Spectral
    timeoutInMinutes: ${{ parameters.defaultJobTimeoutInMinutes }}
    pool:
      ${{ if ne(parameters.vmImage, '') }}:
        vmImage: ${{ parameters.vmImage }}
      ${{ if ne(parameters.poolName, '') }}:
        name: ${{ parameters.poolName }}
    steps:
      - checkout: self

      - script: cat ${{ parameters.rulesetPath }}
        continueOnError: true
        displayName: 'Show OpenAPI rules'

      - script: cat ${{ parameters.openApiFilePath }}
        continueOnError: true
        displayName: 'Show OpenAPI spec'

      - script: sudo npm install -g @stoplight/spectral-cli --force
        displayName: 'Install Linting Tool (stoplight/spectral)'

      - bash: |
          spectral --version
          echo '... linting :: ${{ parameters.openApiFilePath }}'
          echo '... ruleset :: ${{ parameters.rulesetPath }}'
          echo '... failSeverity :: ${{ parameters.failSeverity }}'
        displayName: 'spectral parameters'

      - script: spectral lint "${{ parameters.openApiFilePath }}" --ruleset "${{ parameters.rulesetPath }}" --fail-severity "${{ parameters.failSeverity }}" --output "${{ parameters.lintResult }}" --format sarif
        continueOnError: true
        displayName: 'Lint OpenAPI specs'

      - script: cat ${{ parameters.lintResult }}
        continueOnError: true
        displayName: 'Show result'

      - bash: |
          lintresults=$(jq '{
              results: [.runs[0].results[] | {
              analyzer: "SpectralAnalyzerName",
                  description: .message.text,
              analyzerRuleName: .ruleId,
              severity: (if .level == "warning" then "1" elif .level == "error" then "2" else "0" end),
              docUrl: .helpUri,
                  details: {
                      range: {
                          start: ((.locations[0].physicalLocation.region.startLine|tostring) + ":" + (.locations[0].physicalLocation.region.startColumn|tostring)),
                          end: ((.locations[0].physicalLocation.region.endLine|tostring) + ":" + (.locations[0].physicalLocation.region.endColumn|tostring))
                      }
                  }
              }]
          }' ${{ parameters.lintResult }})
          #echo $lintresults
          echo "##vso[task.setvariable variable=lintForApiCenter;]$lintresults"

        displayName: 'Show formatted result'

      - bash: |
          #json_string=$(jq -c '.' "$lintForApiCenter")
          echo $lintForApiCenter
        displayName: 'lintForApiCenter'

      - task: AzureCLI@2
        inputs:
          azureSubscription: ${{ parameters.serviceConnection }}
          scriptType: 'bash'
          scriptLocation: 'inlineScript'
          inlineScript: |
            //"started" | "completed" | "failed" | "none";

            az rest --method post \
                    --uri "https://management.azure.com/subscriptions/$(subscriptionId)/resourceGroups/$(resourceGroup)/providers/Microsoft.Web/sites/$(appServiceName)/config/web?api-version=$(apiVersion)" \
                    --headers "Content-Type=application/json" \
                    --body "$(lintForApiCenter)"
        displayName: 'Pulish results to API Center'

      - task: PublishTestResults@2
        inputs:
          testResultsFormat: 'JUnit'
          testResultsFiles: '${{ parameters.lintResult }}'
          failTaskOnFailedTests: true
          testRunTitle: 'Spectral Linting Results'
        displayName: 'Publish Test Results'