parameters:
  # Pipeline-related parameters
  poolName: '$(poolName)'
  vmImage: '$(vmImage)'
  defaultJobTimeoutInMinutes: 120
  serviceConnection: '$(serviceConnection)'
  # Logic-related parameters
  spectralRulesFullPath: '$(spectralRulesFullPath)'
  failSeverity: 'warn'
  openApiFilePath: '$(openApiFullPath)'
  # APIC parameters
  rg: 'rg-apicenter'
  apicName: 'myapicatalog'
  apiName: ''
  apiTitle: ''
  apiDescription: ''
  currentApiVersion: ''

##---------------------------------------------##
## TEMPLATE LOGIC                              ##
##---------------------------------------------##
jobs:
  - job:
    displayName: Azure API Center
    timeoutInMinutes: ${{ parameters.defaultJobTimeoutInMinutes }}
    pool:
      ${{ if ne(parameters.vmImage, '') }}:
        vmImage: ${{ parameters.vmImage }}
      ${{ if ne(parameters.poolName, '') }}:
        name: ${{ parameters.poolName }}
    steps:
      - checkout: self
      
      - task: AzureCLI@2  
        displayName: Debug
        inputs:
          azureSubscription: ${{ parameters.serviceConnection }}
          scriptType: pscore
          scriptLocation: inlineScript
          inlineScript: |
            echo "... Open API Path"
            cat ${{ parameters.openApiFilePath }}
            echo ""
            echo "... API version"
            echo ${{ parameters.currentApiVersion }}


      - task: AzureCLI@2
        displayName: 'JQ'
        inputs:
          azureSubscription: ${{ parameters.serviceConnection }}
          scriptType: 'bash'
          scriptLocation: inlineScript
          inlineScript: |
            sudo apt --assume-yes install jq
            jContent=$(jq -c . '${{ parameters.openApiFilePath }}')
            echo "##vso[task.setvariable variable=openApiContent;]$jContent"

      - bash: |
          echo 'use macro syntax to read variables: $(openApiContent)'

      - task: AzureCLI@2  
        displayName: APIC - api list
        inputs:
          azureSubscription: ${{ parameters.serviceConnection }}
          scriptType: pscore
          scriptLocation: inlineScript
          inlineScript: |
            echo "... ****** Print API LIST command ******"
            echo "az apic api list -g ${{ parameters.rg }} -s ${{ parameters.apicName }}"
            echo ""
            echo "... Executing command :"
            az apic api list -g ${{ parameters.rg }} -s ${{ parameters.apicName }}

      - task: AzureCLI@2  
        displayName: APIC - api create
        inputs:
          azureSubscription: ${{ parameters.serviceConnection }}
          scriptType: pscore
          scriptLocation: inlineScript
          inlineScript: |
            echo "... ****** Print API CREATE command ******"
            echo "az apic api create --api-id ${{ parameters.apiName }} -g ${{ parameters.rg }} -s ${{ parameters.apicName }} --title '${{ parameters.apiTitle }}' --type rest --description '${{ parameters.apiDescription }}' --summary '${{ parameters.apiDescription }}'"
            echo ""
            echo "... Executing command :"
            az apic api create --api-id ${{ parameters.apiName }} -g ${{ parameters.rg }} -s ${{ parameters.apicName }} --title '${{ parameters.apiTitle }}' --type rest --description '${{ parameters.apiDescription }}' --summary '${{ parameters.apiDescription }}'
            #--custom-properties '{"public-facing":true}'

      - task: AzureCLI@2  
        displayName: APIC - api version create
        inputs:
          azureSubscription: ${{ parameters.serviceConnection }}
          scriptType: pscore
          scriptLocation: inlineScript
          inlineScript: |
            echo "... ****** Print API VERSION CREATE command ******"
            echo "az apic api version create --api-id ${{ parameters.apiName }} -g ${{ parameters.rg }} -s ${{ parameters.apicName }} --version-id ${{ parameters.currentApiVersion }} --title '${{ parameters.currentApiVersion }}' --lifecycle-stage design"
            echo ""
            echo "... Executing command :"
            az apic api version create --api-id ${{ parameters.apiName }} -g ${{ parameters.rg }} -s ${{ parameters.apicName }} --version-id ${{ parameters.currentApiVersion }} --title '${{ parameters.currentApiVersion }}' --lifecycle-stage design
            

      - task: AzureCLI@2  
        displayName: APIC - api import specification
        inputs:
          azureSubscription: ${{ parameters.serviceConnection }}
          scriptType: pscore
          scriptLocation: inlineScript
          inlineScript: |
            echo "... ****** Print DEFINITION CREATE command ******"
            echo "az apic api definition create --api-id ${{ parameters.apiName }} -g ${{ parameters.rg }} -s ${{ parameters.apicName }} --version-id ${{ parameters.currentApiVersion }} --definition-id 'xdef2024' --title 'OpenAPI xdef2024'"
            echo ""
            echo "... Executing command :"
            az apic api definition create --api-id ${{ parameters.apiName }} -g ${{ parameters.rg }} -s ${{ parameters.apicName }} --version-id ${{ parameters.currentApiVersion }} --definition-id 'xdef2024' --title 'OpenAPI xdef2024'
            echo "------------------------------------"
            echo ""
            echo "... ****** Print DEFINITION IMPORT-SPECIFICATION command ******"
            echo "az apic api definition import-specification --api-id ${{ parameters.apiName }} --definition-id 'xdef2024' --format "inline" --value '$(openApiContent)' --specification '{"name":"openapi","version":"3.0.1"}' --version-id ${{ parameters.currentApiVersion }} -g ${{ parameters.rg }} -s ${{ parameters.apicName }}"
            echo ""
            echo "... Executing command :"
            az apic api definition import-specification --api-id ${{ parameters.apiName }} --definition-id 'xdef2024' --format "inline" --value '$(openApiContent)' --specification '{"name":"openapi","version":"3.0.1"}' --version-id ${{ parameters.currentApiVersion }} -g ${{ parameters.rg }} -s ${{ parameters.apicName }}
